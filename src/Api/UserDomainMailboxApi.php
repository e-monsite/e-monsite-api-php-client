<?php
/**
 * UserDomainMailboxApi
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EmonsiteApi\ApiException;
use EmonsiteApi\Configuration;
use EmonsiteApi\HeaderSelector;
use EmonsiteApi\ObjectSerializer;

/**
 * UserDomainMailboxApi Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserDomainMailboxApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUserDomainMailboxCollection
     *
     * Retrieves the collection of UserDomainMailboxOutputDto resources.
     *
     * @param  string $id id (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $domain domain (optional)
     * @param  string[] $domain2 domain2 (optional)
     * @param  string $username username (optional)
     * @param  string[] $username2 username2 (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 30)
     *
     * @throws \EmonsiteApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmonsiteApi\Models\GetUserDomainMailboxCollection200Response
     */
    public function getUserDomainMailboxCollection($id = null, $id2 = null, $domain = null, $domain2 = null, $username = null, $username2 = null, $page = 1, $itemsPerPage = 30)
    {
        list($response) = $this->getUserDomainMailboxCollectionWithHttpInfo($id, $id2, $domain, $domain2, $username, $username2, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getUserDomainMailboxCollectionWithHttpInfo
     *
     * Retrieves the collection of UserDomainMailboxOutputDto resources.
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $domain (optional)
     * @param  string[] $domain2 (optional)
     * @param  string $username (optional)
     * @param  string[] $username2 (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 30)
     *
     * @throws \EmonsiteApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmonsiteApi\Models\GetUserDomainMailboxCollection200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserDomainMailboxCollectionWithHttpInfo($id = null, $id2 = null, $domain = null, $domain2 = null, $username = null, $username2 = null, $page = 1, $itemsPerPage = 30)
    {
        $request = $this->getUserDomainMailboxCollectionRequest($id, $id2, $domain, $domain2, $username, $username2, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\EmonsiteApi\Models\GetUserDomainMailboxCollection200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EmonsiteApi\Models\GetUserDomainMailboxCollection200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EmonsiteApi\Models\GetUserDomainMailboxCollection200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EmonsiteApi\Models\GetUserDomainMailboxCollection200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmonsiteApi\Models\GetUserDomainMailboxCollection200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserDomainMailboxCollectionAsync
     *
     * Retrieves the collection of UserDomainMailboxOutputDto resources.
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $domain (optional)
     * @param  string[] $domain2 (optional)
     * @param  string $username (optional)
     * @param  string[] $username2 (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserDomainMailboxCollectionAsync($id = null, $id2 = null, $domain = null, $domain2 = null, $username = null, $username2 = null, $page = 1, $itemsPerPage = 30)
    {
        return $this->getUserDomainMailboxCollectionAsyncWithHttpInfo($id, $id2, $domain, $domain2, $username, $username2, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserDomainMailboxCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of UserDomainMailboxOutputDto resources.
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $domain (optional)
     * @param  string[] $domain2 (optional)
     * @param  string $username (optional)
     * @param  string[] $username2 (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserDomainMailboxCollectionAsyncWithHttpInfo($id = null, $id2 = null, $domain = null, $domain2 = null, $username = null, $username2 = null, $page = 1, $itemsPerPage = 30)
    {
        $returnType = '\EmonsiteApi\Models\GetUserDomainMailboxCollection200Response';
        $request = $this->getUserDomainMailboxCollectionRequest($id, $id2, $domain, $domain2, $username, $username2, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserDomainMailboxCollection'
     *
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $domain (optional)
     * @param  string[] $domain2 (optional)
     * @param  string $username (optional)
     * @param  string[] $username2 (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $itemsPerPage The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserDomainMailboxCollectionRequest($id = null, $id2 = null, $domain = null, $domain2 = null, $username = null, $username2 = null, $page = 1, $itemsPerPage = 30)
    {
        if ($itemsPerPage !== null && $itemsPerPage < 0) {
            throw new \InvalidArgumentException('invalid value for "$itemsPerPage" when calling UserDomainMailboxApi.getUserDomainMailboxCollection, must be bigger than or equal to 0.');
        }


        $resourcePath = '/user_domain_mailboxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id2,
            'id[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain,
            'domain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain2,
            'domain[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $username,
            'username', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $username2,
            'username[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserDomainMailboxItem
     *
     * Retrieves a UserDomainMailboxOutputDto resource.
     *
     * @param  string $id id (required)
     *
     * @throws \EmonsiteApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld
     */
    public function getUserDomainMailboxItem($id)
    {
        list($response) = $this->getUserDomainMailboxItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getUserDomainMailboxItemWithHttpInfo
     *
     * Retrieves a UserDomainMailboxOutputDto resource.
     *
     * @param  string $id (required)
     *
     * @throws \EmonsiteApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserDomainMailboxItemWithHttpInfo($id)
    {
        $request = $this->getUserDomainMailboxItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserDomainMailboxItemAsync
     *
     * Retrieves a UserDomainMailboxOutputDto resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserDomainMailboxItemAsync($id)
    {
        return $this->getUserDomainMailboxItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserDomainMailboxItemAsyncWithHttpInfo
     *
     * Retrieves a UserDomainMailboxOutputDto resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserDomainMailboxItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld';
        $request = $this->getUserDomainMailboxItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserDomainMailboxItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserDomainMailboxItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUserDomainMailboxItem'
            );
        }

        $resourcePath = '/user_domain_mailboxes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postUserDomainMailboxCollection
     *
     * Creates a UserDomainMailbox resource.
     *
     * @param  \EmonsiteApi\Models\UserDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld $userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld The new UserDomainMailbox resource (optional)
     *
     * @throws \EmonsiteApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld
     */
    public function postUserDomainMailboxCollection($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld = null)
    {
        list($response) = $this->postUserDomainMailboxCollectionWithHttpInfo($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld);
        return $response;
    }

    /**
     * Operation postUserDomainMailboxCollectionWithHttpInfo
     *
     * Creates a UserDomainMailbox resource.
     *
     * @param  \EmonsiteApi\Models\UserDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld $userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld The new UserDomainMailbox resource (optional)
     *
     * @throws \EmonsiteApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUserDomainMailboxCollectionWithHttpInfo($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld = null)
    {
        $request = $this->postUserDomainMailboxCollectionRequest($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postUserDomainMailboxCollectionAsync
     *
     * Creates a UserDomainMailbox resource.
     *
     * @param  \EmonsiteApi\Models\UserDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld $userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld The new UserDomainMailbox resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUserDomainMailboxCollectionAsync($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld = null)
    {
        return $this->postUserDomainMailboxCollectionAsyncWithHttpInfo($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postUserDomainMailboxCollectionAsyncWithHttpInfo
     *
     * Creates a UserDomainMailbox resource.
     *
     * @param  \EmonsiteApi\Models\UserDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld $userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld The new UserDomainMailbox resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUserDomainMailboxCollectionAsyncWithHttpInfo($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld = null)
    {
        $returnType = '\EmonsiteApi\Models\UserDomainMailboxB24869693c225df47103d00fd93b91e9Jsonld';
        $request = $this->postUserDomainMailboxCollectionRequest($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postUserDomainMailboxCollection'
     *
     * @param  \EmonsiteApi\Models\UserDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld $userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld The new UserDomainMailbox resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postUserDomainMailboxCollectionRequest($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld = null)
    {

        $resourcePath = '/user_domain_mailboxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/ld+json', 'application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld));
            } else {
                $httpBody = $userDomainMailbox26e994f28120c4b51733f4efd1c6a999Jsonld;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
