<?php
/**
 * Site0097c999ec7d3611ad5fec647120ea72
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * Site0097c999ec7d3611ad5fec647120ea72 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Site0097c999ec7d3611ad5fec647120ea72 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Site:0097c999ec7d3611ad5fec647120ea72';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'createdAt' => '\DateTime',
        'createdByIp' => 'string',
        'country' => 'string',
        'brand' => 'mixed',
        'sitename' => 'string',
        'host' => 'string',
        'url' => 'string',
        'shardId' => 'string',
        'storageQuotaUsed' => 'int',
        'deleted' => 'bool',
        'siteSuspend' => 'bool',
        'managerSuspend' => 'bool',
        'reasonSuspend' => 'string',
        'whitelist' => 'string',
        'lastLogAt' => '\DateTime',
        'siteUsers' => 'mixed',
        'plan' => 'string[]',
        'products' => 'string',
        'modules' => 'mixed',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'createdAt' => 'date-time',
        'createdByIp' => null,
        'country' => null,
        'brand' => null,
        'sitename' => null,
        'host' => null,
        'url' => null,
        'shardId' => null,
        'storageQuotaUsed' => null,
        'deleted' => null,
        'siteSuspend' => null,
        'managerSuspend' => null,
        'reasonSuspend' => null,
        'whitelist' => null,
        'lastLogAt' => 'date-time',
        'siteUsers' => null,
        'plan' => null,
        'products' => null,
        'modules' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'createdAt' => 'createdAt',
        'createdByIp' => 'createdByIp',
        'country' => 'country',
        'brand' => 'brand',
        'sitename' => 'sitename',
        'host' => 'host',
        'url' => 'url',
        'shardId' => 'shardId',
        'storageQuotaUsed' => 'storageQuotaUsed',
        'deleted' => 'deleted',
        'siteSuspend' => 'siteSuspend',
        'managerSuspend' => 'managerSuspend',
        'reasonSuspend' => 'reasonSuspend',
        'whitelist' => 'whitelist',
        'lastLogAt' => 'lastLogAt',
        'siteUsers' => 'siteUsers',
        'plan' => 'plan',
        'products' => 'products',
        'modules' => 'modules',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'createdAt' => 'setCreatedAt',
        'createdByIp' => 'setCreatedByIp',
        'country' => 'setCountry',
        'brand' => 'setBrand',
        'sitename' => 'setSitename',
        'host' => 'setHost',
        'url' => 'setUrl',
        'shardId' => 'setShardId',
        'storageQuotaUsed' => 'setStorageQuotaUsed',
        'deleted' => 'setDeleted',
        'siteSuspend' => 'setSiteSuspend',
        'managerSuspend' => 'setManagerSuspend',
        'reasonSuspend' => 'setReasonSuspend',
        'whitelist' => 'setWhitelist',
        'lastLogAt' => 'setLastLogAt',
        'siteUsers' => 'setSiteUsers',
        'plan' => 'setPlan',
        'products' => 'setProducts',
        'modules' => 'setModules',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'createdAt' => 'getCreatedAt',
        'createdByIp' => 'getCreatedByIp',
        'country' => 'getCountry',
        'brand' => 'getBrand',
        'sitename' => 'getSitename',
        'host' => 'getHost',
        'url' => 'getUrl',
        'shardId' => 'getShardId',
        'storageQuotaUsed' => 'getStorageQuotaUsed',
        'deleted' => 'getDeleted',
        'siteSuspend' => 'getSiteSuspend',
        'managerSuspend' => 'getManagerSuspend',
        'reasonSuspend' => 'getReasonSuspend',
        'whitelist' => 'getWhitelist',
        'lastLogAt' => 'getLastLogAt',
        'siteUsers' => 'getSiteUsers',
        'plan' => 'getPlan',
        'products' => 'getProducts',
        'modules' => 'getModules',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['createdByIp'] = $data['createdByIp'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['brand'] = $data['brand'] ?? null;
        $this->container['sitename'] = $data['sitename'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['shardId'] = $data['shardId'] ?? null;
        $this->container['storageQuotaUsed'] = $data['storageQuotaUsed'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
        $this->container['siteSuspend'] = $data['siteSuspend'] ?? null;
        $this->container['managerSuspend'] = $data['managerSuspend'] ?? null;
        $this->container['reasonSuspend'] = $data['reasonSuspend'] ?? null;
        $this->container['whitelist'] = $data['whitelist'] ?? null;
        $this->container['lastLogAt'] = $data['lastLogAt'] ?? null;
        $this->container['siteUsers'] = $data['siteUsers'] ?? null;
        $this->container['plan'] = $data['plan'] ?? null;
        $this->container['products'] = $data['products'] ?? null;
        $this->container['modules'] = $data['modules'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets createdByIp
     *
     * @return string|null
     */
    public function getCreatedByIp()
    {
        return $this->container['createdByIp'];
    }

    /**
     * Sets createdByIp
     *
     * @param string|null $createdByIp createdByIp
     *
     * @return self
     */
    public function setCreatedByIp($createdByIp)
    {
        $this->container['createdByIp'] = $createdByIp;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return mixed|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param mixed|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets sitename
     *
     * @return string|null
     */
    public function getSitename()
    {
        return $this->container['sitename'];
    }

    /**
     * Sets sitename
     *
     * @param string|null $sitename sitename
     *
     * @return self
     */
    public function setSitename($sitename)
    {
        $this->container['sitename'] = $sitename;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets shardId
     *
     * @return string|null
     */
    public function getShardId()
    {
        return $this->container['shardId'];
    }

    /**
     * Sets shardId
     *
     * @param string|null $shardId shardId
     *
     * @return self
     */
    public function setShardId($shardId)
    {
        $this->container['shardId'] = $shardId;

        return $this;
    }

    /**
     * Gets storageQuotaUsed
     *
     * @return int|null
     */
    public function getStorageQuotaUsed()
    {
        return $this->container['storageQuotaUsed'];
    }

    /**
     * Sets storageQuotaUsed
     *
     * @param int|null $storageQuotaUsed storageQuotaUsed
     *
     * @return self
     */
    public function setStorageQuotaUsed($storageQuotaUsed)
    {
        $this->container['storageQuotaUsed'] = $storageQuotaUsed;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets siteSuspend
     *
     * @return bool|null
     */
    public function getSiteSuspend()
    {
        return $this->container['siteSuspend'];
    }

    /**
     * Sets siteSuspend
     *
     * @param bool|null $siteSuspend siteSuspend
     *
     * @return self
     */
    public function setSiteSuspend($siteSuspend)
    {
        $this->container['siteSuspend'] = $siteSuspend;

        return $this;
    }

    /**
     * Gets managerSuspend
     *
     * @return bool|null
     */
    public function getManagerSuspend()
    {
        return $this->container['managerSuspend'];
    }

    /**
     * Sets managerSuspend
     *
     * @param bool|null $managerSuspend managerSuspend
     *
     * @return self
     */
    public function setManagerSuspend($managerSuspend)
    {
        $this->container['managerSuspend'] = $managerSuspend;

        return $this;
    }

    /**
     * Gets reasonSuspend
     *
     * @return string|null
     */
    public function getReasonSuspend()
    {
        return $this->container['reasonSuspend'];
    }

    /**
     * Sets reasonSuspend
     *
     * @param string|null $reasonSuspend reasonSuspend
     *
     * @return self
     */
    public function setReasonSuspend($reasonSuspend)
    {
        $this->container['reasonSuspend'] = $reasonSuspend;

        return $this;
    }

    /**
     * Gets whitelist
     *
     * @return string|null
     */
    public function getWhitelist()
    {
        return $this->container['whitelist'];
    }

    /**
     * Sets whitelist
     *
     * @param string|null $whitelist whitelist
     *
     * @return self
     */
    public function setWhitelist($whitelist)
    {
        $this->container['whitelist'] = $whitelist;

        return $this;
    }

    /**
     * Gets lastLogAt
     *
     * @return \DateTime|null
     */
    public function getLastLogAt()
    {
        return $this->container['lastLogAt'];
    }

    /**
     * Sets lastLogAt
     *
     * @param \DateTime|null $lastLogAt lastLogAt
     *
     * @return self
     */
    public function setLastLogAt($lastLogAt)
    {
        $this->container['lastLogAt'] = $lastLogAt;

        return $this;
    }

    /**
     * Gets siteUsers
     *
     * @return mixed|null
     */
    public function getSiteUsers()
    {
        return $this->container['siteUsers'];
    }

    /**
     * Sets siteUsers
     *
     * @param mixed|null $siteUsers siteUsers
     *
     * @return self
     */
    public function setSiteUsers($siteUsers)
    {
        $this->container['siteUsers'] = $siteUsers;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string[]|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string[]|null $plan Le plan en cours (perso, pro, business, eco)
     *
     * @return self
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets products
     *
     * @return string|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param string|null $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return mixed|null
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param mixed|null $modules modules
     *
     * @return self
     */
    public function setModules($modules)
    {
        $this->container['modules'] = $modules;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


