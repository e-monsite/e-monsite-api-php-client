<?php
/**
 * User940d105763f3d1a848f991a4d326f00e
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * User940d105763f3d1a848f991a4d326f00e Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class User940d105763f3d1a848f991a4d326f00e implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User:940d105763f3d1a848f991a4d326f00e';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'brand' => 'mixed',
        'createdAt' => '\DateTime',
        'addUserIp' => 'string',
        'username' => 'string',
        'gender' => 'string',
        'email' => 'string',
        'shardId' => 'string',
        'name' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'addrLine1' => 'string',
        'addrLine2' => 'string',
        'zipCode' => 'string',
        'city' => 'string',
        'country' => 'string',
        'tel' => 'string',
        'mobile' => 'string',
        'group' => 'string',
        'deleted' => 'bool',
        'emailValid' => 'bool',
        'chatbotEnabled' => 'bool',
        'avatarUrl' => 'string',
        'siteUsers' => 'mixed',
        'fcmToken' => 'string',
        'sessions' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'brand' => null,
        'createdAt' => 'date-time',
        'addUserIp' => null,
        'username' => null,
        'gender' => null,
        'email' => null,
        'shardId' => null,
        'name' => null,
        'firstName' => null,
        'lastName' => null,
        'addrLine1' => null,
        'addrLine2' => null,
        'zipCode' => null,
        'city' => null,
        'country' => null,
        'tel' => null,
        'mobile' => null,
        'group' => null,
        'deleted' => null,
        'emailValid' => null,
        'chatbotEnabled' => null,
        'avatarUrl' => null,
        'siteUsers' => null,
        'fcmToken' => null,
        'sessions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'brand' => 'brand',
        'createdAt' => 'createdAt',
        'addUserIp' => 'addUserIp',
        'username' => 'username',
        'gender' => 'gender',
        'email' => 'email',
        'shardId' => 'shardId',
        'name' => 'name',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'addrLine1' => 'addrLine1',
        'addrLine2' => 'addrLine2',
        'zipCode' => 'zipCode',
        'city' => 'city',
        'country' => 'country',
        'tel' => 'tel',
        'mobile' => 'mobile',
        'group' => 'group',
        'deleted' => 'deleted',
        'emailValid' => 'emailValid',
        'chatbotEnabled' => 'chatbotEnabled',
        'avatarUrl' => 'avatarUrl',
        'siteUsers' => 'siteUsers',
        'fcmToken' => 'fcmToken',
        'sessions' => 'sessions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'brand' => 'setBrand',
        'createdAt' => 'setCreatedAt',
        'addUserIp' => 'setAddUserIp',
        'username' => 'setUsername',
        'gender' => 'setGender',
        'email' => 'setEmail',
        'shardId' => 'setShardId',
        'name' => 'setName',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'addrLine1' => 'setAddrLine1',
        'addrLine2' => 'setAddrLine2',
        'zipCode' => 'setZipCode',
        'city' => 'setCity',
        'country' => 'setCountry',
        'tel' => 'setTel',
        'mobile' => 'setMobile',
        'group' => 'setGroup',
        'deleted' => 'setDeleted',
        'emailValid' => 'setEmailValid',
        'chatbotEnabled' => 'setChatbotEnabled',
        'avatarUrl' => 'setAvatarUrl',
        'siteUsers' => 'setSiteUsers',
        'fcmToken' => 'setFcmToken',
        'sessions' => 'setSessions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'brand' => 'getBrand',
        'createdAt' => 'getCreatedAt',
        'addUserIp' => 'getAddUserIp',
        'username' => 'getUsername',
        'gender' => 'getGender',
        'email' => 'getEmail',
        'shardId' => 'getShardId',
        'name' => 'getName',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'addrLine1' => 'getAddrLine1',
        'addrLine2' => 'getAddrLine2',
        'zipCode' => 'getZipCode',
        'city' => 'getCity',
        'country' => 'getCountry',
        'tel' => 'getTel',
        'mobile' => 'getMobile',
        'group' => 'getGroup',
        'deleted' => 'getDeleted',
        'emailValid' => 'getEmailValid',
        'chatbotEnabled' => 'getChatbotEnabled',
        'avatarUrl' => 'getAvatarUrl',
        'siteUsers' => 'getSiteUsers',
        'fcmToken' => 'getFcmToken',
        'sessions' => 'getSessions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['brand'] = $data['brand'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['addUserIp'] = $data['addUserIp'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['shardId'] = $data['shardId'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['firstName'] = $data['firstName'] ?? null;
        $this->container['lastName'] = $data['lastName'] ?? null;
        $this->container['addrLine1'] = $data['addrLine1'] ?? null;
        $this->container['addrLine2'] = $data['addrLine2'] ?? null;
        $this->container['zipCode'] = $data['zipCode'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['tel'] = $data['tel'] ?? null;
        $this->container['mobile'] = $data['mobile'] ?? null;
        $this->container['group'] = $data['group'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
        $this->container['emailValid'] = $data['emailValid'] ?? null;
        $this->container['chatbotEnabled'] = $data['chatbotEnabled'] ?? null;
        $this->container['avatarUrl'] = $data['avatarUrl'] ?? null;
        $this->container['siteUsers'] = $data['siteUsers'] ?? null;
        $this->container['fcmToken'] = $data['fcmToken'] ?? null;
        $this->container['sessions'] = $data['sessions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return mixed|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param mixed|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets addUserIp
     *
     * @return string|null
     */
    public function getAddUserIp()
    {
        return $this->container['addUserIp'];
    }

    /**
     * Sets addUserIp
     *
     * @param string|null $addUserIp addUserIp
     *
     * @return self
     */
    public function setAddUserIp($addUserIp)
    {
        $this->container['addUserIp'] = $addUserIp;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender male|female
     *
     * @return self
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets shardId
     *
     * @return string|null
     */
    public function getShardId()
    {
        return $this->container['shardId'];
    }

    /**
     * Sets shardId
     *
     * @param string|null $shardId shardId
     *
     * @return self
     */
    public function setShardId($shardId)
    {
        $this->container['shardId'] = $shardId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets addrLine1
     *
     * @return string|null
     */
    public function getAddrLine1()
    {
        return $this->container['addrLine1'];
    }

    /**
     * Sets addrLine1
     *
     * @param string|null $addrLine1 addrLine1
     *
     * @return self
     */
    public function setAddrLine1($addrLine1)
    {
        $this->container['addrLine1'] = $addrLine1;

        return $this;
    }

    /**
     * Gets addrLine2
     *
     * @return string|null
     */
    public function getAddrLine2()
    {
        return $this->container['addrLine2'];
    }

    /**
     * Sets addrLine2
     *
     * @param string|null $addrLine2 addrLine2
     *
     * @return self
     */
    public function setAddrLine2($addrLine2)
    {
        $this->container['addrLine2'] = $addrLine2;

        return $this;
    }

    /**
     * Gets zipCode
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zipCode'];
    }

    /**
     * Sets zipCode
     *
     * @param string|null $zipCode zipCode
     *
     * @return self
     */
    public function setZipCode($zipCode)
    {
        $this->container['zipCode'] = $zipCode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets tel
     *
     * @return string|null
     */
    public function getTel()
    {
        return $this->container['tel'];
    }

    /**
     * Sets tel
     *
     * @param string|null $tel tel
     *
     * @return self
     */
    public function setTel($tel)
    {
        $this->container['tel'] = $tel;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile mobile
     *
     * @return self
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets emailValid
     *
     * @return bool|null
     */
    public function getEmailValid()
    {
        return $this->container['emailValid'];
    }

    /**
     * Sets emailValid
     *
     * @param bool|null $emailValid emailValid
     *
     * @return self
     */
    public function setEmailValid($emailValid)
    {
        $this->container['emailValid'] = $emailValid;

        return $this;
    }

    /**
     * Gets chatbotEnabled
     *
     * @return bool|null
     */
    public function getChatbotEnabled()
    {
        return $this->container['chatbotEnabled'];
    }

    /**
     * Sets chatbotEnabled
     *
     * @param bool|null $chatbotEnabled chatbotEnabled
     *
     * @return self
     */
    public function setChatbotEnabled($chatbotEnabled)
    {
        $this->container['chatbotEnabled'] = $chatbotEnabled;

        return $this;
    }

    /**
     * Gets avatarUrl
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatarUrl'];
    }

    /**
     * Sets avatarUrl
     *
     * @param string|null $avatarUrl avatarUrl
     *
     * @return self
     */
    public function setAvatarUrl($avatarUrl)
    {
        $this->container['avatarUrl'] = $avatarUrl;

        return $this;
    }

    /**
     * Gets siteUsers
     *
     * @return mixed|null
     */
    public function getSiteUsers()
    {
        return $this->container['siteUsers'];
    }

    /**
     * Sets siteUsers
     *
     * @param mixed|null $siteUsers siteUsers
     *
     * @return self
     */
    public function setSiteUsers($siteUsers)
    {
        $this->container['siteUsers'] = $siteUsers;

        return $this;
    }

    /**
     * Gets fcmToken
     *
     * @return string|null
     */
    public function getFcmToken()
    {
        return $this->container['fcmToken'];
    }

    /**
     * Sets fcmToken
     *
     * @param string|null $fcmToken fcmToken
     *
     * @return self
     */
    public function setFcmToken($fcmToken)
    {
        $this->container['fcmToken'] = $fcmToken;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return mixed|null
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param mixed|null $sessions sessions
     *
     * @return self
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


