<?php
/**
 * CommandEe5f35022d477654f1cddfdb02f77421
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * CommandEe5f35022d477654f1cddfdb02f77421 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CommandEe5f35022d477654f1cddfdb02f77421 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Command:ee5f35022d477654f1cddfdb02f77421';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'createdAt' => '\DateTime',
        'user' => 'mixed',
        'paymentDt' => 'int',
        'brand' => 'mixed',
        'reference' => 'string',
        'legalform' => 'string',
        'total' => 'float',
        'paymean' => 'string',
        'invoiceUrl' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'organisation' => 'string',
        'addr1' => 'string',
        'addr2' => 'string',
        'zipcode' => 'string',
        'city' => 'string',
        'country' => 'string',
        'email' => 'string',
        'tvaIntra' => 'string',
        'status' => 'string',
        'statusDetail' => 'string',
        'promo' => 'int',
        'currency' => 'string',
        'currencyTotal' => 'float',
        'priceWithoutPromos' => 'float',
        'currencyPriceWithoutPromos' => 'float',
        'currencyMonthlyTotal' => 'float',
        'monthlyActive' => 'bool',
        'products' => 'mixed',
        'invoices' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'createdAt' => 'date-time',
        'user' => null,
        'paymentDt' => null,
        'brand' => null,
        'reference' => null,
        'legalform' => null,
        'total' => null,
        'paymean' => null,
        'invoiceUrl' => null,
        'firstname' => null,
        'lastname' => null,
        'organisation' => null,
        'addr1' => null,
        'addr2' => null,
        'zipcode' => null,
        'city' => null,
        'country' => null,
        'email' => null,
        'tvaIntra' => null,
        'status' => null,
        'statusDetail' => null,
        'promo' => null,
        'currency' => null,
        'currencyTotal' => null,
        'priceWithoutPromos' => null,
        'currencyPriceWithoutPromos' => null,
        'currencyMonthlyTotal' => null,
        'monthlyActive' => null,
        'products' => null,
        'invoices' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'createdAt' => 'createdAt',
        'user' => 'user',
        'paymentDt' => 'paymentDt',
        'brand' => 'brand',
        'reference' => 'reference',
        'legalform' => 'legalform',
        'total' => 'total',
        'paymean' => 'paymean',
        'invoiceUrl' => 'invoiceUrl',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'organisation' => 'organisation',
        'addr1' => 'addr1',
        'addr2' => 'addr2',
        'zipcode' => 'zipcode',
        'city' => 'city',
        'country' => 'country',
        'email' => 'email',
        'tvaIntra' => 'tvaIntra',
        'status' => 'status',
        'statusDetail' => 'statusDetail',
        'promo' => 'promo',
        'currency' => 'currency',
        'currencyTotal' => 'currencyTotal',
        'priceWithoutPromos' => 'priceWithoutPromos',
        'currencyPriceWithoutPromos' => 'currencyPriceWithoutPromos',
        'currencyMonthlyTotal' => 'currencyMonthlyTotal',
        'monthlyActive' => 'monthlyActive',
        'products' => 'products',
        'invoices' => 'invoices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'createdAt' => 'setCreatedAt',
        'user' => 'setUser',
        'paymentDt' => 'setPaymentDt',
        'brand' => 'setBrand',
        'reference' => 'setReference',
        'legalform' => 'setLegalform',
        'total' => 'setTotal',
        'paymean' => 'setPaymean',
        'invoiceUrl' => 'setInvoiceUrl',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'organisation' => 'setOrganisation',
        'addr1' => 'setAddr1',
        'addr2' => 'setAddr2',
        'zipcode' => 'setZipcode',
        'city' => 'setCity',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'tvaIntra' => 'setTvaIntra',
        'status' => 'setStatus',
        'statusDetail' => 'setStatusDetail',
        'promo' => 'setPromo',
        'currency' => 'setCurrency',
        'currencyTotal' => 'setCurrencyTotal',
        'priceWithoutPromos' => 'setPriceWithoutPromos',
        'currencyPriceWithoutPromos' => 'setCurrencyPriceWithoutPromos',
        'currencyMonthlyTotal' => 'setCurrencyMonthlyTotal',
        'monthlyActive' => 'setMonthlyActive',
        'products' => 'setProducts',
        'invoices' => 'setInvoices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'createdAt' => 'getCreatedAt',
        'user' => 'getUser',
        'paymentDt' => 'getPaymentDt',
        'brand' => 'getBrand',
        'reference' => 'getReference',
        'legalform' => 'getLegalform',
        'total' => 'getTotal',
        'paymean' => 'getPaymean',
        'invoiceUrl' => 'getInvoiceUrl',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'organisation' => 'getOrganisation',
        'addr1' => 'getAddr1',
        'addr2' => 'getAddr2',
        'zipcode' => 'getZipcode',
        'city' => 'getCity',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'tvaIntra' => 'getTvaIntra',
        'status' => 'getStatus',
        'statusDetail' => 'getStatusDetail',
        'promo' => 'getPromo',
        'currency' => 'getCurrency',
        'currencyTotal' => 'getCurrencyTotal',
        'priceWithoutPromos' => 'getPriceWithoutPromos',
        'currencyPriceWithoutPromos' => 'getCurrencyPriceWithoutPromos',
        'currencyMonthlyTotal' => 'getCurrencyMonthlyTotal',
        'monthlyActive' => 'getMonthlyActive',
        'products' => 'getProducts',
        'invoices' => 'getInvoices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['paymentDt'] = $data['paymentDt'] ?? null;
        $this->container['brand'] = $data['brand'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['legalform'] = $data['legalform'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['paymean'] = $data['paymean'] ?? null;
        $this->container['invoiceUrl'] = $data['invoiceUrl'] ?? null;
        $this->container['firstname'] = $data['firstname'] ?? null;
        $this->container['lastname'] = $data['lastname'] ?? null;
        $this->container['organisation'] = $data['organisation'] ?? null;
        $this->container['addr1'] = $data['addr1'] ?? null;
        $this->container['addr2'] = $data['addr2'] ?? null;
        $this->container['zipcode'] = $data['zipcode'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['tvaIntra'] = $data['tvaIntra'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['statusDetail'] = $data['statusDetail'] ?? null;
        $this->container['promo'] = $data['promo'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['currencyTotal'] = $data['currencyTotal'] ?? null;
        $this->container['priceWithoutPromos'] = $data['priceWithoutPromos'] ?? null;
        $this->container['currencyPriceWithoutPromos'] = $data['currencyPriceWithoutPromos'] ?? null;
        $this->container['currencyMonthlyTotal'] = $data['currencyMonthlyTotal'] ?? null;
        $this->container['monthlyActive'] = $data['monthlyActive'] ?? null;
        $this->container['products'] = $data['products'] ?? null;
        $this->container['invoices'] = $data['invoices'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets user
     *
     * @return mixed|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param mixed|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets paymentDt
     *
     * @return int|null
     */
    public function getPaymentDt()
    {
        return $this->container['paymentDt'];
    }

    /**
     * Sets paymentDt
     *
     * @param int|null $paymentDt paymentDt
     *
     * @return self
     */
    public function setPaymentDt($paymentDt)
    {
        $this->container['paymentDt'] = $paymentDt;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return mixed|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param mixed|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets legalform
     *
     * @return string|null
     */
    public function getLegalform()
    {
        return $this->container['legalform'];
    }

    /**
     * Sets legalform
     *
     * @param string|null $legalform legalform
     *
     * @return self
     */
    public function setLegalform($legalform)
    {
        $this->container['legalform'] = $legalform;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets paymean
     *
     * @return string|null
     */
    public function getPaymean()
    {
        return $this->container['paymean'];
    }

    /**
     * Sets paymean
     *
     * @param string|null $paymean cb : CB, check : Chèque, transfer : Virement, paypal : Paypal, credits : Crédits, stripe : Stripe, case : Espèce
     *
     * @return self
     */
    public function setPaymean($paymean)
    {
        $this->container['paymean'] = $paymean;

        return $this;
    }

    /**
     * Gets invoiceUrl
     *
     * @return string|null
     */
    public function getInvoiceUrl()
    {
        return $this->container['invoiceUrl'];
    }

    /**
     * Sets invoiceUrl
     *
     * @param string|null $invoiceUrl invoiceUrl
     *
     * @return self
     */
    public function setInvoiceUrl($invoiceUrl)
    {
        $this->container['invoiceUrl'] = $invoiceUrl;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname lastname
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return string|null
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param string|null $organisation organisation
     *
     * @return self
     */
    public function setOrganisation($organisation)
    {
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets addr1
     *
     * @return string|null
     */
    public function getAddr1()
    {
        return $this->container['addr1'];
    }

    /**
     * Sets addr1
     *
     * @param string|null $addr1 addr1
     *
     * @return self
     */
    public function setAddr1($addr1)
    {
        $this->container['addr1'] = $addr1;

        return $this;
    }

    /**
     * Gets addr2
     *
     * @return string|null
     */
    public function getAddr2()
    {
        return $this->container['addr2'];
    }

    /**
     * Sets addr2
     *
     * @param string|null $addr2 addr2
     *
     * @return self
     */
    public function setAddr2($addr2)
    {
        $this->container['addr2'] = $addr2;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string|null
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string|null $zipcode zipcode
     *
     * @return self
     */
    public function setZipcode($zipcode)
    {
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets tvaIntra
     *
     * @return string|null
     */
    public function getTvaIntra()
    {
        return $this->container['tvaIntra'];
    }

    /**
     * Sets tvaIntra
     *
     * @param string|null $tvaIntra tvaIntra
     *
     * @return self
     */
    public function setTvaIntra($tvaIntra)
    {
        $this->container['tvaIntra'] = $tvaIntra;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status cart : Panier, locked : En attente de paiement, paid : Payée, canceled : annulée
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusDetail
     *
     * @return string|null
     */
    public function getStatusDetail()
    {
        return $this->container['statusDetail'];
    }

    /**
     * Sets statusDetail
     *
     * @param string|null $statusDetail statusDetail
     *
     * @return self
     */
    public function setStatusDetail($statusDetail)
    {
        $this->container['statusDetail'] = $statusDetail;

        return $this;
    }

    /**
     * Gets promo
     *
     * @return int|null
     */
    public function getPromo()
    {
        return $this->container['promo'];
    }

    /**
     * Sets promo
     *
     * @param int|null $promo promo
     *
     * @return self
     */
    public function setPromo($promo)
    {
        $this->container['promo'] = $promo;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currencyTotal
     *
     * @return float|null
     */
    public function getCurrencyTotal()
    {
        return $this->container['currencyTotal'];
    }

    /**
     * Sets currencyTotal
     *
     * @param float|null $currencyTotal currencyTotal
     *
     * @return self
     */
    public function setCurrencyTotal($currencyTotal)
    {
        $this->container['currencyTotal'] = $currencyTotal;

        return $this;
    }

    /**
     * Gets priceWithoutPromos
     *
     * @return float|null
     */
    public function getPriceWithoutPromos()
    {
        return $this->container['priceWithoutPromos'];
    }

    /**
     * Sets priceWithoutPromos
     *
     * @param float|null $priceWithoutPromos priceWithoutPromos
     *
     * @return self
     */
    public function setPriceWithoutPromos($priceWithoutPromos)
    {
        $this->container['priceWithoutPromos'] = $priceWithoutPromos;

        return $this;
    }

    /**
     * Gets currencyPriceWithoutPromos
     *
     * @return float|null
     */
    public function getCurrencyPriceWithoutPromos()
    {
        return $this->container['currencyPriceWithoutPromos'];
    }

    /**
     * Sets currencyPriceWithoutPromos
     *
     * @param float|null $currencyPriceWithoutPromos currencyPriceWithoutPromos
     *
     * @return self
     */
    public function setCurrencyPriceWithoutPromos($currencyPriceWithoutPromos)
    {
        $this->container['currencyPriceWithoutPromos'] = $currencyPriceWithoutPromos;

        return $this;
    }

    /**
     * Gets currencyMonthlyTotal
     *
     * @return float|null
     */
    public function getCurrencyMonthlyTotal()
    {
        return $this->container['currencyMonthlyTotal'];
    }

    /**
     * Sets currencyMonthlyTotal
     *
     * @param float|null $currencyMonthlyTotal currencyMonthlyTotal
     *
     * @return self
     */
    public function setCurrencyMonthlyTotal($currencyMonthlyTotal)
    {
        $this->container['currencyMonthlyTotal'] = $currencyMonthlyTotal;

        return $this;
    }

    /**
     * Gets monthlyActive
     *
     * @return bool|null
     */
    public function getMonthlyActive()
    {
        return $this->container['monthlyActive'];
    }

    /**
     * Sets monthlyActive
     *
     * @param bool|null $monthlyActive monthlyActive
     *
     * @return self
     */
    public function setMonthlyActive($monthlyActive)
    {
        $this->container['monthlyActive'] = $monthlyActive;

        return $this;
    }

    /**
     * Gets products
     *
     * @return mixed|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param mixed|null $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets invoices
     *
     * @return mixed|null
     */
    public function getInvoices()
    {
        return $this->container['invoices'];
    }

    /**
     * Sets invoices
     *
     * @param mixed|null $invoices invoices
     *
     * @return self
     */
    public function setInvoices($invoices)
    {
        $this->container['invoices'] = $invoices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


