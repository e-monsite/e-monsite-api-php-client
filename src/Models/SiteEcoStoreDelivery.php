<?php
/**
 * SiteEcoStoreDelivery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * SiteEcoStoreDelivery Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SiteEcoStoreDelivery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Site_ecoStoreDelivery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\EmonsiteApi\Models\Site',
        'site' => '\EmonsiteApi\Models\Site',
        'activeInStorePickup' => 'bool',
        'inStoreUserCreditSms' => 'string',
        'inStoreSmsAlert' => 'bool',
        'inStoreActivePayment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'site' => null,
        'activeInStorePickup' => null,
        'inStoreUserCreditSms' => null,
        'inStoreSmsAlert' => null,
        'inStoreActivePayment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'site' => 'site',
        'activeInStorePickup' => 'activeInStorePickup',
        'inStoreUserCreditSms' => 'inStoreUserCreditSms',
        'inStoreSmsAlert' => 'inStoreSmsAlert',
        'inStoreActivePayment' => 'inStoreActivePayment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'site' => 'setSite',
        'activeInStorePickup' => 'setActiveInStorePickup',
        'inStoreUserCreditSms' => 'setInStoreUserCreditSms',
        'inStoreSmsAlert' => 'setInStoreSmsAlert',
        'inStoreActivePayment' => 'setInStoreActivePayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'site' => 'getSite',
        'activeInStorePickup' => 'getActiveInStorePickup',
        'inStoreUserCreditSms' => 'getInStoreUserCreditSms',
        'inStoreSmsAlert' => 'getInStoreSmsAlert',
        'inStoreActivePayment' => 'getInStoreActivePayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['site'] = $data['site'] ?? null;
        $this->container['activeInStorePickup'] = $data['activeInStorePickup'] ?? null;
        $this->container['inStoreUserCreditSms'] = $data['inStoreUserCreditSms'] ?? null;
        $this->container['inStoreSmsAlert'] = $data['inStoreSmsAlert'] ?? null;
        $this->container['inStoreActivePayment'] = $data['inStoreActivePayment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \EmonsiteApi\Models\Site|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \EmonsiteApi\Models\Site|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \EmonsiteApi\Models\Site|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \EmonsiteApi\Models\Site|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets activeInStorePickup
     *
     * @return bool|null
     */
    public function getActiveInStorePickup()
    {
        return $this->container['activeInStorePickup'];
    }

    /**
     * Sets activeInStorePickup
     *
     * @param bool|null $activeInStorePickup activeInStorePickup
     *
     * @return self
     */
    public function setActiveInStorePickup($activeInStorePickup)
    {
        $this->container['activeInStorePickup'] = $activeInStorePickup;

        return $this;
    }

    /**
     * Gets inStoreUserCreditSms
     *
     * @return string|null
     */
    public function getInStoreUserCreditSms()
    {
        return $this->container['inStoreUserCreditSms'];
    }

    /**
     * Sets inStoreUserCreditSms
     *
     * @param string|null $inStoreUserCreditSms inStoreUserCreditSms
     *
     * @return self
     */
    public function setInStoreUserCreditSms($inStoreUserCreditSms)
    {
        $this->container['inStoreUserCreditSms'] = $inStoreUserCreditSms;

        return $this;
    }

    /**
     * Gets inStoreSmsAlert
     *
     * @return bool|null
     */
    public function getInStoreSmsAlert()
    {
        return $this->container['inStoreSmsAlert'];
    }

    /**
     * Sets inStoreSmsAlert
     *
     * @param bool|null $inStoreSmsAlert inStoreSmsAlert
     *
     * @return self
     */
    public function setInStoreSmsAlert($inStoreSmsAlert)
    {
        $this->container['inStoreSmsAlert'] = $inStoreSmsAlert;

        return $this;
    }

    /**
     * Gets inStoreActivePayment
     *
     * @return bool|null
     */
    public function getInStoreActivePayment()
    {
        return $this->container['inStoreActivePayment'];
    }

    /**
     * Sets inStoreActivePayment
     *
     * @param bool|null $inStoreActivePayment inStoreActivePayment
     *
     * @return self
     */
    public function setInStoreActivePayment($inStoreActivePayment)
    {
        $this->container['inStoreActivePayment'] = $inStoreActivePayment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


