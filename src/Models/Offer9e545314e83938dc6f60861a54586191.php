<?php
/**
 * Offer9e545314e83938dc6f60861a54586191
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * Offer9e545314e83938dc6f60861a54586191 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Offer9e545314e83938dc6f60861a54586191 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Offer:9e545314e83938dc6f60861a54586191';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'basePurchasingPrice' => 'float',
        'baseRenewalPrice' => 'float',
        'eURPurchasingPrice' => 'float',
        'eURRenewalPrice' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'basePurchasingPrice' => null,
        'baseRenewalPrice' => null,
        'eURPurchasingPrice' => null,
        'eURRenewalPrice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'basePurchasingPrice' => 'basePurchasingPrice',
        'baseRenewalPrice' => 'baseRenewalPrice',
        'eURPurchasingPrice' => 'EURPurchasingPrice',
        'eURRenewalPrice' => 'EURRenewalPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'basePurchasingPrice' => 'setBasePurchasingPrice',
        'baseRenewalPrice' => 'setBaseRenewalPrice',
        'eURPurchasingPrice' => 'setEURPurchasingPrice',
        'eURRenewalPrice' => 'setEURRenewalPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'basePurchasingPrice' => 'getBasePurchasingPrice',
        'baseRenewalPrice' => 'getBaseRenewalPrice',
        'eURPurchasingPrice' => 'getEURPurchasingPrice',
        'eURRenewalPrice' => 'getEURRenewalPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['basePurchasingPrice'] = $data['basePurchasingPrice'] ?? null;
        $this->container['baseRenewalPrice'] = $data['baseRenewalPrice'] ?? null;
        $this->container['eURPurchasingPrice'] = $data['eURPurchasingPrice'] ?? null;
        $this->container['eURRenewalPrice'] = $data['eURRenewalPrice'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets basePurchasingPrice
     *
     * @return float|null
     */
    public function getBasePurchasingPrice()
    {
        return $this->container['basePurchasingPrice'];
    }

    /**
     * Sets basePurchasingPrice
     *
     * @param float|null $basePurchasingPrice basePurchasingPrice
     *
     * @return self
     */
    public function setBasePurchasingPrice($basePurchasingPrice)
    {
        $this->container['basePurchasingPrice'] = $basePurchasingPrice;

        return $this;
    }

    /**
     * Gets baseRenewalPrice
     *
     * @return float|null
     */
    public function getBaseRenewalPrice()
    {
        return $this->container['baseRenewalPrice'];
    }

    /**
     * Sets baseRenewalPrice
     *
     * @param float|null $baseRenewalPrice baseRenewalPrice
     *
     * @return self
     */
    public function setBaseRenewalPrice($baseRenewalPrice)
    {
        $this->container['baseRenewalPrice'] = $baseRenewalPrice;

        return $this;
    }

    /**
     * Gets eURPurchasingPrice
     *
     * @return float|null
     */
    public function getEURPurchasingPrice()
    {
        return $this->container['eURPurchasingPrice'];
    }

    /**
     * Sets eURPurchasingPrice
     *
     * @param float|null $eURPurchasingPrice eURPurchasingPrice
     *
     * @return self
     */
    public function setEURPurchasingPrice($eURPurchasingPrice)
    {
        $this->container['eURPurchasingPrice'] = $eURPurchasingPrice;

        return $this;
    }

    /**
     * Gets eURRenewalPrice
     *
     * @return float|null
     */
    public function getEURRenewalPrice()
    {
        return $this->container['eURRenewalPrice'];
    }

    /**
     * Sets eURRenewalPrice
     *
     * @param float|null $eURRenewalPrice eURRenewalPrice
     *
     * @return self
     */
    public function setEURRenewalPrice($eURRenewalPrice)
    {
        $this->container['eURRenewalPrice'] = $eURRenewalPrice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


