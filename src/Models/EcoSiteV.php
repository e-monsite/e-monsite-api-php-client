<?php
/**
 * EcoSiteV
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * EcoSiteV Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EcoSiteV implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EcoSiteV';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shopName' => 'string',
        'statusTextStock' => 'string',
        'statusTextReplenishment' => 'string',
        'statusTextBreak' => 'string',
        'statusTextBreakingSoon' => 'string',
        'breadcrumb' => 'string',
        'textDiscounts' => 'string',
        'specialAnnotations' => 'string',
        'lang' => 'string',
        'item' => '\EmonsiteApi\Models\EcoSite',
        'active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shopName' => null,
        'statusTextStock' => null,
        'statusTextReplenishment' => null,
        'statusTextBreak' => null,
        'statusTextBreakingSoon' => null,
        'breadcrumb' => null,
        'textDiscounts' => null,
        'specialAnnotations' => null,
        'lang' => null,
        'item' => null,
        'active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shopName' => 'shopName',
        'statusTextStock' => 'statusTextStock',
        'statusTextReplenishment' => 'statusTextReplenishment',
        'statusTextBreak' => 'statusTextBreak',
        'statusTextBreakingSoon' => 'statusTextBreakingSoon',
        'breadcrumb' => 'breadcrumb',
        'textDiscounts' => 'textDiscounts',
        'specialAnnotations' => 'specialAnnotations',
        'lang' => 'lang',
        'item' => 'item',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shopName' => 'setShopName',
        'statusTextStock' => 'setStatusTextStock',
        'statusTextReplenishment' => 'setStatusTextReplenishment',
        'statusTextBreak' => 'setStatusTextBreak',
        'statusTextBreakingSoon' => 'setStatusTextBreakingSoon',
        'breadcrumb' => 'setBreadcrumb',
        'textDiscounts' => 'setTextDiscounts',
        'specialAnnotations' => 'setSpecialAnnotations',
        'lang' => 'setLang',
        'item' => 'setItem',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shopName' => 'getShopName',
        'statusTextStock' => 'getStatusTextStock',
        'statusTextReplenishment' => 'getStatusTextReplenishment',
        'statusTextBreak' => 'getStatusTextBreak',
        'statusTextBreakingSoon' => 'getStatusTextBreakingSoon',
        'breadcrumb' => 'getBreadcrumb',
        'textDiscounts' => 'getTextDiscounts',
        'specialAnnotations' => 'getSpecialAnnotations',
        'lang' => 'getLang',
        'item' => 'getItem',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shopName'] = $data['shopName'] ?? null;
        $this->container['statusTextStock'] = $data['statusTextStock'] ?? null;
        $this->container['statusTextReplenishment'] = $data['statusTextReplenishment'] ?? null;
        $this->container['statusTextBreak'] = $data['statusTextBreak'] ?? null;
        $this->container['statusTextBreakingSoon'] = $data['statusTextBreakingSoon'] ?? null;
        $this->container['breadcrumb'] = $data['breadcrumb'] ?? null;
        $this->container['textDiscounts'] = $data['textDiscounts'] ?? null;
        $this->container['specialAnnotations'] = $data['specialAnnotations'] ?? null;
        $this->container['lang'] = $data['lang'] ?? null;
        $this->container['item'] = $data['item'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shopName
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName
     *
     * @param string|null $shopName shopName
     *
     * @return self
     */
    public function setShopName($shopName)
    {
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets statusTextStock
     *
     * @return string|null
     */
    public function getStatusTextStock()
    {
        return $this->container['statusTextStock'];
    }

    /**
     * Sets statusTextStock
     *
     * @param string|null $statusTextStock statusTextStock
     *
     * @return self
     */
    public function setStatusTextStock($statusTextStock)
    {
        $this->container['statusTextStock'] = $statusTextStock;

        return $this;
    }

    /**
     * Gets statusTextReplenishment
     *
     * @return string|null
     */
    public function getStatusTextReplenishment()
    {
        return $this->container['statusTextReplenishment'];
    }

    /**
     * Sets statusTextReplenishment
     *
     * @param string|null $statusTextReplenishment statusTextReplenishment
     *
     * @return self
     */
    public function setStatusTextReplenishment($statusTextReplenishment)
    {
        $this->container['statusTextReplenishment'] = $statusTextReplenishment;

        return $this;
    }

    /**
     * Gets statusTextBreak
     *
     * @return string|null
     */
    public function getStatusTextBreak()
    {
        return $this->container['statusTextBreak'];
    }

    /**
     * Sets statusTextBreak
     *
     * @param string|null $statusTextBreak statusTextBreak
     *
     * @return self
     */
    public function setStatusTextBreak($statusTextBreak)
    {
        $this->container['statusTextBreak'] = $statusTextBreak;

        return $this;
    }

    /**
     * Gets statusTextBreakingSoon
     *
     * @return string|null
     */
    public function getStatusTextBreakingSoon()
    {
        return $this->container['statusTextBreakingSoon'];
    }

    /**
     * Sets statusTextBreakingSoon
     *
     * @param string|null $statusTextBreakingSoon statusTextBreakingSoon
     *
     * @return self
     */
    public function setStatusTextBreakingSoon($statusTextBreakingSoon)
    {
        $this->container['statusTextBreakingSoon'] = $statusTextBreakingSoon;

        return $this;
    }

    /**
     * Gets breadcrumb
     *
     * @return string|null
     */
    public function getBreadcrumb()
    {
        return $this->container['breadcrumb'];
    }

    /**
     * Sets breadcrumb
     *
     * @param string|null $breadcrumb pas utilisé apparemment TODO remove
     *
     * @return self
     */
    public function setBreadcrumb($breadcrumb)
    {
        $this->container['breadcrumb'] = $breadcrumb;

        return $this;
    }

    /**
     * Gets textDiscounts
     *
     * @return string|null
     */
    public function getTextDiscounts()
    {
        return $this->container['textDiscounts'];
    }

    /**
     * Sets textDiscounts
     *
     * @param string|null $textDiscounts textDiscounts
     *
     * @return self
     */
    public function setTextDiscounts($textDiscounts)
    {
        $this->container['textDiscounts'] = $textDiscounts;

        return $this;
    }

    /**
     * Gets specialAnnotations
     *
     * @return string|null
     */
    public function getSpecialAnnotations()
    {
        return $this->container['specialAnnotations'];
    }

    /**
     * Sets specialAnnotations
     *
     * @param string|null $specialAnnotations specialAnnotations
     *
     * @return self
     */
    public function setSpecialAnnotations($specialAnnotations)
    {
        $this->container['specialAnnotations'] = $specialAnnotations;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang lang
     *
     * @return self
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \EmonsiteApi\Models\EcoSite|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \EmonsiteApi\Models\EcoSite|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


