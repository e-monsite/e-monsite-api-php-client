<?php
/**
 * CommandProductE6648ceda3fb8628d90f7e34797db5f5
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * CommandProductE6648ceda3fb8628d90f7e34797db5f5 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CommandProductE6648ceda3fb8628d90f7e34797db5f5 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CommandProduct:e6648ceda3fb8628d90f7e34797db5f5';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'command' => 'string',
        'offer' => 'string',
        'site' => 'string',
        'quantity' => 'int',
        'price' => 'float',
        'renew' => 'bool',
        'active' => 'bool',
        'domain' => 'string',
        'domainInfos' => 'string',
        'sslInfos' => 'string',
        'currency' => 'string',
        'currencyPrice' => 'float',
        'coupon' => 'string',
        'optionId' => 'string',
        'optionQty' => 'int',
        'information' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'command' => 'iri-reference',
        'offer' => 'iri-reference',
        'site' => 'iri-reference',
        'quantity' => null,
        'price' => null,
        'renew' => null,
        'active' => null,
        'domain' => null,
        'domainInfos' => null,
        'sslInfos' => null,
        'currency' => null,
        'currencyPrice' => null,
        'coupon' => null,
        'optionId' => null,
        'optionQty' => null,
        'information' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'command' => 'command',
        'offer' => 'offer',
        'site' => 'site',
        'quantity' => 'quantity',
        'price' => 'price',
        'renew' => 'renew',
        'active' => 'active',
        'domain' => 'domain',
        'domainInfos' => 'domainInfos',
        'sslInfos' => 'sslInfos',
        'currency' => 'currency',
        'currencyPrice' => 'currencyPrice',
        'coupon' => 'coupon',
        'optionId' => 'optionId',
        'optionQty' => 'optionQty',
        'information' => 'information'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'command' => 'setCommand',
        'offer' => 'setOffer',
        'site' => 'setSite',
        'quantity' => 'setQuantity',
        'price' => 'setPrice',
        'renew' => 'setRenew',
        'active' => 'setActive',
        'domain' => 'setDomain',
        'domainInfos' => 'setDomainInfos',
        'sslInfos' => 'setSslInfos',
        'currency' => 'setCurrency',
        'currencyPrice' => 'setCurrencyPrice',
        'coupon' => 'setCoupon',
        'optionId' => 'setOptionId',
        'optionQty' => 'setOptionQty',
        'information' => 'setInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'command' => 'getCommand',
        'offer' => 'getOffer',
        'site' => 'getSite',
        'quantity' => 'getQuantity',
        'price' => 'getPrice',
        'renew' => 'getRenew',
        'active' => 'getActive',
        'domain' => 'getDomain',
        'domainInfos' => 'getDomainInfos',
        'sslInfos' => 'getSslInfos',
        'currency' => 'getCurrency',
        'currencyPrice' => 'getCurrencyPrice',
        'coupon' => 'getCoupon',
        'optionId' => 'getOptionId',
        'optionQty' => 'getOptionQty',
        'information' => 'getInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['command'] = $data['command'] ?? null;
        $this->container['offer'] = $data['offer'] ?? null;
        $this->container['site'] = $data['site'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['renew'] = $data['renew'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['domainInfos'] = $data['domainInfos'] ?? null;
        $this->container['sslInfos'] = $data['sslInfos'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['currencyPrice'] = $data['currencyPrice'] ?? null;
        $this->container['coupon'] = $data['coupon'] ?? null;
        $this->container['optionId'] = $data['optionId'] ?? null;
        $this->container['optionQty'] = $data['optionQty'] ?? null;
        $this->container['information'] = $data['information'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets command
     *
     * @return string|null
     */
    public function getCommand()
    {
        return $this->container['command'];
    }

    /**
     * Sets command
     *
     * @param string|null $command command
     *
     * @return self
     */
    public function setCommand($command)
    {
        $this->container['command'] = $command;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return string|null
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param string|null $offer offer
     *
     * @return self
     */
    public function setOffer($offer)
    {
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets site
     *
     * @return string|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets renew
     *
     * @return bool|null
     */
    public function getRenew()
    {
        return $this->container['renew'];
    }

    /**
     * Sets renew
     *
     * @param bool|null $renew renew
     *
     * @return self
     */
    public function setRenew($renew)
    {
        $this->container['renew'] = $renew;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets domainInfos
     *
     * @return string|null
     */
    public function getDomainInfos()
    {
        return $this->container['domainInfos'];
    }

    /**
     * Sets domainInfos
     *
     * @param string|null $domainInfos domainInfos
     *
     * @return self
     */
    public function setDomainInfos($domainInfos)
    {
        $this->container['domainInfos'] = $domainInfos;

        return $this;
    }

    /**
     * Gets sslInfos
     *
     * @return string|null
     */
    public function getSslInfos()
    {
        return $this->container['sslInfos'];
    }

    /**
     * Sets sslInfos
     *
     * @param string|null $sslInfos sslInfos
     *
     * @return self
     */
    public function setSslInfos($sslInfos)
    {
        $this->container['sslInfos'] = $sslInfos;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currencyPrice
     *
     * @return float|null
     */
    public function getCurrencyPrice()
    {
        return $this->container['currencyPrice'];
    }

    /**
     * Sets currencyPrice
     *
     * @param float|null $currencyPrice currencyPrice
     *
     * @return self
     */
    public function setCurrencyPrice($currencyPrice)
    {
        $this->container['currencyPrice'] = $currencyPrice;

        return $this;
    }

    /**
     * Gets coupon
     *
     * @return string|null
     */
    public function getCoupon()
    {
        return $this->container['coupon'];
    }

    /**
     * Sets coupon
     *
     * @param string|null $coupon coupon
     *
     * @return self
     */
    public function setCoupon($coupon)
    {
        $this->container['coupon'] = $coupon;

        return $this;
    }

    /**
     * Gets optionId
     *
     * @return string|null
     */
    public function getOptionId()
    {
        return $this->container['optionId'];
    }

    /**
     * Sets optionId
     *
     * @param string|null $optionId optionId
     *
     * @return self
     */
    public function setOptionId($optionId)
    {
        $this->container['optionId'] = $optionId;

        return $this;
    }

    /**
     * Gets optionQty
     *
     * @return int|null
     */
    public function getOptionQty()
    {
        return $this->container['optionQty'];
    }

    /**
     * Sets optionQty
     *
     * @param int|null $optionQty optionQty
     *
     * @return self
     */
    public function setOptionQty($optionQty)
    {
        $this->container['optionQty'] = $optionQty;

        return $this;
    }

    /**
     * Gets information
     *
     * @return string|null
     */
    public function getInformation()
    {
        return $this->container['information'];
    }

    /**
     * Sets information
     *
     * @param string|null $information information
     *
     * @return self
     */
    public function setInformation($information)
    {
        $this->container['information'] = $information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


