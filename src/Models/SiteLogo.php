<?php
/**
 * SiteLogo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * SiteLogo Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SiteLogo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Site_logo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'addDt' => 'int',
        'addUserId' => 'string',
        'filesize' => 'int',
        'filemime' => 'string',
        'trash' => 'bool',
        'storageName' => 'string',
        'storagePath' => 'string',
        'publicPath' => 'string',
        'privatefilepath' => 'string',
        'privateFilename' => 'string',
        'publicFilename' => 'string',
        'publicFilePath' => 'string',
        'site' => '\EmonsiteApi\Models\Site'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'addDt' => null,
        'addUserId' => null,
        'filesize' => null,
        'filemime' => null,
        'trash' => null,
        'storageName' => null,
        'storagePath' => null,
        'publicPath' => null,
        'privatefilepath' => null,
        'privateFilename' => null,
        'publicFilename' => null,
        'publicFilePath' => null,
        'site' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'addDt' => 'addDt',
        'addUserId' => 'addUserId',
        'filesize' => 'filesize',
        'filemime' => 'filemime',
        'trash' => 'trash',
        'storageName' => 'storageName',
        'storagePath' => 'storagePath',
        'publicPath' => 'publicPath',
        'privatefilepath' => 'privatefilepath',
        'privateFilename' => 'privateFilename',
        'publicFilename' => 'publicFilename',
        'publicFilePath' => 'publicFilePath',
        'site' => 'site'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'addDt' => 'setAddDt',
        'addUserId' => 'setAddUserId',
        'filesize' => 'setFilesize',
        'filemime' => 'setFilemime',
        'trash' => 'setTrash',
        'storageName' => 'setStorageName',
        'storagePath' => 'setStoragePath',
        'publicPath' => 'setPublicPath',
        'privatefilepath' => 'setPrivatefilepath',
        'privateFilename' => 'setPrivateFilename',
        'publicFilename' => 'setPublicFilename',
        'publicFilePath' => 'setPublicFilePath',
        'site' => 'setSite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'addDt' => 'getAddDt',
        'addUserId' => 'getAddUserId',
        'filesize' => 'getFilesize',
        'filemime' => 'getFilemime',
        'trash' => 'getTrash',
        'storageName' => 'getStorageName',
        'storagePath' => 'getStoragePath',
        'publicPath' => 'getPublicPath',
        'privatefilepath' => 'getPrivatefilepath',
        'privateFilename' => 'getPrivateFilename',
        'publicFilename' => 'getPublicFilename',
        'publicFilePath' => 'getPublicFilePath',
        'site' => 'getSite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['addDt'] = $data['addDt'] ?? null;
        $this->container['addUserId'] = $data['addUserId'] ?? null;
        $this->container['filesize'] = $data['filesize'] ?? null;
        $this->container['filemime'] = $data['filemime'] ?? null;
        $this->container['trash'] = $data['trash'] ?? null;
        $this->container['storageName'] = $data['storageName'] ?? null;
        $this->container['storagePath'] = $data['storagePath'] ?? null;
        $this->container['publicPath'] = $data['publicPath'] ?? null;
        $this->container['privatefilepath'] = $data['privatefilepath'] ?? null;
        $this->container['privateFilename'] = $data['privateFilename'] ?? null;
        $this->container['publicFilename'] = $data['publicFilename'] ?? null;
        $this->container['publicFilePath'] = $data['publicFilePath'] ?? null;
        $this->container['site'] = $data['site'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets addDt
     *
     * @return int|null
     */
    public function getAddDt()
    {
        return $this->container['addDt'];
    }

    /**
     * Sets addDt
     *
     * @param int|null $addDt addDt
     *
     * @return self
     */
    public function setAddDt($addDt)
    {
        $this->container['addDt'] = $addDt;

        return $this;
    }

    /**
     * Gets addUserId
     *
     * @return string|null
     */
    public function getAddUserId()
    {
        return $this->container['addUserId'];
    }

    /**
     * Sets addUserId
     *
     * @param string|null $addUserId addUserId
     *
     * @return self
     */
    public function setAddUserId($addUserId)
    {
        $this->container['addUserId'] = $addUserId;

        return $this;
    }

    /**
     * Gets filesize
     *
     * @return int|null
     */
    public function getFilesize()
    {
        return $this->container['filesize'];
    }

    /**
     * Sets filesize
     *
     * @param int|null $filesize filesize
     *
     * @return self
     */
    public function setFilesize($filesize)
    {
        $this->container['filesize'] = $filesize;

        return $this;
    }

    /**
     * Gets filemime
     *
     * @return string|null
     */
    public function getFilemime()
    {
        return $this->container['filemime'];
    }

    /**
     * Sets filemime
     *
     * @param string|null $filemime filemime
     *
     * @return self
     */
    public function setFilemime($filemime)
    {
        $this->container['filemime'] = $filemime;

        return $this;
    }

    /**
     * Gets trash
     *
     * @return bool|null
     */
    public function getTrash()
    {
        return $this->container['trash'];
    }

    /**
     * Sets trash
     *
     * @param bool|null $trash trash
     *
     * @return self
     */
    public function setTrash($trash)
    {
        $this->container['trash'] = $trash;

        return $this;
    }

    /**
     * Gets storageName
     *
     * @return string|null
     */
    public function getStorageName()
    {
        return $this->container['storageName'];
    }

    /**
     * Sets storageName
     *
     * @param string|null $storageName storageName
     *
     * @return self
     */
    public function setStorageName($storageName)
    {
        $this->container['storageName'] = $storageName;

        return $this;
    }

    /**
     * Gets storagePath
     *
     * @return string|null
     */
    public function getStoragePath()
    {
        return $this->container['storagePath'];
    }

    /**
     * Sets storagePath
     *
     * @param string|null $storagePath TODO juste setter un champ.
     *
     * @return self
     */
    public function setStoragePath($storagePath)
    {
        $this->container['storagePath'] = $storagePath;

        return $this;
    }

    /**
     * Gets publicPath
     *
     * @return string|null
     */
    public function getPublicPath()
    {
        return $this->container['publicPath'];
    }

    /**
     * Sets publicPath
     *
     * @param string|null $publicPath publicPath
     *
     * @return self
     */
    public function setPublicPath($publicPath)
    {
        $this->container['publicPath'] = $publicPath;

        return $this;
    }

    /**
     * Gets privatefilepath
     *
     * @return string|null
     */
    public function getPrivatefilepath()
    {
        return $this->container['privatefilepath'];
    }

    /**
     * Sets privatefilepath
     *
     * @param string|null $privatefilepath privatefilepath
     *
     * @return self
     */
    public function setPrivatefilepath($privatefilepath)
    {
        $this->container['privatefilepath'] = $privatefilepath;

        return $this;
    }

    /**
     * Gets privateFilename
     *
     * @return string|null
     */
    public function getPrivateFilename()
    {
        return $this->container['privateFilename'];
    }

    /**
     * Sets privateFilename
     *
     * @param string|null $privateFilename privateFilename
     *
     * @return self
     */
    public function setPrivateFilename($privateFilename)
    {
        $this->container['privateFilename'] = $privateFilename;

        return $this;
    }

    /**
     * Gets publicFilename
     *
     * @return string|null
     */
    public function getPublicFilename()
    {
        return $this->container['publicFilename'];
    }

    /**
     * Sets publicFilename
     *
     * @param string|null $publicFilename publicFilename
     *
     * @return self
     */
    public function setPublicFilename($publicFilename)
    {
        $this->container['publicFilename'] = $publicFilename;

        return $this;
    }

    /**
     * Gets publicFilePath
     *
     * @return string|null
     */
    public function getPublicFilePath()
    {
        return $this->container['publicFilePath'];
    }

    /**
     * Sets publicFilePath
     *
     * @param string|null $publicFilePath publicFilePath
     *
     * @return self
     */
    public function setPublicFilePath($publicFilePath)
    {
        $this->container['publicFilePath'] = $publicFilePath;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \EmonsiteApi\Models\Site|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \EmonsiteApi\Models\Site|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


