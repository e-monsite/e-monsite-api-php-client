<?php
/**
 * DirectoryCategory31fbbfdd88806b77396d71a17314e994
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * DirectoryCategory31fbbfdd88806b77396d71a17314e994 Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DirectoryCategory31fbbfdd88806b77396d71a17314e994 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectoryCategory:31fbbfdd88806b77396d71a17314e994';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'parent' => 'string',
        'children' => 'string[]',
        'tradName' => 'string',
        'name' => 'string',
        'uri' => 'string',
        'ordering' => 'int',
        'edito' => 'string',
        'h1' => 'string',
        'metaDescription' => 'string',
        'howToMakeH2' => 'string',
        'howToMake' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'parent' => 'iri-reference',
        'children' => null,
        'tradName' => null,
        'name' => null,
        'uri' => null,
        'ordering' => null,
        'edito' => null,
        'h1' => null,
        'metaDescription' => null,
        'howToMakeH2' => null,
        'howToMake' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent' => 'parent',
        'children' => 'children',
        'tradName' => 'tradName',
        'name' => 'name',
        'uri' => 'uri',
        'ordering' => 'ordering',
        'edito' => 'edito',
        'h1' => 'h1',
        'metaDescription' => 'metaDescription',
        'howToMakeH2' => 'howToMakeH2',
        'howToMake' => 'howToMake'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent' => 'setParent',
        'children' => 'setChildren',
        'tradName' => 'setTradName',
        'name' => 'setName',
        'uri' => 'setUri',
        'ordering' => 'setOrdering',
        'edito' => 'setEdito',
        'h1' => 'setH1',
        'metaDescription' => 'setMetaDescription',
        'howToMakeH2' => 'setHowToMakeH2',
        'howToMake' => 'setHowToMake'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent' => 'getParent',
        'children' => 'getChildren',
        'tradName' => 'getTradName',
        'name' => 'getName',
        'uri' => 'getUri',
        'ordering' => 'getOrdering',
        'edito' => 'getEdito',
        'h1' => 'getH1',
        'metaDescription' => 'getMetaDescription',
        'howToMakeH2' => 'getHowToMakeH2',
        'howToMake' => 'getHowToMake'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['parent'] = $data['parent'] ?? null;
        $this->container['children'] = $data['children'] ?? null;
        $this->container['tradName'] = $data['tradName'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['uri'] = $data['uri'] ?? null;
        $this->container['ordering'] = $data['ordering'] ?? null;
        $this->container['edito'] = $data['edito'] ?? null;
        $this->container['h1'] = $data['h1'] ?? null;
        $this->container['metaDescription'] = $data['metaDescription'] ?? null;
        $this->container['howToMakeH2'] = $data['howToMakeH2'] ?? null;
        $this->container['howToMake'] = $data['howToMake'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return string|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param string|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets children
     *
     * @return string[]|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param string[]|null $children children
     *
     * @return self
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets tradName
     *
     * @return string|null
     */
    public function getTradName()
    {
        return $this->container['tradName'];
    }

    /**
     * Sets tradName
     *
     * @param string|null $tradName tradName
     *
     * @return self
     */
    public function setTradName($tradName)
    {
        $this->container['tradName'] = $tradName;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri uri
     *
     * @return self
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets ordering
     *
     * @return int|null
     */
    public function getOrdering()
    {
        return $this->container['ordering'];
    }

    /**
     * Sets ordering
     *
     * @param int|null $ordering ordering
     *
     * @return self
     */
    public function setOrdering($ordering)
    {
        $this->container['ordering'] = $ordering;

        return $this;
    }

    /**
     * Gets edito
     *
     * @return string|null
     */
    public function getEdito()
    {
        return $this->container['edito'];
    }

    /**
     * Sets edito
     *
     * @param string|null $edito edito
     *
     * @return self
     */
    public function setEdito($edito)
    {
        $this->container['edito'] = $edito;

        return $this;
    }

    /**
     * Gets h1
     *
     * @return string|null
     */
    public function getH1()
    {
        return $this->container['h1'];
    }

    /**
     * Sets h1
     *
     * @param string|null $h1 h1
     *
     * @return self
     */
    public function setH1($h1)
    {
        $this->container['h1'] = $h1;

        return $this;
    }

    /**
     * Gets metaDescription
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['metaDescription'];
    }

    /**
     * Sets metaDescription
     *
     * @param string|null $metaDescription metaDescription
     *
     * @return self
     */
    public function setMetaDescription($metaDescription)
    {
        $this->container['metaDescription'] = $metaDescription;

        return $this;
    }

    /**
     * Gets howToMakeH2
     *
     * @return string|null
     */
    public function getHowToMakeH2()
    {
        return $this->container['howToMakeH2'];
    }

    /**
     * Sets howToMakeH2
     *
     * @param string|null $howToMakeH2 howToMakeH2
     *
     * @return self
     */
    public function setHowToMakeH2($howToMakeH2)
    {
        $this->container['howToMakeH2'] = $howToMakeH2;

        return $this;
    }

    /**
     * Gets howToMake
     *
     * @return string|null
     */
    public function getHowToMake()
    {
        return $this->container['howToMake'];
    }

    /**
     * Sets howToMake
     *
     * @param string|null $howToMake howToMake
     *
     * @return self
     */
    public function setHowToMake($howToMake)
    {
        $this->container['howToMake'] = $howToMake;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


