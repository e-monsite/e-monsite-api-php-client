<?php
/**
 * PageV
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * PageV Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PageV implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PageV';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'titleInBlocks' => 'bool',
        'titlemenu' => 'string',
        'lang' => 'string',
        'item' => '\EmonsiteApi\Models\Page',
        'active' => 'bool',
        'seoUri' => 'string',
        'seoTitle' => 'string',
        'seoH1' => 'string',
        'seoKeywords' => 'string',
        'seoDescription' => 'string',
        'seoImage' => 'string',
        'seoAdditionalMeta' => 'string',
        'seoNoIndex' => 'bool',
        'title' => 'string',
        'content' => 'string',
        'previewableContent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'titleInBlocks' => null,
        'titlemenu' => null,
        'lang' => null,
        'item' => null,
        'active' => null,
        'seoUri' => null,
        'seoTitle' => null,
        'seoH1' => null,
        'seoKeywords' => null,
        'seoDescription' => null,
        'seoImage' => 'iri-reference',
        'seoAdditionalMeta' => null,
        'seoNoIndex' => null,
        'title' => null,
        'content' => null,
        'previewableContent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'titleInBlocks' => 'titleInBlocks',
        'titlemenu' => 'titlemenu',
        'lang' => 'lang',
        'item' => 'item',
        'active' => 'active',
        'seoUri' => 'seoUri',
        'seoTitle' => 'seoTitle',
        'seoH1' => 'seoH1',
        'seoKeywords' => 'seoKeywords',
        'seoDescription' => 'seoDescription',
        'seoImage' => 'seoImage',
        'seoAdditionalMeta' => 'seoAdditionalMeta',
        'seoNoIndex' => 'seoNoIndex',
        'title' => 'title',
        'content' => 'content',
        'previewableContent' => 'previewableContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'titleInBlocks' => 'setTitleInBlocks',
        'titlemenu' => 'setTitlemenu',
        'lang' => 'setLang',
        'item' => 'setItem',
        'active' => 'setActive',
        'seoUri' => 'setSeoUri',
        'seoTitle' => 'setSeoTitle',
        'seoH1' => 'setSeoH1',
        'seoKeywords' => 'setSeoKeywords',
        'seoDescription' => 'setSeoDescription',
        'seoImage' => 'setSeoImage',
        'seoAdditionalMeta' => 'setSeoAdditionalMeta',
        'seoNoIndex' => 'setSeoNoIndex',
        'title' => 'setTitle',
        'content' => 'setContent',
        'previewableContent' => 'setPreviewableContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'titleInBlocks' => 'getTitleInBlocks',
        'titlemenu' => 'getTitlemenu',
        'lang' => 'getLang',
        'item' => 'getItem',
        'active' => 'getActive',
        'seoUri' => 'getSeoUri',
        'seoTitle' => 'getSeoTitle',
        'seoH1' => 'getSeoH1',
        'seoKeywords' => 'getSeoKeywords',
        'seoDescription' => 'getSeoDescription',
        'seoImage' => 'getSeoImage',
        'seoAdditionalMeta' => 'getSeoAdditionalMeta',
        'seoNoIndex' => 'getSeoNoIndex',
        'title' => 'getTitle',
        'content' => 'getContent',
        'previewableContent' => 'getPreviewableContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['titleInBlocks'] = $data['titleInBlocks'] ?? null;
        $this->container['titlemenu'] = $data['titlemenu'] ?? null;
        $this->container['lang'] = $data['lang'] ?? null;
        $this->container['item'] = $data['item'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['seoUri'] = $data['seoUri'] ?? null;
        $this->container['seoTitle'] = $data['seoTitle'] ?? null;
        $this->container['seoH1'] = $data['seoH1'] ?? null;
        $this->container['seoKeywords'] = $data['seoKeywords'] ?? null;
        $this->container['seoDescription'] = $data['seoDescription'] ?? null;
        $this->container['seoImage'] = $data['seoImage'] ?? null;
        $this->container['seoAdditionalMeta'] = $data['seoAdditionalMeta'] ?? null;
        $this->container['seoNoIndex'] = $data['seoNoIndex'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['content'] = $data['content'] ?? null;
        $this->container['previewableContent'] = $data['previewableContent'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets titleInBlocks
     *
     * @return bool|null
     */
    public function getTitleInBlocks()
    {
        return $this->container['titleInBlocks'];
    }

    /**
     * Sets titleInBlocks
     *
     * @param bool|null $titleInBlocks titleInBlocks
     *
     * @return self
     */
    public function setTitleInBlocks($titleInBlocks)
    {
        $this->container['titleInBlocks'] = $titleInBlocks;

        return $this;
    }

    /**
     * Gets titlemenu
     *
     * @return string|null
     */
    public function getTitlemenu()
    {
        return $this->container['titlemenu'];
    }

    /**
     * Sets titlemenu
     *
     * @param string|null $titlemenu titlemenu
     *
     * @return self
     */
    public function setTitlemenu($titlemenu)
    {
        $this->container['titlemenu'] = $titlemenu;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang lang
     *
     * @return self
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \EmonsiteApi\Models\Page|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \EmonsiteApi\Models\Page|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets seoUri
     *
     * @return string|null
     */
    public function getSeoUri()
    {
        return $this->container['seoUri'];
    }

    /**
     * Sets seoUri
     *
     * @param string|null $seoUri seoUri
     *
     * @return self
     */
    public function setSeoUri($seoUri)
    {
        $this->container['seoUri'] = $seoUri;

        return $this;
    }

    /**
     * Gets seoTitle
     *
     * @return string|null
     */
    public function getSeoTitle()
    {
        return $this->container['seoTitle'];
    }

    /**
     * Sets seoTitle
     *
     * @param string|null $seoTitle seoTitle
     *
     * @return self
     */
    public function setSeoTitle($seoTitle)
    {
        $this->container['seoTitle'] = $seoTitle;

        return $this;
    }

    /**
     * Gets seoH1
     *
     * @return string|null
     */
    public function getSeoH1()
    {
        return $this->container['seoH1'];
    }

    /**
     * Sets seoH1
     *
     * @param string|null $seoH1 seoH1
     *
     * @return self
     */
    public function setSeoH1($seoH1)
    {
        $this->container['seoH1'] = $seoH1;

        return $this;
    }

    /**
     * Gets seoKeywords
     *
     * @return string|null
     */
    public function getSeoKeywords()
    {
        return $this->container['seoKeywords'];
    }

    /**
     * Sets seoKeywords
     *
     * @param string|null $seoKeywords seoKeywords
     *
     * @return self
     */
    public function setSeoKeywords($seoKeywords)
    {
        $this->container['seoKeywords'] = $seoKeywords;

        return $this;
    }

    /**
     * Gets seoDescription
     *
     * @return string|null
     */
    public function getSeoDescription()
    {
        return $this->container['seoDescription'];
    }

    /**
     * Sets seoDescription
     *
     * @param string|null $seoDescription seoDescription
     *
     * @return self
     */
    public function setSeoDescription($seoDescription)
    {
        $this->container['seoDescription'] = $seoDescription;

        return $this;
    }

    /**
     * Gets seoImage
     *
     * @return string|null
     */
    public function getSeoImage()
    {
        return $this->container['seoImage'];
    }

    /**
     * Sets seoImage
     *
     * @param string|null $seoImage seoImage
     *
     * @return self
     */
    public function setSeoImage($seoImage)
    {
        $this->container['seoImage'] = $seoImage;

        return $this;
    }

    /**
     * Gets seoAdditionalMeta
     *
     * @return string|null
     */
    public function getSeoAdditionalMeta()
    {
        return $this->container['seoAdditionalMeta'];
    }

    /**
     * Sets seoAdditionalMeta
     *
     * @param string|null $seoAdditionalMeta seoAdditionalMeta
     *
     * @return self
     */
    public function setSeoAdditionalMeta($seoAdditionalMeta)
    {
        $this->container['seoAdditionalMeta'] = $seoAdditionalMeta;

        return $this;
    }

    /**
     * Gets seoNoIndex
     *
     * @return bool|null
     */
    public function getSeoNoIndex()
    {
        return $this->container['seoNoIndex'];
    }

    /**
     * Sets seoNoIndex
     *
     * @param bool|null $seoNoIndex seoNoIndex
     *
     * @return self
     */
    public function setSeoNoIndex($seoNoIndex)
    {
        $this->container['seoNoIndex'] = $seoNoIndex;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets previewableContent
     *
     * @return string|null
     */
    public function getPreviewableContent()
    {
        return $this->container['previewableContent'];
    }

    /**
     * Sets previewableContent
     *
     * @param string|null $previewableContent previewableContent
     *
     * @return self
     */
    public function setPreviewableContent($previewableContent)
    {
        $this->container['previewableContent'] = $previewableContent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


