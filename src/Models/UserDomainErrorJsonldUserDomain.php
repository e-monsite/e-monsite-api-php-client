<?php
/**
 * UserDomainErrorJsonldUserDomain
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * UserDomainErrorJsonldUserDomain Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UserDomainErrorJsonldUserDomain implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDomainError_jsonld_userDomain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'context' => 'string',
        'id' => 'string',
        'type' => 'string',
        'mailServerId' => 'string',
        'domain' => 'string',
        'authCode' => 'string',
        'registrar' => 'string',
        'registrationDate' => '\DateTime',
        'expirationDate' => '\DateTime',
        'serviceSubscriptionDate' => '\DateTime',
        'serviceRenewalDate' => '\DateTime',
        'serviceExpirationDate' => '\DateTime',
        'registrationDtB' => '\DateTime',
        'expirationDtB' => '\DateTime',
        'user' => 'string',
        'brand' => 'string',
        'active' => 'bool',
        'status' => 'string',
        'nichandle' => 'string',
        'name' => 'string',
        'firstname' => 'string',
        'address' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'email' => 'string',
        'lang' => 'string',
        'organisation' => 'string',
        'legalname' => 'string',
        'legalnumber' => 'string',
        'birthdate' => '\DateTime',
        'birthcountry' => 'string',
        'birthcity' => 'string',
        'legalform' => 'string',
        'birthdepartement' => 'string',
        'afnicident' => 'string',
        'method' => 'string',
        'onerror' => 'bool',
        'supportComment' => 'string',
        'aweltyAdmin' => 'bool',
        'pingDt' => 'int',
        'business' => 'bool',
        'autorenew' => 'bool',
        'commandId' => 'string',
        'zimbraServer' => 'string',
        'companynationalidentificationnumber' => 'string',
        'nationalidentificationnumber' => 'string',
        'vat' => 'string',
        'checkAutoRenewAfter' => '\DateTime',
        'domainErrors' => '\EmonsiteApi\Models\UserDomainErrorJsonld[]',
        'mailAliases' => '\EmonsiteApi\Models\UserDomainMailAliasJsonld[]',
        'mailboxes' => '\EmonsiteApi\Models\UserDomainMailboxJsonld[]',
        'id' => 'string',
        'addDt' => 'int',
        'updDt' => 'int',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'creator' => 'string',
        'updator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'context' => null,
        'id' => null,
        'type' => null,
        'mailServerId' => null,
        'domain' => null,
        'authCode' => null,
        'registrar' => null,
        'registrationDate' => 'date-time',
        'expirationDate' => 'date-time',
        'serviceSubscriptionDate' => 'date-time',
        'serviceRenewalDate' => 'date-time',
        'serviceExpirationDate' => 'date-time',
        'registrationDtB' => 'date-time',
        'expirationDtB' => 'date-time',
        'user' => 'iri-reference',
        'brand' => 'iri-reference',
        'active' => null,
        'status' => null,
        'nichandle' => null,
        'name' => null,
        'firstname' => null,
        'address' => null,
        'zip' => null,
        'city' => null,
        'country' => null,
        'phone' => null,
        'fax' => null,
        'email' => null,
        'lang' => null,
        'organisation' => null,
        'legalname' => null,
        'legalnumber' => null,
        'birthdate' => 'date-time',
        'birthcountry' => null,
        'birthcity' => null,
        'legalform' => null,
        'birthdepartement' => null,
        'afnicident' => null,
        'method' => null,
        'onerror' => null,
        'supportComment' => null,
        'aweltyAdmin' => null,
        'pingDt' => null,
        'business' => null,
        'autorenew' => null,
        'commandId' => null,
        'zimbraServer' => null,
        'companynationalidentificationnumber' => null,
        'nationalidentificationnumber' => null,
        'vat' => null,
        'checkAutoRenewAfter' => 'date-time',
        'domainErrors' => null,
        'mailAliases' => null,
        'mailboxes' => null,
        'id' => null,
        'addDt' => null,
        'updDt' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'creator' => 'iri-reference',
        'updator' => 'iri-reference'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
        'id' => '@id',
        'type' => '@type',
        'mailServerId' => 'mailServerId',
        'domain' => 'domain',
        'authCode' => 'authCode',
        'registrar' => 'registrar',
        'registrationDate' => 'registrationDate',
        'expirationDate' => 'expirationDate',
        'serviceSubscriptionDate' => 'serviceSubscriptionDate',
        'serviceRenewalDate' => 'serviceRenewalDate',
        'serviceExpirationDate' => 'serviceExpirationDate',
        'registrationDtB' => 'registrationDtB',
        'expirationDtB' => 'expirationDtB',
        'user' => 'user',
        'brand' => 'brand',
        'active' => 'active',
        'status' => 'status',
        'nichandle' => 'nichandle',
        'name' => 'name',
        'firstname' => 'firstname',
        'address' => 'address',
        'zip' => 'zip',
        'city' => 'city',
        'country' => 'country',
        'phone' => 'phone',
        'fax' => 'fax',
        'email' => 'email',
        'lang' => 'lang',
        'organisation' => 'organisation',
        'legalname' => 'legalname',
        'legalnumber' => 'legalnumber',
        'birthdate' => 'birthdate',
        'birthcountry' => 'birthcountry',
        'birthcity' => 'birthcity',
        'legalform' => 'legalform',
        'birthdepartement' => 'birthdepartement',
        'afnicident' => 'afnicident',
        'method' => 'method',
        'onerror' => 'onerror',
        'supportComment' => 'supportComment',
        'aweltyAdmin' => 'aweltyAdmin',
        'pingDt' => 'pingDt',
        'business' => 'business',
        'autorenew' => 'autorenew',
        'commandId' => 'commandId',
        'zimbraServer' => 'zimbraServer',
        'companynationalidentificationnumber' => 'companynationalidentificationnumber',
        'nationalidentificationnumber' => 'nationalidentificationnumber',
        'vat' => 'vat',
        'checkAutoRenewAfter' => 'checkAutoRenewAfter',
        'domainErrors' => 'domainErrors',
        'mailAliases' => 'mailAliases',
        'mailboxes' => 'mailboxes',
        'id' => 'id',
        'addDt' => 'addDt',
        'updDt' => 'updDt',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'creator' => 'creator',
        'updator' => 'updator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
        'id' => 'setId',
        'type' => 'setType',
        'mailServerId' => 'setMailServerId',
        'domain' => 'setDomain',
        'authCode' => 'setAuthCode',
        'registrar' => 'setRegistrar',
        'registrationDate' => 'setRegistrationDate',
        'expirationDate' => 'setExpirationDate',
        'serviceSubscriptionDate' => 'setServiceSubscriptionDate',
        'serviceRenewalDate' => 'setServiceRenewalDate',
        'serviceExpirationDate' => 'setServiceExpirationDate',
        'registrationDtB' => 'setRegistrationDtB',
        'expirationDtB' => 'setExpirationDtB',
        'user' => 'setUser',
        'brand' => 'setBrand',
        'active' => 'setActive',
        'status' => 'setStatus',
        'nichandle' => 'setNichandle',
        'name' => 'setName',
        'firstname' => 'setFirstname',
        'address' => 'setAddress',
        'zip' => 'setZip',
        'city' => 'setCity',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'email' => 'setEmail',
        'lang' => 'setLang',
        'organisation' => 'setOrganisation',
        'legalname' => 'setLegalname',
        'legalnumber' => 'setLegalnumber',
        'birthdate' => 'setBirthdate',
        'birthcountry' => 'setBirthcountry',
        'birthcity' => 'setBirthcity',
        'legalform' => 'setLegalform',
        'birthdepartement' => 'setBirthdepartement',
        'afnicident' => 'setAfnicident',
        'method' => 'setMethod',
        'onerror' => 'setOnerror',
        'supportComment' => 'setSupportComment',
        'aweltyAdmin' => 'setAweltyAdmin',
        'pingDt' => 'setPingDt',
        'business' => 'setBusiness',
        'autorenew' => 'setAutorenew',
        'commandId' => 'setCommandId',
        'zimbraServer' => 'setZimbraServer',
        'companynationalidentificationnumber' => 'setCompanynationalidentificationnumber',
        'nationalidentificationnumber' => 'setNationalidentificationnumber',
        'vat' => 'setVat',
        'checkAutoRenewAfter' => 'setCheckAutoRenewAfter',
        'domainErrors' => 'setDomainErrors',
        'mailAliases' => 'setMailAliases',
        'mailboxes' => 'setMailboxes',
        'id' => 'setId',
        'addDt' => 'setAddDt',
        'updDt' => 'setUpdDt',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'creator' => 'setCreator',
        'updator' => 'setUpdator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
        'id' => 'getId',
        'type' => 'getType',
        'mailServerId' => 'getMailServerId',
        'domain' => 'getDomain',
        'authCode' => 'getAuthCode',
        'registrar' => 'getRegistrar',
        'registrationDate' => 'getRegistrationDate',
        'expirationDate' => 'getExpirationDate',
        'serviceSubscriptionDate' => 'getServiceSubscriptionDate',
        'serviceRenewalDate' => 'getServiceRenewalDate',
        'serviceExpirationDate' => 'getServiceExpirationDate',
        'registrationDtB' => 'getRegistrationDtB',
        'expirationDtB' => 'getExpirationDtB',
        'user' => 'getUser',
        'brand' => 'getBrand',
        'active' => 'getActive',
        'status' => 'getStatus',
        'nichandle' => 'getNichandle',
        'name' => 'getName',
        'firstname' => 'getFirstname',
        'address' => 'getAddress',
        'zip' => 'getZip',
        'city' => 'getCity',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'email' => 'getEmail',
        'lang' => 'getLang',
        'organisation' => 'getOrganisation',
        'legalname' => 'getLegalname',
        'legalnumber' => 'getLegalnumber',
        'birthdate' => 'getBirthdate',
        'birthcountry' => 'getBirthcountry',
        'birthcity' => 'getBirthcity',
        'legalform' => 'getLegalform',
        'birthdepartement' => 'getBirthdepartement',
        'afnicident' => 'getAfnicident',
        'method' => 'getMethod',
        'onerror' => 'getOnerror',
        'supportComment' => 'getSupportComment',
        'aweltyAdmin' => 'getAweltyAdmin',
        'pingDt' => 'getPingDt',
        'business' => 'getBusiness',
        'autorenew' => 'getAutorenew',
        'commandId' => 'getCommandId',
        'zimbraServer' => 'getZimbraServer',
        'companynationalidentificationnumber' => 'getCompanynationalidentificationnumber',
        'nationalidentificationnumber' => 'getNationalidentificationnumber',
        'vat' => 'getVat',
        'checkAutoRenewAfter' => 'getCheckAutoRenewAfter',
        'domainErrors' => 'getDomainErrors',
        'mailAliases' => 'getMailAliases',
        'mailboxes' => 'getMailboxes',
        'id' => 'getId',
        'addDt' => 'getAddDt',
        'updDt' => 'getUpdDt',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'creator' => 'getCreator',
        'updator' => 'getUpdator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = $data['context'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['mailServerId'] = $data['mailServerId'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['authCode'] = $data['authCode'] ?? null;
        $this->container['registrar'] = $data['registrar'] ?? null;
        $this->container['registrationDate'] = $data['registrationDate'] ?? null;
        $this->container['expirationDate'] = $data['expirationDate'] ?? null;
        $this->container['serviceSubscriptionDate'] = $data['serviceSubscriptionDate'] ?? null;
        $this->container['serviceRenewalDate'] = $data['serviceRenewalDate'] ?? null;
        $this->container['serviceExpirationDate'] = $data['serviceExpirationDate'] ?? null;
        $this->container['registrationDtB'] = $data['registrationDtB'] ?? null;
        $this->container['expirationDtB'] = $data['expirationDtB'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['brand'] = $data['brand'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['nichandle'] = $data['nichandle'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['firstname'] = $data['firstname'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['fax'] = $data['fax'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['lang'] = $data['lang'] ?? null;
        $this->container['organisation'] = $data['organisation'] ?? null;
        $this->container['legalname'] = $data['legalname'] ?? null;
        $this->container['legalnumber'] = $data['legalnumber'] ?? null;
        $this->container['birthdate'] = $data['birthdate'] ?? null;
        $this->container['birthcountry'] = $data['birthcountry'] ?? null;
        $this->container['birthcity'] = $data['birthcity'] ?? null;
        $this->container['legalform'] = $data['legalform'] ?? null;
        $this->container['birthdepartement'] = $data['birthdepartement'] ?? null;
        $this->container['afnicident'] = $data['afnicident'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['onerror'] = $data['onerror'] ?? null;
        $this->container['supportComment'] = $data['supportComment'] ?? null;
        $this->container['aweltyAdmin'] = $data['aweltyAdmin'] ?? null;
        $this->container['pingDt'] = $data['pingDt'] ?? null;
        $this->container['business'] = $data['business'] ?? null;
        $this->container['autorenew'] = $data['autorenew'] ?? null;
        $this->container['commandId'] = $data['commandId'] ?? null;
        $this->container['zimbraServer'] = $data['zimbraServer'] ?? null;
        $this->container['companynationalidentificationnumber'] = $data['companynationalidentificationnumber'] ?? null;
        $this->container['nationalidentificationnumber'] = $data['nationalidentificationnumber'] ?? null;
        $this->container['vat'] = $data['vat'] ?? null;
        $this->container['checkAutoRenewAfter'] = $data['checkAutoRenewAfter'] ?? null;
        $this->container['domainErrors'] = $data['domainErrors'] ?? null;
        $this->container['mailAliases'] = $data['mailAliases'] ?? null;
        $this->container['mailboxes'] = $data['mailboxes'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['addDt'] = $data['addDt'] ?? null;
        $this->container['updDt'] = $data['updDt'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['updator'] = $data['updator'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string|null $context context
     *
     * @return self
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets mailServerId
     *
     * @return string|null
     */
    public function getMailServerId()
    {
        return $this->container['mailServerId'];
    }

    /**
     * Sets mailServerId
     *
     * @param string|null $mailServerId Can be NULL, \"mailcow_0\" (NULL mean default Zimbra server)
     *
     * @return self
     */
    public function setMailServerId($mailServerId)
    {
        $this->container['mailServerId'] = $mailServerId;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets authCode
     *
     * @return string|null
     */
    public function getAuthCode()
    {
        return $this->container['authCode'];
    }

    /**
     * Sets authCode
     *
     * @param string|null $authCode authCode
     *
     * @return self
     */
    public function setAuthCode($authCode)
    {
        $this->container['authCode'] = $authCode;

        return $this;
    }

    /**
     * Gets registrar
     *
     * @return string|null
     */
    public function getRegistrar()
    {
        return $this->container['registrar'];
    }

    /**
     * Sets registrar
     *
     * @param string|null $registrar registrar
     *
     * @return self
     */
    public function setRegistrar($registrar)
    {
        $this->container['registrar'] = $registrar;

        return $this;
    }

    /**
     * Gets registrationDate
     *
     * @return \DateTime|null
     */
    public function getRegistrationDate()
    {
        return $this->container['registrationDate'];
    }

    /**
     * Sets registrationDate
     *
     * @param \DateTime|null $registrationDate registrationDate
     *
     * @return self
     */
    public function setRegistrationDate($registrationDate)
    {
        $this->container['registrationDate'] = $registrationDate;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \DateTime|null $expirationDate expirationDate
     *
     * @return self
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets serviceSubscriptionDate
     *
     * @return \DateTime|null
     */
    public function getServiceSubscriptionDate()
    {
        return $this->container['serviceSubscriptionDate'];
    }

    /**
     * Sets serviceSubscriptionDate
     *
     * @param \DateTime|null $serviceSubscriptionDate serviceSubscriptionDate
     *
     * @return self
     */
    public function setServiceSubscriptionDate($serviceSubscriptionDate)
    {
        $this->container['serviceSubscriptionDate'] = $serviceSubscriptionDate;

        return $this;
    }

    /**
     * Gets serviceRenewalDate
     *
     * @return \DateTime|null
     */
    public function getServiceRenewalDate()
    {
        return $this->container['serviceRenewalDate'];
    }

    /**
     * Sets serviceRenewalDate
     *
     * @param \DateTime|null $serviceRenewalDate serviceRenewalDate
     *
     * @return self
     */
    public function setServiceRenewalDate($serviceRenewalDate)
    {
        $this->container['serviceRenewalDate'] = $serviceRenewalDate;

        return $this;
    }

    /**
     * Gets serviceExpirationDate
     *
     * @return \DateTime|null
     */
    public function getServiceExpirationDate()
    {
        return $this->container['serviceExpirationDate'];
    }

    /**
     * Sets serviceExpirationDate
     *
     * @param \DateTime|null $serviceExpirationDate serviceExpirationDate
     *
     * @return self
     */
    public function setServiceExpirationDate($serviceExpirationDate)
    {
        $this->container['serviceExpirationDate'] = $serviceExpirationDate;

        return $this;
    }

    /**
     * Gets registrationDtB
     *
     * @return \DateTime|null
     */
    public function getRegistrationDtB()
    {
        return $this->container['registrationDtB'];
    }

    /**
     * Sets registrationDtB
     *
     * @param \DateTime|null $registrationDtB registrationDtB
     *
     * @return self
     */
    public function setRegistrationDtB($registrationDtB)
    {
        $this->container['registrationDtB'] = $registrationDtB;

        return $this;
    }

    /**
     * Gets expirationDtB
     *
     * @return \DateTime|null
     */
    public function getExpirationDtB()
    {
        return $this->container['expirationDtB'];
    }

    /**
     * Sets expirationDtB
     *
     * @param \DateTime|null $expirationDtB expirationDtB
     *
     * @return self
     */
    public function setExpirationDtB($expirationDtB)
    {
        $this->container['expirationDtB'] = $expirationDtB;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets nichandle
     *
     * @return string|null
     */
    public function getNichandle()
    {
        return $this->container['nichandle'];
    }

    /**
     * Sets nichandle
     *
     * @param string|null $nichandle nichandle
     *
     * @return self
     */
    public function setNichandle($nichandle)
    {
        $this->container['nichandle'] = $nichandle;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang lang
     *
     * @return self
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return string|null
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param string|null $organisation organisation
     *
     * @return self
     */
    public function setOrganisation($organisation)
    {
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets legalname
     *
     * @return string|null
     */
    public function getLegalname()
    {
        return $this->container['legalname'];
    }

    /**
     * Sets legalname
     *
     * @param string|null $legalname legalname
     *
     * @return self
     */
    public function setLegalname($legalname)
    {
        $this->container['legalname'] = $legalname;

        return $this;
    }

    /**
     * Gets legalnumber
     *
     * @return string|null
     */
    public function getLegalnumber()
    {
        return $this->container['legalnumber'];
    }

    /**
     * Sets legalnumber
     *
     * @param string|null $legalnumber legalnumber
     *
     * @return self
     */
    public function setLegalnumber($legalnumber)
    {
        $this->container['legalnumber'] = $legalnumber;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \DateTime|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \DateTime|null $birthdate birthdate
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets birthcountry
     *
     * @return string|null
     */
    public function getBirthcountry()
    {
        return $this->container['birthcountry'];
    }

    /**
     * Sets birthcountry
     *
     * @param string|null $birthcountry birthcountry
     *
     * @return self
     */
    public function setBirthcountry($birthcountry)
    {
        $this->container['birthcountry'] = $birthcountry;

        return $this;
    }

    /**
     * Gets birthcity
     *
     * @return string|null
     */
    public function getBirthcity()
    {
        return $this->container['birthcity'];
    }

    /**
     * Sets birthcity
     *
     * @param string|null $birthcity birthcity
     *
     * @return self
     */
    public function setBirthcity($birthcity)
    {
        $this->container['birthcity'] = $birthcity;

        return $this;
    }

    /**
     * Gets legalform
     *
     * @return string|null
     */
    public function getLegalform()
    {
        return $this->container['legalform'];
    }

    /**
     * Sets legalform
     *
     * @param string|null $legalform legalform
     *
     * @return self
     */
    public function setLegalform($legalform)
    {
        $this->container['legalform'] = $legalform;

        return $this;
    }

    /**
     * Gets birthdepartement
     *
     * @return string|null
     */
    public function getBirthdepartement()
    {
        return $this->container['birthdepartement'];
    }

    /**
     * Sets birthdepartement
     *
     * @param string|null $birthdepartement birthdepartement
     *
     * @return self
     */
    public function setBirthdepartement($birthdepartement)
    {
        $this->container['birthdepartement'] = $birthdepartement;

        return $this;
    }

    /**
     * Gets afnicident
     *
     * @return string|null
     */
    public function getAfnicident()
    {
        return $this->container['afnicident'];
    }

    /**
     * Sets afnicident
     *
     * @param string|null $afnicident afnicident
     *
     * @return self
     */
    public function setAfnicident($afnicident)
    {
        $this->container['afnicident'] = $afnicident;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method method
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets onerror
     *
     * @return bool|null
     */
    public function getOnerror()
    {
        return $this->container['onerror'];
    }

    /**
     * Sets onerror
     *
     * @param bool|null $onerror onerror
     *
     * @return self
     */
    public function setOnerror($onerror)
    {
        $this->container['onerror'] = $onerror;

        return $this;
    }

    /**
     * Gets supportComment
     *
     * @return string|null
     */
    public function getSupportComment()
    {
        return $this->container['supportComment'];
    }

    /**
     * Sets supportComment
     *
     * @param string|null $supportComment supportComment
     *
     * @return self
     */
    public function setSupportComment($supportComment)
    {
        $this->container['supportComment'] = $supportComment;

        return $this;
    }

    /**
     * Gets aweltyAdmin
     *
     * @return bool|null
     */
    public function getAweltyAdmin()
    {
        return $this->container['aweltyAdmin'];
    }

    /**
     * Sets aweltyAdmin
     *
     * @param bool|null $aweltyAdmin aweltyAdmin
     *
     * @return self
     */
    public function setAweltyAdmin($aweltyAdmin)
    {
        $this->container['aweltyAdmin'] = $aweltyAdmin;

        return $this;
    }

    /**
     * Gets pingDt
     *
     * @return int|null
     */
    public function getPingDt()
    {
        return $this->container['pingDt'];
    }

    /**
     * Sets pingDt
     *
     * @param int|null $pingDt pingDt
     *
     * @return self
     */
    public function setPingDt($pingDt)
    {
        $this->container['pingDt'] = $pingDt;

        return $this;
    }

    /**
     * Gets business
     *
     * @return bool|null
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param bool|null $business business
     *
     * @return self
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets autorenew
     *
     * @return bool|null
     */
    public function getAutorenew()
    {
        return $this->container['autorenew'];
    }

    /**
     * Sets autorenew
     *
     * @param bool|null $autorenew autorenew
     *
     * @return self
     */
    public function setAutorenew($autorenew)
    {
        $this->container['autorenew'] = $autorenew;

        return $this;
    }

    /**
     * Gets commandId
     *
     * @return string|null
     */
    public function getCommandId()
    {
        return $this->container['commandId'];
    }

    /**
     * Sets commandId
     *
     * @param string|null $commandId commandId
     *
     * @return self
     */
    public function setCommandId($commandId)
    {
        $this->container['commandId'] = $commandId;

        return $this;
    }

    /**
     * Gets zimbraServer
     *
     * @return string|null
     */
    public function getZimbraServer()
    {
        return $this->container['zimbraServer'];
    }

    /**
     * Sets zimbraServer
     *
     * @param string|null $zimbraServer zimbraServer
     *
     * @return self
     */
    public function setZimbraServer($zimbraServer)
    {
        $this->container['zimbraServer'] = $zimbraServer;

        return $this;
    }

    /**
     * Gets companynationalidentificationnumber
     *
     * @return string|null
     */
    public function getCompanynationalidentificationnumber()
    {
        return $this->container['companynationalidentificationnumber'];
    }

    /**
     * Sets companynationalidentificationnumber
     *
     * @param string|null $companynationalidentificationnumber companynationalidentificationnumber
     *
     * @return self
     */
    public function setCompanynationalidentificationnumber($companynationalidentificationnumber)
    {
        $this->container['companynationalidentificationnumber'] = $companynationalidentificationnumber;

        return $this;
    }

    /**
     * Gets nationalidentificationnumber
     *
     * @return string|null
     */
    public function getNationalidentificationnumber()
    {
        return $this->container['nationalidentificationnumber'];
    }

    /**
     * Sets nationalidentificationnumber
     *
     * @param string|null $nationalidentificationnumber nationalidentificationnumber
     *
     * @return self
     */
    public function setNationalidentificationnumber($nationalidentificationnumber)
    {
        $this->container['nationalidentificationnumber'] = $nationalidentificationnumber;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets checkAutoRenewAfter
     *
     * @return \DateTime|null
     */
    public function getCheckAutoRenewAfter()
    {
        return $this->container['checkAutoRenewAfter'];
    }

    /**
     * Sets checkAutoRenewAfter
     *
     * @param \DateTime|null $checkAutoRenewAfter checkAutoRenewAfter
     *
     * @return self
     */
    public function setCheckAutoRenewAfter($checkAutoRenewAfter)
    {
        $this->container['checkAutoRenewAfter'] = $checkAutoRenewAfter;

        return $this;
    }

    /**
     * Gets domainErrors
     *
     * @return \EmonsiteApi\Models\UserDomainErrorJsonld[]|null
     */
    public function getDomainErrors()
    {
        return $this->container['domainErrors'];
    }

    /**
     * Sets domainErrors
     *
     * @param \EmonsiteApi\Models\UserDomainErrorJsonld[]|null $domainErrors domainErrors
     *
     * @return self
     */
    public function setDomainErrors($domainErrors)
    {
        $this->container['domainErrors'] = $domainErrors;

        return $this;
    }

    /**
     * Gets mailAliases
     *
     * @return \EmonsiteApi\Models\UserDomainMailAliasJsonld[]|null
     */
    public function getMailAliases()
    {
        return $this->container['mailAliases'];
    }

    /**
     * Sets mailAliases
     *
     * @param \EmonsiteApi\Models\UserDomainMailAliasJsonld[]|null $mailAliases mailAliases
     *
     * @return self
     */
    public function setMailAliases($mailAliases)
    {
        $this->container['mailAliases'] = $mailAliases;

        return $this;
    }

    /**
     * Gets mailboxes
     *
     * @return \EmonsiteApi\Models\UserDomainMailboxJsonld[]|null
     */
    public function getMailboxes()
    {
        return $this->container['mailboxes'];
    }

    /**
     * Sets mailboxes
     *
     * @param \EmonsiteApi\Models\UserDomainMailboxJsonld[]|null $mailboxes mailboxes
     *
     * @return self
     */
    public function setMailboxes($mailboxes)
    {
        $this->container['mailboxes'] = $mailboxes;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets addDt
     *
     * @return int|null
     */
    public function getAddDt()
    {
        return $this->container['addDt'];
    }

    /**
     * Sets addDt
     *
     * @param int|null $addDt addDt
     *
     * @return self
     */
    public function setAddDt($addDt)
    {
        $this->container['addDt'] = $addDt;

        return $this;
    }

    /**
     * Gets updDt
     *
     * @return int|null
     */
    public function getUpdDt()
    {
        return $this->container['updDt'];
    }

    /**
     * Sets updDt
     *
     * @param int|null $updDt updDt
     *
     * @return self
     */
    public function setUpdDt($updDt)
    {
        $this->container['updDt'] = $updDt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets updator
     *
     * @return string|null
     */
    public function getUpdator()
    {
        return $this->container['updator'];
    }

    /**
     * Sets updator
     *
     * @param string|null $updator updator
     *
     * @return self
     */
    public function setUpdator($updator)
    {
        $this->container['updator'] = $updator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


