<?php
/**
 * DirectorySiteC4b6d694621fb452df0348553f6c643b
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * DirectorySiteC4b6d694621fb452df0348553f6c643b Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DirectorySiteC4b6d694621fb452df0348553f6c643b implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectorySite:c4b6d694621fb452df0348553f6c643b';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'site' => 'string',
        'category' => 'string',
        'parentCategory' => 'string',
        'featured' => 'bool',
        'featuredCategory' => 'string',
        'title' => 'string',
        'description' => 'string',
        'keywords' => 'string',
        'avatarUrl' => 'string',
        'published' => 'bool',
        'browsershotGeneratedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'site' => 'iri-reference',
        'category' => 'iri-reference',
        'parentCategory' => 'iri-reference',
        'featured' => null,
        'featuredCategory' => 'iri-reference',
        'title' => null,
        'description' => null,
        'keywords' => null,
        'avatarUrl' => null,
        'published' => null,
        'browsershotGeneratedAt' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'site' => 'site',
        'category' => 'category',
        'parentCategory' => 'parentCategory',
        'featured' => 'featured',
        'featuredCategory' => 'featuredCategory',
        'title' => 'title',
        'description' => 'description',
        'keywords' => 'keywords',
        'avatarUrl' => 'avatarUrl',
        'published' => 'published',
        'browsershotGeneratedAt' => 'browsershotGeneratedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'site' => 'setSite',
        'category' => 'setCategory',
        'parentCategory' => 'setParentCategory',
        'featured' => 'setFeatured',
        'featuredCategory' => 'setFeaturedCategory',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'keywords' => 'setKeywords',
        'avatarUrl' => 'setAvatarUrl',
        'published' => 'setPublished',
        'browsershotGeneratedAt' => 'setBrowsershotGeneratedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'site' => 'getSite',
        'category' => 'getCategory',
        'parentCategory' => 'getParentCategory',
        'featured' => 'getFeatured',
        'featuredCategory' => 'getFeaturedCategory',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'keywords' => 'getKeywords',
        'avatarUrl' => 'getAvatarUrl',
        'published' => 'getPublished',
        'browsershotGeneratedAt' => 'getBrowsershotGeneratedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['site'] = $data['site'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['parentCategory'] = $data['parentCategory'] ?? null;
        $this->container['featured'] = $data['featured'] ?? null;
        $this->container['featuredCategory'] = $data['featuredCategory'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['keywords'] = $data['keywords'] ?? null;
        $this->container['avatarUrl'] = $data['avatarUrl'] ?? null;
        $this->container['published'] = $data['published'] ?? null;
        $this->container['browsershotGeneratedAt'] = $data['browsershotGeneratedAt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets site
     *
     * @return string|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets parentCategory
     *
     * @return string|null
     */
    public function getParentCategory()
    {
        return $this->container['parentCategory'];
    }

    /**
     * Sets parentCategory
     *
     * @param string|null $parentCategory parentCategory
     *
     * @return self
     */
    public function setParentCategory($parentCategory)
    {
        $this->container['parentCategory'] = $parentCategory;

        return $this;
    }

    /**
     * Gets featured
     *
     * @return bool|null
     */
    public function getFeatured()
    {
        return $this->container['featured'];
    }

    /**
     * Sets featured
     *
     * @param bool|null $featured featured
     *
     * @return self
     */
    public function setFeatured($featured)
    {
        $this->container['featured'] = $featured;

        return $this;
    }

    /**
     * Gets featuredCategory
     *
     * @return string|null
     */
    public function getFeaturedCategory()
    {
        return $this->container['featuredCategory'];
    }

    /**
     * Sets featuredCategory
     *
     * @param string|null $featuredCategory featuredCategory
     *
     * @return self
     */
    public function setFeaturedCategory($featuredCategory)
    {
        $this->container['featuredCategory'] = $featuredCategory;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string|null $keywords keywords
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets avatarUrl
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatarUrl'];
    }

    /**
     * Sets avatarUrl
     *
     * @param string|null $avatarUrl avatarUrl
     *
     * @return self
     */
    public function setAvatarUrl($avatarUrl)
    {
        $this->container['avatarUrl'] = $avatarUrl;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool|null
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool|null $published published
     *
     * @return self
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets browsershotGeneratedAt
     *
     * @return \DateTime|null
     */
    public function getBrowsershotGeneratedAt()
    {
        return $this->container['browsershotGeneratedAt'];
    }

    /**
     * Sets browsershotGeneratedAt
     *
     * @param \DateTime|null $browsershotGeneratedAt browsershotGeneratedAt
     *
     * @return self
     */
    public function setBrowsershotGeneratedAt($browsershotGeneratedAt)
    {
        $this->container['browsershotGeneratedAt'] = $browsershotGeneratedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


