<?php
/**
 * BlockPageCellJsonld
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: alpha
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * BlockPageCellJsonld Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BlockPageCellJsonld implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BlockPageCell:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'context' => 'string',
        'id' => 'string',
        'type' => 'string',
        'line' => '\EmonsiteApi\Models\BlockPageLineJsonld',
        'width' => 'string',
        'contentType' => 'string',
        'widgetId' => 'string',
        'widgetVariant' => 'string',
        'cssClass' => 'string',
        'cssId' => 'string',
        'cssStyle' => 'string',
        'position' => 'int',
        'designOptions' => 'string',
        'id' => 'string',
        'versions' => '\EmonsiteApi\Models\BlockPageCellVJsonld[]',
        'version' => '\EmonsiteApi\Models\VersionInterfaceJsonld[]',
        'defaultLang' => 'string',
        'versionByLang' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'context' => null,
        'id' => null,
        'type' => null,
        'line' => null,
        'width' => null,
        'contentType' => null,
        'widgetId' => null,
        'widgetVariant' => null,
        'cssClass' => null,
        'cssId' => null,
        'cssStyle' => null,
        'position' => null,
        'designOptions' => null,
        'id' => null,
        'versions' => null,
        'version' => null,
        'defaultLang' => null,
        'versionByLang' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
        'id' => '@id',
        'type' => '@type',
        'line' => 'line',
        'width' => 'width',
        'contentType' => 'contentType',
        'widgetId' => 'widgetId',
        'widgetVariant' => 'widgetVariant',
        'cssClass' => 'cssClass',
        'cssId' => 'cssId',
        'cssStyle' => 'cssStyle',
        'position' => 'position',
        'designOptions' => 'designOptions',
        'id' => 'id',
        'versions' => 'versions',
        'version' => 'version',
        'defaultLang' => 'defaultLang',
        'versionByLang' => 'versionByLang'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
        'id' => 'setId',
        'type' => 'setType',
        'line' => 'setLine',
        'width' => 'setWidth',
        'contentType' => 'setContentType',
        'widgetId' => 'setWidgetId',
        'widgetVariant' => 'setWidgetVariant',
        'cssClass' => 'setCssClass',
        'cssId' => 'setCssId',
        'cssStyle' => 'setCssStyle',
        'position' => 'setPosition',
        'designOptions' => 'setDesignOptions',
        'id' => 'setId',
        'versions' => 'setVersions',
        'version' => 'setVersion',
        'defaultLang' => 'setDefaultLang',
        'versionByLang' => 'setVersionByLang'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
        'id' => 'getId',
        'type' => 'getType',
        'line' => 'getLine',
        'width' => 'getWidth',
        'contentType' => 'getContentType',
        'widgetId' => 'getWidgetId',
        'widgetVariant' => 'getWidgetVariant',
        'cssClass' => 'getCssClass',
        'cssId' => 'getCssId',
        'cssStyle' => 'getCssStyle',
        'position' => 'getPosition',
        'designOptions' => 'getDesignOptions',
        'id' => 'getId',
        'versions' => 'getVersions',
        'version' => 'getVersion',
        'defaultLang' => 'getDefaultLang',
        'versionByLang' => 'getVersionByLang'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = $data['context'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['line'] = $data['line'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
        $this->container['contentType'] = $data['contentType'] ?? null;
        $this->container['widgetId'] = $data['widgetId'] ?? null;
        $this->container['widgetVariant'] = $data['widgetVariant'] ?? null;
        $this->container['cssClass'] = $data['cssClass'] ?? null;
        $this->container['cssId'] = $data['cssId'] ?? null;
        $this->container['cssStyle'] = $data['cssStyle'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['designOptions'] = $data['designOptions'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['versions'] = $data['versions'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['defaultLang'] = $data['defaultLang'] ?? null;
        $this->container['versionByLang'] = $data['versionByLang'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string|null $context context
     *
     * @return self
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets line
     *
     * @return \EmonsiteApi\Models\BlockPageLineJsonld|null
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param \EmonsiteApi\Models\BlockPageLineJsonld|null $line line
     *
     * @return self
     */
    public function setLine($line)
    {
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets contentType
     *
     * @return string|null
     */
    public function getContentType()
    {
        return $this->container['contentType'];
    }

    /**
     * Sets contentType
     *
     * @param string|null $contentType contentType
     *
     * @return self
     */
    public function setContentType($contentType)
    {
        $this->container['contentType'] = $contentType;

        return $this;
    }

    /**
     * Gets widgetId
     *
     * @return string|null
     */
    public function getWidgetId()
    {
        return $this->container['widgetId'];
    }

    /**
     * Sets widgetId
     *
     * @param string|null $widgetId widgetId
     *
     * @return self
     */
    public function setWidgetId($widgetId)
    {
        $this->container['widgetId'] = $widgetId;

        return $this;
    }

    /**
     * Gets widgetVariant
     *
     * @return string|null
     */
    public function getWidgetVariant()
    {
        return $this->container['widgetVariant'];
    }

    /**
     * Sets widgetVariant
     *
     * @param string|null $widgetVariant widgetVariant
     *
     * @return self
     */
    public function setWidgetVariant($widgetVariant)
    {
        $this->container['widgetVariant'] = $widgetVariant;

        return $this;
    }

    /**
     * Gets cssClass
     *
     * @return string|null
     */
    public function getCssClass()
    {
        return $this->container['cssClass'];
    }

    /**
     * Sets cssClass
     *
     * @param string|null $cssClass cssClass
     *
     * @return self
     */
    public function setCssClass($cssClass)
    {
        $this->container['cssClass'] = $cssClass;

        return $this;
    }

    /**
     * Gets cssId
     *
     * @return string|null
     */
    public function getCssId()
    {
        return $this->container['cssId'];
    }

    /**
     * Sets cssId
     *
     * @param string|null $cssId cssId
     *
     * @return self
     */
    public function setCssId($cssId)
    {
        $this->container['cssId'] = $cssId;

        return $this;
    }

    /**
     * Gets cssStyle
     *
     * @return string|null
     */
    public function getCssStyle()
    {
        return $this->container['cssStyle'];
    }

    /**
     * Sets cssStyle
     *
     * @param string|null $cssStyle cssStyle
     *
     * @return self
     */
    public function setCssStyle($cssStyle)
    {
        $this->container['cssStyle'] = $cssStyle;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets designOptions
     *
     * @return string|null
     */
    public function getDesignOptions()
    {
        return $this->container['designOptions'];
    }

    /**
     * Sets designOptions
     *
     * @param string|null $designOptions TODO type json pour avoir un array direct
     *
     * @return self
     */
    public function setDesignOptions($designOptions)
    {
        $this->container['designOptions'] = $designOptions;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \EmonsiteApi\Models\BlockPageCellVJsonld[]|null
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \EmonsiteApi\Models\BlockPageCellVJsonld[]|null $versions IMPLEMENTEZ le mapping dans l'entity TODO trouver comment le faire dynamiquement avec un listener doctrine
     *
     * @return self
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \EmonsiteApi\Models\VersionInterfaceJsonld[]|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \EmonsiteApi\Models\VersionInterfaceJsonld[]|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets defaultLang
     *
     * @return string|null
     */
    public function getDefaultLang()
    {
        return $this->container['defaultLang'];
    }

    /**
     * Sets defaultLang
     *
     * @param string|null $defaultLang defaultLang
     *
     * @return self
     */
    public function setDefaultLang($defaultLang)
    {
        $this->container['defaultLang'] = $defaultLang;

        return $this;
    }

    /**
     * Gets versionByLang
     *
     * @return string[]|null
     */
    public function getVersionByLang()
    {
        return $this->container['versionByLang'];
    }

    /**
     * Sets versionByLang
     *
     * @param string[]|null $versionByLang versionByLang
     *
     * @return self
     */
    public function setVersionByLang($versionByLang)
    {
        $this->container['versionByLang'] = $versionByLang;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


