<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'add_dt' => 'int',
'creator' => 'string',
'add_user_ip' => 'string',
'username' => 'string',
'email' => 'string',
'shard_id' => 'string',
'name' => 'string',
'tel' => 'string',
'group' => 'string',
'brand' => 'string',
'displayrealname' => 'bool',
'connection_token' => 'string',
'deleted' => 'bool',
'last_log_dt' => 'int',
'mailchimp_email' => 'string',
'remaining_sms' => 'int',
'email_valid' => 'bool',
'email_validation_token' => 'string',
'email_validation_dt' => 'int',
'nb_reminder_validation_mail_sent' => 'int',
'chatbot_active' => 'bool',
'site_users' => 'string[]',
'domains' => '\EmonsiteApi\Models\UserDomain[]',
'recent_updated_sites_users' => 'string[]',
'recent_created_site_user' => 'string[]',
'agency_customer' => 'bool',
'user_in_validation_period' => 'bool',
'email_verified' => 'bool',
'site_user_marketing_send' => 'string',
'author_name' => 'string',
'sessions' => 'string[]',
'sso_accounts' => '\EmonsiteApi\Models\UserSsoAccount[]',
'user_has_role' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'add_dt' => null,
'creator' => 'iri-reference',
'add_user_ip' => null,
'username' => null,
'email' => null,
'shard_id' => null,
'name' => null,
'tel' => null,
'group' => 'iri-reference',
'brand' => 'iri-reference',
'displayrealname' => null,
'connection_token' => null,
'deleted' => null,
'last_log_dt' => null,
'mailchimp_email' => null,
'remaining_sms' => null,
'email_valid' => null,
'email_validation_token' => null,
'email_validation_dt' => null,
'nb_reminder_validation_mail_sent' => null,
'chatbot_active' => null,
'site_users' => 'iri-reference',
'domains' => null,
'recent_updated_sites_users' => 'iri-reference',
'recent_created_site_user' => 'iri-reference',
'agency_customer' => null,
'user_in_validation_period' => null,
'email_verified' => null,
'site_user_marketing_send' => 'iri-reference',
'author_name' => null,
'sessions' => 'iri-reference',
'sso_accounts' => null,
'user_has_role' => 'iri-reference'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'add_dt' => 'addDt',
'creator' => 'creator',
'add_user_ip' => 'addUserIp',
'username' => 'username',
'email' => 'email',
'shard_id' => 'shardId',
'name' => 'name',
'tel' => 'tel',
'group' => 'group',
'brand' => 'brand',
'displayrealname' => 'displayrealname',
'connection_token' => 'connectionToken',
'deleted' => 'deleted',
'last_log_dt' => 'lastLogDt',
'mailchimp_email' => 'mailchimpEmail',
'remaining_sms' => 'remainingSms',
'email_valid' => 'emailValid',
'email_validation_token' => 'emailValidationToken',
'email_validation_dt' => 'emailValidationDt',
'nb_reminder_validation_mail_sent' => 'nbReminderValidationMailSent',
'chatbot_active' => 'chatbotActive',
'site_users' => 'siteUsers',
'domains' => 'domains',
'recent_updated_sites_users' => 'recentUpdatedSitesUsers',
'recent_created_site_user' => 'recentCreatedSiteUser',
'agency_customer' => 'agencyCustomer',
'user_in_validation_period' => 'userInValidationPeriod',
'email_verified' => 'emailVerified',
'site_user_marketing_send' => 'siteUserMarketingSend',
'author_name' => 'authorName',
'sessions' => 'sessions',
'sso_accounts' => 'ssoAccounts',
'user_has_role' => 'userHasRole'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'add_dt' => 'setAddDt',
'creator' => 'setCreator',
'add_user_ip' => 'setAddUserIp',
'username' => 'setUsername',
'email' => 'setEmail',
'shard_id' => 'setShardId',
'name' => 'setName',
'tel' => 'setTel',
'group' => 'setGroup',
'brand' => 'setBrand',
'displayrealname' => 'setDisplayrealname',
'connection_token' => 'setConnectionToken',
'deleted' => 'setDeleted',
'last_log_dt' => 'setLastLogDt',
'mailchimp_email' => 'setMailchimpEmail',
'remaining_sms' => 'setRemainingSms',
'email_valid' => 'setEmailValid',
'email_validation_token' => 'setEmailValidationToken',
'email_validation_dt' => 'setEmailValidationDt',
'nb_reminder_validation_mail_sent' => 'setNbReminderValidationMailSent',
'chatbot_active' => 'setChatbotActive',
'site_users' => 'setSiteUsers',
'domains' => 'setDomains',
'recent_updated_sites_users' => 'setRecentUpdatedSitesUsers',
'recent_created_site_user' => 'setRecentCreatedSiteUser',
'agency_customer' => 'setAgencyCustomer',
'user_in_validation_period' => 'setUserInValidationPeriod',
'email_verified' => 'setEmailVerified',
'site_user_marketing_send' => 'setSiteUserMarketingSend',
'author_name' => 'setAuthorName',
'sessions' => 'setSessions',
'sso_accounts' => 'setSsoAccounts',
'user_has_role' => 'setUserHasRole'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'add_dt' => 'getAddDt',
'creator' => 'getCreator',
'add_user_ip' => 'getAddUserIp',
'username' => 'getUsername',
'email' => 'getEmail',
'shard_id' => 'getShardId',
'name' => 'getName',
'tel' => 'getTel',
'group' => 'getGroup',
'brand' => 'getBrand',
'displayrealname' => 'getDisplayrealname',
'connection_token' => 'getConnectionToken',
'deleted' => 'getDeleted',
'last_log_dt' => 'getLastLogDt',
'mailchimp_email' => 'getMailchimpEmail',
'remaining_sms' => 'getRemainingSms',
'email_valid' => 'getEmailValid',
'email_validation_token' => 'getEmailValidationToken',
'email_validation_dt' => 'getEmailValidationDt',
'nb_reminder_validation_mail_sent' => 'getNbReminderValidationMailSent',
'chatbot_active' => 'getChatbotActive',
'site_users' => 'getSiteUsers',
'domains' => 'getDomains',
'recent_updated_sites_users' => 'getRecentUpdatedSitesUsers',
'recent_created_site_user' => 'getRecentCreatedSiteUser',
'agency_customer' => 'getAgencyCustomer',
'user_in_validation_period' => 'getUserInValidationPeriod',
'email_verified' => 'getEmailVerified',
'site_user_marketing_send' => 'getSiteUserMarketingSend',
'author_name' => 'getAuthorName',
'sessions' => 'getSessions',
'sso_accounts' => 'getSsoAccounts',
'user_has_role' => 'getUserHasRole'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['add_dt'] = isset($data['add_dt']) ? $data['add_dt'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['add_user_ip'] = isset($data['add_user_ip']) ? $data['add_user_ip'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['shard_id'] = isset($data['shard_id']) ? $data['shard_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tel'] = isset($data['tel']) ? $data['tel'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['displayrealname'] = isset($data['displayrealname']) ? $data['displayrealname'] : null;
        $this->container['connection_token'] = isset($data['connection_token']) ? $data['connection_token'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['last_log_dt'] = isset($data['last_log_dt']) ? $data['last_log_dt'] : null;
        $this->container['mailchimp_email'] = isset($data['mailchimp_email']) ? $data['mailchimp_email'] : null;
        $this->container['remaining_sms'] = isset($data['remaining_sms']) ? $data['remaining_sms'] : null;
        $this->container['email_valid'] = isset($data['email_valid']) ? $data['email_valid'] : null;
        $this->container['email_validation_token'] = isset($data['email_validation_token']) ? $data['email_validation_token'] : null;
        $this->container['email_validation_dt'] = isset($data['email_validation_dt']) ? $data['email_validation_dt'] : null;
        $this->container['nb_reminder_validation_mail_sent'] = isset($data['nb_reminder_validation_mail_sent']) ? $data['nb_reminder_validation_mail_sent'] : null;
        $this->container['chatbot_active'] = isset($data['chatbot_active']) ? $data['chatbot_active'] : null;
        $this->container['site_users'] = isset($data['site_users']) ? $data['site_users'] : null;
        $this->container['domains'] = isset($data['domains']) ? $data['domains'] : null;
        $this->container['recent_updated_sites_users'] = isset($data['recent_updated_sites_users']) ? $data['recent_updated_sites_users'] : null;
        $this->container['recent_created_site_user'] = isset($data['recent_created_site_user']) ? $data['recent_created_site_user'] : null;
        $this->container['agency_customer'] = isset($data['agency_customer']) ? $data['agency_customer'] : null;
        $this->container['user_in_validation_period'] = isset($data['user_in_validation_period']) ? $data['user_in_validation_period'] : null;
        $this->container['email_verified'] = isset($data['email_verified']) ? $data['email_verified'] : null;
        $this->container['site_user_marketing_send'] = isset($data['site_user_marketing_send']) ? $data['site_user_marketing_send'] : null;
        $this->container['author_name'] = isset($data['author_name']) ? $data['author_name'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
        $this->container['sso_accounts'] = isset($data['sso_accounts']) ? $data['sso_accounts'] : null;
        $this->container['user_has_role'] = isset($data['user_has_role']) ? $data['user_has_role'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets add_dt
     *
     * @return int
     */
    public function getAddDt()
    {
        return $this->container['add_dt'];
    }

    /**
     * Sets add_dt
     *
     * @param int $add_dt add_dt
     *
     * @return $this
     */
    public function setAddDt($add_dt)
    {
        $this->container['add_dt'] = $add_dt;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets add_user_ip
     *
     * @return string
     */
    public function getAddUserIp()
    {
        return $this->container['add_user_ip'];
    }

    /**
     * Sets add_user_ip
     *
     * @param string $add_user_ip add_user_ip
     *
     * @return $this
     */
    public function setAddUserIp($add_user_ip)
    {
        $this->container['add_user_ip'] = $add_user_ip;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email TODO WARNING : des emails sont en chaine vide, probablement ems v1 - v3. Quid ?
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets shard_id
     *
     * @return string
     */
    public function getShardId()
    {
        return $this->container['shard_id'];
    }

    /**
     * Sets shard_id
     *
     * @param string $shard_id shard_id
     *
     * @return $this
     */
    public function setShardId($shard_id)
    {
        $this->container['shard_id'] = $shard_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tel
     *
     * @return string
     */
    public function getTel()
    {
        return $this->container['tel'];
    }

    /**
     * Sets tel
     *
     * @param string $tel tel
     *
     * @return $this
     */
    public function setTel($tel)
    {
        $this->container['tel'] = $tel;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets displayrealname
     *
     * @return bool
     */
    public function getDisplayrealname()
    {
        return $this->container['displayrealname'];
    }

    /**
     * Sets displayrealname
     *
     * @param bool $displayrealname displayrealname
     *
     * @return $this
     */
    public function setDisplayrealname($displayrealname)
    {
        $this->container['displayrealname'] = $displayrealname;

        return $this;
    }

    /**
     * Gets connection_token
     *
     * @return string
     */
    public function getConnectionToken()
    {
        return $this->container['connection_token'];
    }

    /**
     * Sets connection_token
     *
     * @param string $connection_token connection_token
     *
     * @return $this
     */
    public function setConnectionToken($connection_token)
    {
        $this->container['connection_token'] = $connection_token;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets last_log_dt
     *
     * @return int
     */
    public function getLastLogDt()
    {
        return $this->container['last_log_dt'];
    }

    /**
     * Sets last_log_dt
     *
     * @param int $last_log_dt Timestamp de la dernière fois que le user à été vu sur le manager, MAJ 1x / jour
     *
     * @return $this
     */
    public function setLastLogDt($last_log_dt)
    {
        $this->container['last_log_dt'] = $last_log_dt;

        return $this;
    }

    /**
     * Gets mailchimp_email
     *
     * @return string
     */
    public function getMailchimpEmail()
    {
        return $this->container['mailchimp_email'];
    }

    /**
     * Sets mailchimp_email
     *
     * @param string $mailchimp_email mailchimp_email
     *
     * @return $this
     */
    public function setMailchimpEmail($mailchimp_email)
    {
        $this->container['mailchimp_email'] = $mailchimp_email;

        return $this;
    }

    /**
     * Gets remaining_sms
     *
     * @return int
     */
    public function getRemainingSms()
    {
        return $this->container['remaining_sms'];
    }

    /**
     * Sets remaining_sms
     *
     * @param int $remaining_sms remaining_sms
     *
     * @return $this
     */
    public function setRemainingSms($remaining_sms)
    {
        $this->container['remaining_sms'] = $remaining_sms;

        return $this;
    }

    /**
     * Gets email_valid
     *
     * @return bool
     */
    public function getEmailValid()
    {
        return $this->container['email_valid'];
    }

    /**
     * Sets email_valid
     *
     * @param bool $email_valid email_valid
     *
     * @return $this
     */
    public function setEmailValid($email_valid)
    {
        $this->container['email_valid'] = $email_valid;

        return $this;
    }

    /**
     * Gets email_validation_token
     *
     * @return string
     */
    public function getEmailValidationToken()
    {
        return $this->container['email_validation_token'];
    }

    /**
     * Sets email_validation_token
     *
     * @param string $email_validation_token email_validation_token
     *
     * @return $this
     */
    public function setEmailValidationToken($email_validation_token)
    {
        $this->container['email_validation_token'] = $email_validation_token;

        return $this;
    }

    /**
     * Gets email_validation_dt
     *
     * @return int
     */
    public function getEmailValidationDt()
    {
        return $this->container['email_validation_dt'];
    }

    /**
     * Sets email_validation_dt
     *
     * @param int $email_validation_dt email_validation_dt
     *
     * @return $this
     */
    public function setEmailValidationDt($email_validation_dt)
    {
        $this->container['email_validation_dt'] = $email_validation_dt;

        return $this;
    }

    /**
     * Gets nb_reminder_validation_mail_sent
     *
     * @return int
     */
    public function getNbReminderValidationMailSent()
    {
        return $this->container['nb_reminder_validation_mail_sent'];
    }

    /**
     * Sets nb_reminder_validation_mail_sent
     *
     * @param int $nb_reminder_validation_mail_sent nb_reminder_validation_mail_sent
     *
     * @return $this
     */
    public function setNbReminderValidationMailSent($nb_reminder_validation_mail_sent)
    {
        $this->container['nb_reminder_validation_mail_sent'] = $nb_reminder_validation_mail_sent;

        return $this;
    }

    /**
     * Gets chatbot_active
     *
     * @return bool
     */
    public function getChatbotActive()
    {
        return $this->container['chatbot_active'];
    }

    /**
     * Sets chatbot_active
     *
     * @param bool $chatbot_active chatbot_active
     *
     * @return $this
     */
    public function setChatbotActive($chatbot_active)
    {
        $this->container['chatbot_active'] = $chatbot_active;

        return $this;
    }

    /**
     * Gets site_users
     *
     * @return string[]
     */
    public function getSiteUsers()
    {
        return $this->container['site_users'];
    }

    /**
     * Sets site_users
     *
     * @param string[] $site_users site_users
     *
     * @return $this
     */
    public function setSiteUsers($site_users)
    {
        $this->container['site_users'] = $site_users;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return \EmonsiteApi\Models\UserDomain[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \EmonsiteApi\Models\UserDomain[] $domains domains
     *
     * @return $this
     */
    public function setDomains($domains)
    {
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets recent_updated_sites_users
     *
     * @return string[]
     */
    public function getRecentUpdatedSitesUsers()
    {
        return $this->container['recent_updated_sites_users'];
    }

    /**
     * Sets recent_updated_sites_users
     *
     * @param string[] $recent_updated_sites_users Les sites users ordered par last_log_dt
     *
     * @return $this
     */
    public function setRecentUpdatedSitesUsers($recent_updated_sites_users)
    {
        $this->container['recent_updated_sites_users'] = $recent_updated_sites_users;

        return $this;
    }

    /**
     * Gets recent_created_site_user
     *
     * @return string[]
     */
    public function getRecentCreatedSiteUser()
    {
        return $this->container['recent_created_site_user'];
    }

    /**
     * Sets recent_created_site_user
     *
     * @param string[] $recent_created_site_user Le dernier Siteuser créé
     *
     * @return $this
     */
    public function setRecentCreatedSiteUser($recent_created_site_user)
    {
        $this->container['recent_created_site_user'] = $recent_created_site_user;

        return $this;
    }

    /**
     * Gets agency_customer
     *
     * @return bool
     */
    public function getAgencyCustomer()
    {
        return $this->container['agency_customer'];
    }

    /**
     * Sets agency_customer
     *
     * @param bool $agency_customer agency_customer
     *
     * @return $this
     */
    public function setAgencyCustomer($agency_customer)
    {
        $this->container['agency_customer'] = $agency_customer;

        return $this;
    }

    /**
     * Gets user_in_validation_period
     *
     * @return bool
     */
    public function getUserInValidationPeriod()
    {
        return $this->container['user_in_validation_period'];
    }

    /**
     * Sets user_in_validation_period
     *
     * @param bool $user_in_validation_period Indique si le user est dans la \"période de validation\" de 30 jours après sa création
     *
     * @return $this
     */
    public function setUserInValidationPeriod($user_in_validation_period)
    {
        $this->container['user_in_validation_period'] = $user_in_validation_period;

        return $this;
    }

    /**
     * Gets email_verified
     *
     * @return bool
     */
    public function getEmailVerified()
    {
        return $this->container['email_verified'];
    }

    /**
     * Sets email_verified
     *
     * @param bool $email_verified email_verified
     *
     * @return $this
     */
    public function setEmailVerified($email_verified)
    {
        $this->container['email_verified'] = $email_verified;

        return $this;
    }

    /**
     * Gets site_user_marketing_send
     *
     * @return string
     */
    public function getSiteUserMarketingSend()
    {
        return $this->container['site_user_marketing_send'];
    }

    /**
     * Sets site_user_marketing_send
     *
     * @param string $site_user_marketing_send Retourne le Siteuser dont le flag marketing_email_send
     *
     * @return $this
     */
    public function setSiteUserMarketingSend($site_user_marketing_send)
    {
        $this->container['site_user_marketing_send'] = $site_user_marketing_send;

        return $this;
    }

    /**
     * Gets author_name
     *
     * @return string
     */
    public function getAuthorName()
    {
        return $this->container['author_name'];
    }

    /**
     * Sets author_name
     *
     * @param string $author_name author_name
     *
     * @return $this
     */
    public function setAuthorName($author_name)
    {
        $this->container['author_name'] = $author_name;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return string[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param string[] $sessions sessions
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets sso_accounts
     *
     * @return \EmonsiteApi\Models\UserSsoAccount[]
     */
    public function getSsoAccounts()
    {
        return $this->container['sso_accounts'];
    }

    /**
     * Sets sso_accounts
     *
     * @param \EmonsiteApi\Models\UserSsoAccount[] $sso_accounts sso_accounts
     *
     * @return $this
     */
    public function setSsoAccounts($sso_accounts)
    {
        $this->container['sso_accounts'] = $sso_accounts;

        return $this;
    }

    /**
     * Gets user_has_role
     *
     * @return string
     */
    public function getUserHasRole()
    {
        return $this->container['user_has_role'];
    }

    /**
     * Sets user_has_role
     *
     * @param string $user_has_role user_has_role
     *
     * @return $this
     */
    public function setUserHasRole($user_has_role)
    {
        $this->container['user_has_role'] = $user_has_role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
