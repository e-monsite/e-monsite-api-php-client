<?php
/**
 * EcoCollectionPoint563c4b10d21b54db780227488e899fa5Jsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Models;

use \ArrayAccess;
use \Emonsite\ObjectSerializer;

/**
 * EcoCollectionPoint563c4b10d21b54db780227488e899fa5Jsonld Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcoCollectionPoint563c4b10d21b54db780227488e899fa5Jsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EcoCollectionPoint:563c4b10d21b54db780227488e899fa5:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'id' => 'string',
'name' => 'string',
'address' => 'string',
'latitude' => 'float',
'longitude' => 'float',
'code' => 'string',
'cost' => 'float',
'schedule' => 'string[]',
'available_for_in_store_pick_up' => 'bool',
'available_for_drive' => 'bool',
'available_for_click_and_collect' => 'bool',
'retention_time' => 'int',
'availability_delay' => 'string',
'email' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'id' => null,
'name' => null,
'address' => null,
'latitude' => null,
'longitude' => null,
'code' => null,
'cost' => null,
'schedule' => null,
'available_for_in_store_pick_up' => null,
'available_for_drive' => null,
'available_for_click_and_collect' => null,
'retention_time' => null,
'availability_delay' => null,
'email' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'id' => 'id',
'name' => 'name',
'address' => 'address',
'latitude' => 'latitude',
'longitude' => 'longitude',
'code' => 'code',
'cost' => 'cost',
'schedule' => 'schedule',
'available_for_in_store_pick_up' => 'availableForInStorePickUp',
'available_for_drive' => 'availableForDrive',
'available_for_click_and_collect' => 'availableForClickAndCollect',
'retention_time' => 'retentionTime',
'availability_delay' => 'availabilityDelay',
'email' => 'email'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'id' => 'setId',
'name' => 'setName',
'address' => 'setAddress',
'latitude' => 'setLatitude',
'longitude' => 'setLongitude',
'code' => 'setCode',
'cost' => 'setCost',
'schedule' => 'setSchedule',
'available_for_in_store_pick_up' => 'setAvailableForInStorePickUp',
'available_for_drive' => 'setAvailableForDrive',
'available_for_click_and_collect' => 'setAvailableForClickAndCollect',
'retention_time' => 'setRetentionTime',
'availability_delay' => 'setAvailabilityDelay',
'email' => 'setEmail'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'id' => 'getId',
'name' => 'getName',
'address' => 'getAddress',
'latitude' => 'getLatitude',
'longitude' => 'getLongitude',
'code' => 'getCode',
'cost' => 'getCost',
'schedule' => 'getSchedule',
'available_for_in_store_pick_up' => 'getAvailableForInStorePickUp',
'available_for_drive' => 'getAvailableForDrive',
'available_for_click_and_collect' => 'getAvailableForClickAndCollect',
'retention_time' => 'getRetentionTime',
'availability_delay' => 'getAvailabilityDelay',
'email' => 'getEmail'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['available_for_in_store_pick_up'] = isset($data['available_for_in_store_pick_up']) ? $data['available_for_in_store_pick_up'] : null;
        $this->container['available_for_drive'] = isset($data['available_for_drive']) ? $data['available_for_drive'] : null;
        $this->container['available_for_click_and_collect'] = isset($data['available_for_click_and_collect']) ? $data['available_for_click_and_collect'] : null;
        $this->container['retention_time'] = isset($data['retention_time']) ? $data['retention_time'] : null;
        $this->container['availability_delay'] = isset($data['availability_delay']) ? $data['availability_delay'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string[]
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string[] $schedule schedule
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets available_for_in_store_pick_up
     *
     * @return bool
     */
    public function getAvailableForInStorePickUp()
    {
        return $this->container['available_for_in_store_pick_up'];
    }

    /**
     * Sets available_for_in_store_pick_up
     *
     * @param bool $available_for_in_store_pick_up available_for_in_store_pick_up
     *
     * @return $this
     */
    public function setAvailableForInStorePickUp($available_for_in_store_pick_up)
    {
        $this->container['available_for_in_store_pick_up'] = $available_for_in_store_pick_up;

        return $this;
    }

    /**
     * Gets available_for_drive
     *
     * @return bool
     */
    public function getAvailableForDrive()
    {
        return $this->container['available_for_drive'];
    }

    /**
     * Sets available_for_drive
     *
     * @param bool $available_for_drive available_for_drive
     *
     * @return $this
     */
    public function setAvailableForDrive($available_for_drive)
    {
        $this->container['available_for_drive'] = $available_for_drive;

        return $this;
    }

    /**
     * Gets available_for_click_and_collect
     *
     * @return bool
     */
    public function getAvailableForClickAndCollect()
    {
        return $this->container['available_for_click_and_collect'];
    }

    /**
     * Sets available_for_click_and_collect
     *
     * @param bool $available_for_click_and_collect available_for_click_and_collect
     *
     * @return $this
     */
    public function setAvailableForClickAndCollect($available_for_click_and_collect)
    {
        $this->container['available_for_click_and_collect'] = $available_for_click_and_collect;

        return $this;
    }

    /**
     * Gets retention_time
     *
     * @return int
     */
    public function getRetentionTime()
    {
        return $this->container['retention_time'];
    }

    /**
     * Sets retention_time
     *
     * @param int $retention_time retention_time
     *
     * @return $this
     */
    public function setRetentionTime($retention_time)
    {
        $this->container['retention_time'] = $retention_time;

        return $this;
    }

    /**
     * Gets availability_delay
     *
     * @return string
     */
    public function getAvailabilityDelay()
    {
        return $this->container['availability_delay'];
    }

    /**
     * Sets availability_delay
     *
     * @param string $availability_delay availability_delay
     *
     * @return $this
     */
    public function setAvailabilityDelay($availability_delay)
    {
        $this->container['availability_delay'] = $availability_delay;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
