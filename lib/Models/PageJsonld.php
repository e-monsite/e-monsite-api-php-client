<?php
/**
 * PageJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Models;

use \ArrayAccess;
use \Emonsite\ObjectSerializer;

/**
 * PageJsonld Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PageJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Page:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'alias_class' => 'string',
'pageindex' => 'bool',
'is_pageindex' => 'bool',
'model_id' => 'string',
'site_url' => 'string',
'id' => 'string',
'versions' => '\Emonsite\Models\PageVJsonld[]',
'version' => '\Emonsite\Models\VersionInterfaceJsonld[]',
'default_lang' => 'string',
'version_by_lang' => 'string[]',
'site' => '\Emonsite\Models\SiteJsonld',
'add_dt' => 'int',
'upd_dt' => 'int',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'add_user_id' => 'string',
'upd_user_id' => 'string',
'trashed' => 'bool',
'trash_dt' => 'int',
'trash_user_id' => 'string',
'published' => 'bool',
'publish_from' => 'int',
'category' => 'string',
'aliases' => '\Emonsite\Models\PageAliasJsonld[]',
'alias' => 'string[]',
'block' => 'AnyOfPageJsonldBlock'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'alias_class' => null,
'pageindex' => null,
'is_pageindex' => null,
'model_id' => null,
'site_url' => null,
'id' => null,
'versions' => null,
'version' => null,
'default_lang' => null,
'version_by_lang' => null,
'site' => null,
'add_dt' => null,
'upd_dt' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'add_user_id' => null,
'upd_user_id' => null,
'trashed' => null,
'trash_dt' => null,
'trash_user_id' => null,
'published' => null,
'publish_from' => null,
'category' => 'iri-reference',
'aliases' => null,
'alias' => 'iri-reference',
'block' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'alias_class' => 'aliasClass',
'pageindex' => 'pageindex',
'is_pageindex' => 'isPageindex',
'model_id' => 'modelId',
'site_url' => 'siteUrl',
'id' => 'id',
'versions' => 'versions',
'version' => 'version',
'default_lang' => 'defaultLang',
'version_by_lang' => 'versionByLang',
'site' => 'site',
'add_dt' => 'addDt',
'upd_dt' => 'updDt',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'add_user_id' => 'addUserId',
'upd_user_id' => 'updUserId',
'trashed' => 'trashed',
'trash_dt' => 'trashDt',
'trash_user_id' => 'trashUserId',
'published' => 'published',
'publish_from' => 'publishFrom',
'category' => 'category',
'aliases' => 'aliases',
'alias' => 'alias',
'block' => 'block'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'alias_class' => 'setAliasClass',
'pageindex' => 'setPageindex',
'is_pageindex' => 'setIsPageindex',
'model_id' => 'setModelId',
'site_url' => 'setSiteUrl',
'id' => 'setId',
'versions' => 'setVersions',
'version' => 'setVersion',
'default_lang' => 'setDefaultLang',
'version_by_lang' => 'setVersionByLang',
'site' => 'setSite',
'add_dt' => 'setAddDt',
'upd_dt' => 'setUpdDt',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'add_user_id' => 'setAddUserId',
'upd_user_id' => 'setUpdUserId',
'trashed' => 'setTrashed',
'trash_dt' => 'setTrashDt',
'trash_user_id' => 'setTrashUserId',
'published' => 'setPublished',
'publish_from' => 'setPublishFrom',
'category' => 'setCategory',
'aliases' => 'setAliases',
'alias' => 'setAlias',
'block' => 'setBlock'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'alias_class' => 'getAliasClass',
'pageindex' => 'getPageindex',
'is_pageindex' => 'getIsPageindex',
'model_id' => 'getModelId',
'site_url' => 'getSiteUrl',
'id' => 'getId',
'versions' => 'getVersions',
'version' => 'getVersion',
'default_lang' => 'getDefaultLang',
'version_by_lang' => 'getVersionByLang',
'site' => 'getSite',
'add_dt' => 'getAddDt',
'upd_dt' => 'getUpdDt',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'add_user_id' => 'getAddUserId',
'upd_user_id' => 'getUpdUserId',
'trashed' => 'getTrashed',
'trash_dt' => 'getTrashDt',
'trash_user_id' => 'getTrashUserId',
'published' => 'getPublished',
'publish_from' => 'getPublishFrom',
'category' => 'getCategory',
'aliases' => 'getAliases',
'alias' => 'getAlias',
'block' => 'getBlock'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['alias_class'] = isset($data['alias_class']) ? $data['alias_class'] : null;
        $this->container['pageindex'] = isset($data['pageindex']) ? $data['pageindex'] : null;
        $this->container['is_pageindex'] = isset($data['is_pageindex']) ? $data['is_pageindex'] : null;
        $this->container['model_id'] = isset($data['model_id']) ? $data['model_id'] : null;
        $this->container['site_url'] = isset($data['site_url']) ? $data['site_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['versions'] = isset($data['versions']) ? $data['versions'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['default_lang'] = isset($data['default_lang']) ? $data['default_lang'] : null;
        $this->container['version_by_lang'] = isset($data['version_by_lang']) ? $data['version_by_lang'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['add_dt'] = isset($data['add_dt']) ? $data['add_dt'] : null;
        $this->container['upd_dt'] = isset($data['upd_dt']) ? $data['upd_dt'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['add_user_id'] = isset($data['add_user_id']) ? $data['add_user_id'] : null;
        $this->container['upd_user_id'] = isset($data['upd_user_id']) ? $data['upd_user_id'] : null;
        $this->container['trashed'] = isset($data['trashed']) ? $data['trashed'] : null;
        $this->container['trash_dt'] = isset($data['trash_dt']) ? $data['trash_dt'] : null;
        $this->container['trash_user_id'] = isset($data['trash_user_id']) ? $data['trash_user_id'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['publish_from'] = isset($data['publish_from']) ? $data['publish_from'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['aliases'] = isset($data['aliases']) ? $data['aliases'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['block'] = isset($data['block']) ? $data['block'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets alias_class
     *
     * @return string
     */
    public function getAliasClass()
    {
        return $this->container['alias_class'];
    }

    /**
     * Sets alias_class
     *
     * @param string $alias_class alias_class
     *
     * @return $this
     */
    public function setAliasClass($alias_class)
    {
        $this->container['alias_class'] = $alias_class;

        return $this;
    }

    /**
     * Gets pageindex
     *
     * @return bool
     */
    public function getPageindex()
    {
        return $this->container['pageindex'];
    }

    /**
     * Sets pageindex
     *
     * @param bool $pageindex pageindex
     *
     * @return $this
     */
    public function setPageindex($pageindex)
    {
        $this->container['pageindex'] = $pageindex;

        return $this;
    }

    /**
     * Gets is_pageindex
     *
     * @return bool
     */
    public function getIsPageindex()
    {
        return $this->container['is_pageindex'];
    }

    /**
     * Sets is_pageindex
     *
     * @param bool $is_pageindex is_pageindex
     *
     * @return $this
     */
    public function setIsPageindex($is_pageindex)
    {
        $this->container['is_pageindex'] = $is_pageindex;

        return $this;
    }

    /**
     * Gets model_id
     *
     * @return string
     */
    public function getModelId()
    {
        return $this->container['model_id'];
    }

    /**
     * Sets model_id
     *
     * @param string $model_id model_id
     *
     * @return $this
     */
    public function setModelId($model_id)
    {
        $this->container['model_id'] = $model_id;

        return $this;
    }

    /**
     * Gets site_url
     *
     * @return string
     */
    public function getSiteUrl()
    {
        return $this->container['site_url'];
    }

    /**
     * Sets site_url
     *
     * @param string $site_url site_url
     *
     * @return $this
     */
    public function setSiteUrl($site_url)
    {
        $this->container['site_url'] = $site_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \Emonsite\Models\PageVJsonld[]
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \Emonsite\Models\PageVJsonld[] $versions IMPLEMENTEZ le mapping dans l'entity TODO trouver comment le faire dynamiquement avec un listener doctrine
     *
     * @return $this
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \Emonsite\Models\VersionInterfaceJsonld[]
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \Emonsite\Models\VersionInterfaceJsonld[] $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets default_lang
     *
     * @return string
     */
    public function getDefaultLang()
    {
        return $this->container['default_lang'];
    }

    /**
     * Sets default_lang
     *
     * @param string $default_lang default_lang
     *
     * @return $this
     */
    public function setDefaultLang($default_lang)
    {
        $this->container['default_lang'] = $default_lang;

        return $this;
    }

    /**
     * Gets version_by_lang
     *
     * @return string[]
     */
    public function getVersionByLang()
    {
        return $this->container['version_by_lang'];
    }

    /**
     * Sets version_by_lang
     *
     * @param string[] $version_by_lang version_by_lang
     *
     * @return $this
     */
    public function setVersionByLang($version_by_lang)
    {
        $this->container['version_by_lang'] = $version_by_lang;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Emonsite\Models\SiteJsonld
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Emonsite\Models\SiteJsonld $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets add_dt
     *
     * @return int
     */
    public function getAddDt()
    {
        return $this->container['add_dt'];
    }

    /**
     * Sets add_dt
     *
     * @param int $add_dt add_dt
     *
     * @return $this
     */
    public function setAddDt($add_dt)
    {
        $this->container['add_dt'] = $add_dt;

        return $this;
    }

    /**
     * Gets upd_dt
     *
     * @return int
     */
    public function getUpdDt()
    {
        return $this->container['upd_dt'];
    }

    /**
     * Sets upd_dt
     *
     * @param int $upd_dt upd_dt
     *
     * @return $this
     */
    public function setUpdDt($upd_dt)
    {
        $this->container['upd_dt'] = $upd_dt;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets add_user_id
     *
     * @return string
     */
    public function getAddUserId()
    {
        return $this->container['add_user_id'];
    }

    /**
     * Sets add_user_id
     *
     * @param string $add_user_id add_user_id
     *
     * @return $this
     */
    public function setAddUserId($add_user_id)
    {
        $this->container['add_user_id'] = $add_user_id;

        return $this;
    }

    /**
     * Gets upd_user_id
     *
     * @return string
     */
    public function getUpdUserId()
    {
        return $this->container['upd_user_id'];
    }

    /**
     * Sets upd_user_id
     *
     * @param string $upd_user_id upd_user_id
     *
     * @return $this
     */
    public function setUpdUserId($upd_user_id)
    {
        $this->container['upd_user_id'] = $upd_user_id;

        return $this;
    }

    /**
     * Gets trashed
     *
     * @return bool
     */
    public function getTrashed()
    {
        return $this->container['trashed'];
    }

    /**
     * Sets trashed
     *
     * @param bool $trashed trashed
     *
     * @return $this
     */
    public function setTrashed($trashed)
    {
        $this->container['trashed'] = $trashed;

        return $this;
    }

    /**
     * Gets trash_dt
     *
     * @return int
     */
    public function getTrashDt()
    {
        return $this->container['trash_dt'];
    }

    /**
     * Sets trash_dt
     *
     * @param int $trash_dt trash_dt
     *
     * @return $this
     */
    public function setTrashDt($trash_dt)
    {
        $this->container['trash_dt'] = $trash_dt;

        return $this;
    }

    /**
     * Gets trash_user_id
     *
     * @return string
     */
    public function getTrashUserId()
    {
        return $this->container['trash_user_id'];
    }

    /**
     * Sets trash_user_id
     *
     * @param string $trash_user_id trash_user_id
     *
     * @return $this
     */
    public function setTrashUserId($trash_user_id)
    {
        $this->container['trash_user_id'] = $trash_user_id;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published published
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets publish_from
     *
     * @return int
     */
    public function getPublishFrom()
    {
        return $this->container['publish_from'];
    }

    /**
     * Sets publish_from
     *
     * @param int $publish_from Date de publication, passé ou future
     *
     * @return $this
     */
    public function setPublishFrom($publish_from)
    {
        $this->container['publish_from'] = $publish_from;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets aliases
     *
     * @return \Emonsite\Models\PageAliasJsonld[]
     */
    public function getAliases()
    {
        return $this->container['aliases'];
    }

    /**
     * Sets aliases
     *
     * @param \Emonsite\Models\PageAliasJsonld[] $aliases Faire la mapping dans l'entity
     *
     * @return $this
     */
    public function setAliases($aliases)
    {
        $this->container['aliases'] = $aliases;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string[]
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string[] $alias alias
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets block
     *
     * @return AnyOfPageJsonldBlock
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param AnyOfPageJsonldBlock $block FAIRE MAPPING DANS ENTITY
     *
     * @return $this
     */
    public function setBlock($block)
    {
        $this->container['block'] = $block;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
