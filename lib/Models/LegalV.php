<?php
/**
 * LegalV
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * LegalV Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegalV implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LegalV';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legal_mentions' => 'string',
'cgu' => 'string',
'cgv' => 'string',
'retraction' => 'string',
'privacy_policy' => 'string',
'lang' => 'string',
'item' => '\EmonsiteApi\Models\Legal',
'active' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legal_mentions' => null,
'cgu' => null,
'cgv' => null,
'retraction' => null,
'privacy_policy' => null,
'lang' => null,
'item' => null,
'active' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legal_mentions' => 'legalMentions',
'cgu' => 'cgu',
'cgv' => 'cgv',
'retraction' => 'retraction',
'privacy_policy' => 'privacyPolicy',
'lang' => 'lang',
'item' => 'item',
'active' => 'active'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legal_mentions' => 'setLegalMentions',
'cgu' => 'setCgu',
'cgv' => 'setCgv',
'retraction' => 'setRetraction',
'privacy_policy' => 'setPrivacyPolicy',
'lang' => 'setLang',
'item' => 'setItem',
'active' => 'setActive'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legal_mentions' => 'getLegalMentions',
'cgu' => 'getCgu',
'cgv' => 'getCgv',
'retraction' => 'getRetraction',
'privacy_policy' => 'getPrivacyPolicy',
'lang' => 'getLang',
'item' => 'getItem',
'active' => 'getActive'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legal_mentions'] = isset($data['legal_mentions']) ? $data['legal_mentions'] : null;
        $this->container['cgu'] = isset($data['cgu']) ? $data['cgu'] : null;
        $this->container['cgv'] = isset($data['cgv']) ? $data['cgv'] : null;
        $this->container['retraction'] = isset($data['retraction']) ? $data['retraction'] : null;
        $this->container['privacy_policy'] = isset($data['privacy_policy']) ? $data['privacy_policy'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legal_mentions
     *
     * @return string
     */
    public function getLegalMentions()
    {
        return $this->container['legal_mentions'];
    }

    /**
     * Sets legal_mentions
     *
     * @param string $legal_mentions legal_mentions
     *
     * @return $this
     */
    public function setLegalMentions($legal_mentions)
    {
        $this->container['legal_mentions'] = $legal_mentions;

        return $this;
    }

    /**
     * Gets cgu
     *
     * @return string
     */
    public function getCgu()
    {
        return $this->container['cgu'];
    }

    /**
     * Sets cgu
     *
     * @param string $cgu cgu
     *
     * @return $this
     */
    public function setCgu($cgu)
    {
        $this->container['cgu'] = $cgu;

        return $this;
    }

    /**
     * Gets cgv
     *
     * @return string
     */
    public function getCgv()
    {
        return $this->container['cgv'];
    }

    /**
     * Sets cgv
     *
     * @param string $cgv cgv
     *
     * @return $this
     */
    public function setCgv($cgv)
    {
        $this->container['cgv'] = $cgv;

        return $this;
    }

    /**
     * Gets retraction
     *
     * @return string
     */
    public function getRetraction()
    {
        return $this->container['retraction'];
    }

    /**
     * Sets retraction
     *
     * @param string $retraction retraction
     *
     * @return $this
     */
    public function setRetraction($retraction)
    {
        $this->container['retraction'] = $retraction;

        return $this;
    }

    /**
     * Gets privacy_policy
     *
     * @return string
     */
    public function getPrivacyPolicy()
    {
        return $this->container['privacy_policy'];
    }

    /**
     * Sets privacy_policy
     *
     * @param string $privacy_policy privacy_policy
     *
     * @return $this
     */
    public function setPrivacyPolicy($privacy_policy)
    {
        $this->container['privacy_policy'] = $privacy_policy;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang lang
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \EmonsiteApi\Models\Legal
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \EmonsiteApi\Models\Legal $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
