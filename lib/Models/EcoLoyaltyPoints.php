<?php
/**
 * EcoLoyaltyPoints
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Models;

use \ArrayAccess;
use \Emonsite\ObjectSerializer;

/**
 * EcoLoyaltyPoints Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcoLoyaltyPoints implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EcoLoyaltyPoints';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'site' => '\Emonsite\Models\Site',
'active' => 'bool',
'active_topaid_order' => 'bool',
'name' => 'string',
'type' => 'int',
'seuil' => 'float',
'palier' => 'float',
'taux_attribution' => 'int',
'taux_redemption' => 'float',
'show_product' => 'bool',
'start_points' => 'int',
'show_taux_redemption' => 'bool',
'show_taux_redemption_cart' => 'bool',
'access_rights' => 'int',
'categories_rights' => 'int',
'categories' => 'string[]',
'groups' => '\Emonsite\Models\Membergroup[]',
'add_user_id' => 'string',
'upd_user_id' => 'string',
'add_dt' => 'int',
'upd_dt' => 'int',
'created_at' => '\DateTime',
'updated_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'site' => null,
'active' => null,
'active_topaid_order' => null,
'name' => null,
'type' => null,
'seuil' => null,
'palier' => null,
'taux_attribution' => null,
'taux_redemption' => null,
'show_product' => null,
'start_points' => null,
'show_taux_redemption' => null,
'show_taux_redemption_cart' => null,
'access_rights' => null,
'categories_rights' => null,
'categories' => 'iri-reference',
'groups' => null,
'add_user_id' => null,
'upd_user_id' => null,
'add_dt' => null,
'upd_dt' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'site' => 'site',
'active' => 'active',
'active_topaid_order' => 'activeTopaidOrder',
'name' => 'name',
'type' => 'type',
'seuil' => 'seuil',
'palier' => 'palier',
'taux_attribution' => 'tauxAttribution',
'taux_redemption' => 'tauxRedemption',
'show_product' => 'showProduct',
'start_points' => 'startPoints',
'show_taux_redemption' => 'showTauxRedemption',
'show_taux_redemption_cart' => 'showTauxRedemptionCart',
'access_rights' => 'accessRights',
'categories_rights' => 'categoriesRights',
'categories' => 'categories',
'groups' => 'groups',
'add_user_id' => 'addUserId',
'upd_user_id' => 'updUserId',
'add_dt' => 'addDt',
'upd_dt' => 'updDt',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'site' => 'setSite',
'active' => 'setActive',
'active_topaid_order' => 'setActiveTopaidOrder',
'name' => 'setName',
'type' => 'setType',
'seuil' => 'setSeuil',
'palier' => 'setPalier',
'taux_attribution' => 'setTauxAttribution',
'taux_redemption' => 'setTauxRedemption',
'show_product' => 'setShowProduct',
'start_points' => 'setStartPoints',
'show_taux_redemption' => 'setShowTauxRedemption',
'show_taux_redemption_cart' => 'setShowTauxRedemptionCart',
'access_rights' => 'setAccessRights',
'categories_rights' => 'setCategoriesRights',
'categories' => 'setCategories',
'groups' => 'setGroups',
'add_user_id' => 'setAddUserId',
'upd_user_id' => 'setUpdUserId',
'add_dt' => 'setAddDt',
'upd_dt' => 'setUpdDt',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'site' => 'getSite',
'active' => 'getActive',
'active_topaid_order' => 'getActiveTopaidOrder',
'name' => 'getName',
'type' => 'getType',
'seuil' => 'getSeuil',
'palier' => 'getPalier',
'taux_attribution' => 'getTauxAttribution',
'taux_redemption' => 'getTauxRedemption',
'show_product' => 'getShowProduct',
'start_points' => 'getStartPoints',
'show_taux_redemption' => 'getShowTauxRedemption',
'show_taux_redemption_cart' => 'getShowTauxRedemptionCart',
'access_rights' => 'getAccessRights',
'categories_rights' => 'getCategoriesRights',
'categories' => 'getCategories',
'groups' => 'getGroups',
'add_user_id' => 'getAddUserId',
'upd_user_id' => 'getUpdUserId',
'add_dt' => 'getAddDt',
'upd_dt' => 'getUpdDt',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['active_topaid_order'] = isset($data['active_topaid_order']) ? $data['active_topaid_order'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['seuil'] = isset($data['seuil']) ? $data['seuil'] : null;
        $this->container['palier'] = isset($data['palier']) ? $data['palier'] : null;
        $this->container['taux_attribution'] = isset($data['taux_attribution']) ? $data['taux_attribution'] : null;
        $this->container['taux_redemption'] = isset($data['taux_redemption']) ? $data['taux_redemption'] : null;
        $this->container['show_product'] = isset($data['show_product']) ? $data['show_product'] : null;
        $this->container['start_points'] = isset($data['start_points']) ? $data['start_points'] : null;
        $this->container['show_taux_redemption'] = isset($data['show_taux_redemption']) ? $data['show_taux_redemption'] : null;
        $this->container['show_taux_redemption_cart'] = isset($data['show_taux_redemption_cart']) ? $data['show_taux_redemption_cart'] : null;
        $this->container['access_rights'] = isset($data['access_rights']) ? $data['access_rights'] : null;
        $this->container['categories_rights'] = isset($data['categories_rights']) ? $data['categories_rights'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['add_user_id'] = isset($data['add_user_id']) ? $data['add_user_id'] : null;
        $this->container['upd_user_id'] = isset($data['upd_user_id']) ? $data['upd_user_id'] : null;
        $this->container['add_dt'] = isset($data['add_dt']) ? $data['add_dt'] : null;
        $this->container['upd_dt'] = isset($data['upd_dt']) ? $data['upd_dt'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Emonsite\Models\Site
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Emonsite\Models\Site $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets active_topaid_order
     *
     * @return bool
     */
    public function getActiveTopaidOrder()
    {
        return $this->container['active_topaid_order'];
    }

    /**
     * Sets active_topaid_order
     *
     * @param bool $active_topaid_order active_topaid_order
     *
     * @return $this
     */
    public function setActiveTopaidOrder($active_topaid_order)
    {
        $this->container['active_topaid_order'] = $active_topaid_order;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets seuil
     *
     * @return float
     */
    public function getSeuil()
    {
        return $this->container['seuil'];
    }

    /**
     * Sets seuil
     *
     * @param float $seuil seuil
     *
     * @return $this
     */
    public function setSeuil($seuil)
    {
        $this->container['seuil'] = $seuil;

        return $this;
    }

    /**
     * Gets palier
     *
     * @return float
     */
    public function getPalier()
    {
        return $this->container['palier'];
    }

    /**
     * Sets palier
     *
     * @param float $palier palier
     *
     * @return $this
     */
    public function setPalier($palier)
    {
        $this->container['palier'] = $palier;

        return $this;
    }

    /**
     * Gets taux_attribution
     *
     * @return int
     */
    public function getTauxAttribution()
    {
        return $this->container['taux_attribution'];
    }

    /**
     * Sets taux_attribution
     *
     * @param int $taux_attribution taux_attribution
     *
     * @return $this
     */
    public function setTauxAttribution($taux_attribution)
    {
        $this->container['taux_attribution'] = $taux_attribution;

        return $this;
    }

    /**
     * Gets taux_redemption
     *
     * @return float
     */
    public function getTauxRedemption()
    {
        return $this->container['taux_redemption'];
    }

    /**
     * Sets taux_redemption
     *
     * @param float $taux_redemption taux_redemption
     *
     * @return $this
     */
    public function setTauxRedemption($taux_redemption)
    {
        $this->container['taux_redemption'] = $taux_redemption;

        return $this;
    }

    /**
     * Gets show_product
     *
     * @return bool
     */
    public function getShowProduct()
    {
        return $this->container['show_product'];
    }

    /**
     * Sets show_product
     *
     * @param bool $show_product show_product
     *
     * @return $this
     */
    public function setShowProduct($show_product)
    {
        $this->container['show_product'] = $show_product;

        return $this;
    }

    /**
     * Gets start_points
     *
     * @return int
     */
    public function getStartPoints()
    {
        return $this->container['start_points'];
    }

    /**
     * Sets start_points
     *
     * @param int $start_points start_points
     *
     * @return $this
     */
    public function setStartPoints($start_points)
    {
        $this->container['start_points'] = $start_points;

        return $this;
    }

    /**
     * Gets show_taux_redemption
     *
     * @return bool
     */
    public function getShowTauxRedemption()
    {
        return $this->container['show_taux_redemption'];
    }

    /**
     * Sets show_taux_redemption
     *
     * @param bool $show_taux_redemption show_taux_redemption
     *
     * @return $this
     */
    public function setShowTauxRedemption($show_taux_redemption)
    {
        $this->container['show_taux_redemption'] = $show_taux_redemption;

        return $this;
    }

    /**
     * Gets show_taux_redemption_cart
     *
     * @return bool
     */
    public function getShowTauxRedemptionCart()
    {
        return $this->container['show_taux_redemption_cart'];
    }

    /**
     * Sets show_taux_redemption_cart
     *
     * @param bool $show_taux_redemption_cart show_taux_redemption_cart
     *
     * @return $this
     */
    public function setShowTauxRedemptionCart($show_taux_redemption_cart)
    {
        $this->container['show_taux_redemption_cart'] = $show_taux_redemption_cart;

        return $this;
    }

    /**
     * Gets access_rights
     *
     * @return int
     */
    public function getAccessRights()
    {
        return $this->container['access_rights'];
    }

    /**
     * Sets access_rights
     *
     * @param int $access_rights access_rights
     *
     * @return $this
     */
    public function setAccessRights($access_rights)
    {
        $this->container['access_rights'] = $access_rights;

        return $this;
    }

    /**
     * Gets categories_rights
     *
     * @return int
     */
    public function getCategoriesRights()
    {
        return $this->container['categories_rights'];
    }

    /**
     * Sets categories_rights
     *
     * @param int $categories_rights categories_rights
     *
     * @return $this
     */
    public function setCategoriesRights($categories_rights)
    {
        $this->container['categories_rights'] = $categories_rights;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Emonsite\Models\Membergroup[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Emonsite\Models\Membergroup[] $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets add_user_id
     *
     * @return string
     */
    public function getAddUserId()
    {
        return $this->container['add_user_id'];
    }

    /**
     * Sets add_user_id
     *
     * @param string $add_user_id add_user_id
     *
     * @return $this
     */
    public function setAddUserId($add_user_id)
    {
        $this->container['add_user_id'] = $add_user_id;

        return $this;
    }

    /**
     * Gets upd_user_id
     *
     * @return string
     */
    public function getUpdUserId()
    {
        return $this->container['upd_user_id'];
    }

    /**
     * Sets upd_user_id
     *
     * @param string $upd_user_id upd_user_id
     *
     * @return $this
     */
    public function setUpdUserId($upd_user_id)
    {
        $this->container['upd_user_id'] = $upd_user_id;

        return $this;
    }

    /**
     * Gets add_dt
     *
     * @return int
     */
    public function getAddDt()
    {
        return $this->container['add_dt'];
    }

    /**
     * Sets add_dt
     *
     * @param int $add_dt add_dt
     *
     * @return $this
     */
    public function setAddDt($add_dt)
    {
        $this->container['add_dt'] = $add_dt;

        return $this;
    }

    /**
     * Gets upd_dt
     *
     * @return int
     */
    public function getUpdDt()
    {
        return $this->container['upd_dt'];
    }

    /**
     * Sets upd_dt
     *
     * @param int $upd_dt upd_dt
     *
     * @return $this
     */
    public function setUpdDt($upd_dt)
    {
        $this->container['upd_dt'] = $upd_dt;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
