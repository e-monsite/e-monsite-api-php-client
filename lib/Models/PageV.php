<?php
/**
 * PageV
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Models;

use \ArrayAccess;
use \Emonsite\ObjectSerializer;

/**
 * PageV Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PageV implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PageV';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title_in_blocks' => 'bool',
'titlemenu' => 'string',
'lang' => 'string',
'item' => '\Emonsite\Models\Page',
'active' => 'bool',
'seo_uri' => 'string',
'seo_title' => 'string',
'seo_h1' => 'string',
'seo_keywords' => 'string',
'seo_description' => 'string',
'seo_image' => 'string',
'seo_additional_meta' => 'string',
'seo_no_index' => 'bool',
'title' => 'string',
'content' => 'string',
'previewable_content' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title_in_blocks' => null,
'titlemenu' => null,
'lang' => null,
'item' => null,
'active' => null,
'seo_uri' => null,
'seo_title' => null,
'seo_h1' => null,
'seo_keywords' => null,
'seo_description' => null,
'seo_image' => 'iri-reference',
'seo_additional_meta' => null,
'seo_no_index' => null,
'title' => null,
'content' => null,
'previewable_content' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title_in_blocks' => 'titleInBlocks',
'titlemenu' => 'titlemenu',
'lang' => 'lang',
'item' => 'item',
'active' => 'active',
'seo_uri' => 'seoUri',
'seo_title' => 'seoTitle',
'seo_h1' => 'seoH1',
'seo_keywords' => 'seoKeywords',
'seo_description' => 'seoDescription',
'seo_image' => 'seoImage',
'seo_additional_meta' => 'seoAdditionalMeta',
'seo_no_index' => 'seoNoIndex',
'title' => 'title',
'content' => 'content',
'previewable_content' => 'previewableContent'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title_in_blocks' => 'setTitleInBlocks',
'titlemenu' => 'setTitlemenu',
'lang' => 'setLang',
'item' => 'setItem',
'active' => 'setActive',
'seo_uri' => 'setSeoUri',
'seo_title' => 'setSeoTitle',
'seo_h1' => 'setSeoH1',
'seo_keywords' => 'setSeoKeywords',
'seo_description' => 'setSeoDescription',
'seo_image' => 'setSeoImage',
'seo_additional_meta' => 'setSeoAdditionalMeta',
'seo_no_index' => 'setSeoNoIndex',
'title' => 'setTitle',
'content' => 'setContent',
'previewable_content' => 'setPreviewableContent'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title_in_blocks' => 'getTitleInBlocks',
'titlemenu' => 'getTitlemenu',
'lang' => 'getLang',
'item' => 'getItem',
'active' => 'getActive',
'seo_uri' => 'getSeoUri',
'seo_title' => 'getSeoTitle',
'seo_h1' => 'getSeoH1',
'seo_keywords' => 'getSeoKeywords',
'seo_description' => 'getSeoDescription',
'seo_image' => 'getSeoImage',
'seo_additional_meta' => 'getSeoAdditionalMeta',
'seo_no_index' => 'getSeoNoIndex',
'title' => 'getTitle',
'content' => 'getContent',
'previewable_content' => 'getPreviewableContent'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title_in_blocks'] = isset($data['title_in_blocks']) ? $data['title_in_blocks'] : null;
        $this->container['titlemenu'] = isset($data['titlemenu']) ? $data['titlemenu'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['seo_uri'] = isset($data['seo_uri']) ? $data['seo_uri'] : null;
        $this->container['seo_title'] = isset($data['seo_title']) ? $data['seo_title'] : null;
        $this->container['seo_h1'] = isset($data['seo_h1']) ? $data['seo_h1'] : null;
        $this->container['seo_keywords'] = isset($data['seo_keywords']) ? $data['seo_keywords'] : null;
        $this->container['seo_description'] = isset($data['seo_description']) ? $data['seo_description'] : null;
        $this->container['seo_image'] = isset($data['seo_image']) ? $data['seo_image'] : null;
        $this->container['seo_additional_meta'] = isset($data['seo_additional_meta']) ? $data['seo_additional_meta'] : null;
        $this->container['seo_no_index'] = isset($data['seo_no_index']) ? $data['seo_no_index'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['previewable_content'] = isset($data['previewable_content']) ? $data['previewable_content'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title_in_blocks
     *
     * @return bool
     */
    public function getTitleInBlocks()
    {
        return $this->container['title_in_blocks'];
    }

    /**
     * Sets title_in_blocks
     *
     * @param bool $title_in_blocks title_in_blocks
     *
     * @return $this
     */
    public function setTitleInBlocks($title_in_blocks)
    {
        $this->container['title_in_blocks'] = $title_in_blocks;

        return $this;
    }

    /**
     * Gets titlemenu
     *
     * @return string
     */
    public function getTitlemenu()
    {
        return $this->container['titlemenu'];
    }

    /**
     * Sets titlemenu
     *
     * @param string $titlemenu titlemenu
     *
     * @return $this
     */
    public function setTitlemenu($titlemenu)
    {
        $this->container['titlemenu'] = $titlemenu;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang lang
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \Emonsite\Models\Page
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Emonsite\Models\Page $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets seo_uri
     *
     * @return string
     */
    public function getSeoUri()
    {
        return $this->container['seo_uri'];
    }

    /**
     * Sets seo_uri
     *
     * @param string $seo_uri seo_uri
     *
     * @return $this
     */
    public function setSeoUri($seo_uri)
    {
        $this->container['seo_uri'] = $seo_uri;

        return $this;
    }

    /**
     * Gets seo_title
     *
     * @return string
     */
    public function getSeoTitle()
    {
        return $this->container['seo_title'];
    }

    /**
     * Sets seo_title
     *
     * @param string $seo_title seo_title
     *
     * @return $this
     */
    public function setSeoTitle($seo_title)
    {
        $this->container['seo_title'] = $seo_title;

        return $this;
    }

    /**
     * Gets seo_h1
     *
     * @return string
     */
    public function getSeoH1()
    {
        return $this->container['seo_h1'];
    }

    /**
     * Sets seo_h1
     *
     * @param string $seo_h1 seo_h1
     *
     * @return $this
     */
    public function setSeoH1($seo_h1)
    {
        $this->container['seo_h1'] = $seo_h1;

        return $this;
    }

    /**
     * Gets seo_keywords
     *
     * @return string
     */
    public function getSeoKeywords()
    {
        return $this->container['seo_keywords'];
    }

    /**
     * Sets seo_keywords
     *
     * @param string $seo_keywords seo_keywords
     *
     * @return $this
     */
    public function setSeoKeywords($seo_keywords)
    {
        $this->container['seo_keywords'] = $seo_keywords;

        return $this;
    }

    /**
     * Gets seo_description
     *
     * @return string
     */
    public function getSeoDescription()
    {
        return $this->container['seo_description'];
    }

    /**
     * Sets seo_description
     *
     * @param string $seo_description seo_description
     *
     * @return $this
     */
    public function setSeoDescription($seo_description)
    {
        $this->container['seo_description'] = $seo_description;

        return $this;
    }

    /**
     * Gets seo_image
     *
     * @return string
     */
    public function getSeoImage()
    {
        return $this->container['seo_image'];
    }

    /**
     * Sets seo_image
     *
     * @param string $seo_image seo_image
     *
     * @return $this
     */
    public function setSeoImage($seo_image)
    {
        $this->container['seo_image'] = $seo_image;

        return $this;
    }

    /**
     * Gets seo_additional_meta
     *
     * @return string
     */
    public function getSeoAdditionalMeta()
    {
        return $this->container['seo_additional_meta'];
    }

    /**
     * Sets seo_additional_meta
     *
     * @param string $seo_additional_meta seo_additional_meta
     *
     * @return $this
     */
    public function setSeoAdditionalMeta($seo_additional_meta)
    {
        $this->container['seo_additional_meta'] = $seo_additional_meta;

        return $this;
    }

    /**
     * Gets seo_no_index
     *
     * @return bool
     */
    public function getSeoNoIndex()
    {
        return $this->container['seo_no_index'];
    }

    /**
     * Sets seo_no_index
     *
     * @param bool $seo_no_index seo_no_index
     *
     * @return $this
     */
    public function setSeoNoIndex($seo_no_index)
    {
        $this->container['seo_no_index'] = $seo_no_index;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets previewable_content
     *
     * @return string
     */
    public function getPreviewableContent()
    {
        return $this->container['previewable_content'];
    }

    /**
     * Sets previewable_content
     *
     * @param string $previewable_content previewable_content
     *
     * @return $this
     */
    public function setPreviewableContent($previewable_content)
    {
        $this->container['previewable_content'] = $previewable_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
