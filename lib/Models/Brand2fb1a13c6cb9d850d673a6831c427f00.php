<?php
/**
 * Brand2fb1a13c6cb9d850d673a6831c427f00
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * Brand2fb1a13c6cb9d850d673a6831c427f00 Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Brand2fb1a13c6cb9d850d673a6831c427f00 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Brand:2fb1a13c6cb9d850d673a6831c427f00';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'created_at' => '\DateTime',
'technical_domain' => 'string',
'active' => 'bool',
'default_lang' => 'string',
'name' => 'string',
'email' => 'string',
'noreply_email' => 'string',
'country' => 'string',
'directory_edito' => 'string',
'default_timezone' => 'string',
'type' => 'string',
'protocol' => 'string',
'contact_name' => 'string',
'contact_organisation' => 'string',
'contact_address' => 'string',
'login_intro' => 'string',
'credits' => 'float',
'billing_firstname' => 'string',
'billing_lastname' => 'string',
'billing_organisation' => 'string',
'billing_addr1' => 'string',
'billing_addr2' => 'string',
'billing_zipcode' => 'string',
'billing_city' => 'string',
'billing_country' => 'string',
'tva_intra' => 'string',
'google_api_key' => 'string',
'new_user_registration_enabled' => 'bool',
'new_site_creation_enabled' => 'bool',
'brand_domains' => '',
'changelogify_app_id' => 'string',
'hcaptcha' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'created_at' => 'date-time',
'technical_domain' => null,
'active' => null,
'default_lang' => null,
'name' => null,
'email' => null,
'noreply_email' => null,
'country' => null,
'directory_edito' => null,
'default_timezone' => null,
'type' => null,
'protocol' => null,
'contact_name' => null,
'contact_organisation' => null,
'contact_address' => null,
'login_intro' => null,
'credits' => null,
'billing_firstname' => null,
'billing_lastname' => null,
'billing_organisation' => null,
'billing_addr1' => null,
'billing_addr2' => null,
'billing_zipcode' => null,
'billing_city' => null,
'billing_country' => null,
'tva_intra' => null,
'google_api_key' => null,
'new_user_registration_enabled' => null,
'new_site_creation_enabled' => null,
'brand_domains' => null,
'changelogify_app_id' => null,
'hcaptcha' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'created_at' => 'createdAt',
'technical_domain' => 'technicalDomain',
'active' => 'active',
'default_lang' => 'defaultLang',
'name' => 'name',
'email' => 'email',
'noreply_email' => 'noreplyEmail',
'country' => 'country',
'directory_edito' => 'directoryEdito',
'default_timezone' => 'defaultTimezone',
'type' => 'type',
'protocol' => 'protocol',
'contact_name' => 'contactName',
'contact_organisation' => 'contactOrganisation',
'contact_address' => 'contactAddress',
'login_intro' => 'loginIntro',
'credits' => 'credits',
'billing_firstname' => 'billingFirstname',
'billing_lastname' => 'billingLastname',
'billing_organisation' => 'billingOrganisation',
'billing_addr1' => 'billingAddr1',
'billing_addr2' => 'billingAddr2',
'billing_zipcode' => 'billingZipcode',
'billing_city' => 'billingCity',
'billing_country' => 'billingCountry',
'tva_intra' => 'tvaIntra',
'google_api_key' => 'googleApiKey',
'new_user_registration_enabled' => 'newUserRegistrationEnabled',
'new_site_creation_enabled' => 'newSiteCreationEnabled',
'brand_domains' => 'brandDomains',
'changelogify_app_id' => 'changelogifyAppId',
'hcaptcha' => 'hcaptcha'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'created_at' => 'setCreatedAt',
'technical_domain' => 'setTechnicalDomain',
'active' => 'setActive',
'default_lang' => 'setDefaultLang',
'name' => 'setName',
'email' => 'setEmail',
'noreply_email' => 'setNoreplyEmail',
'country' => 'setCountry',
'directory_edito' => 'setDirectoryEdito',
'default_timezone' => 'setDefaultTimezone',
'type' => 'setType',
'protocol' => 'setProtocol',
'contact_name' => 'setContactName',
'contact_organisation' => 'setContactOrganisation',
'contact_address' => 'setContactAddress',
'login_intro' => 'setLoginIntro',
'credits' => 'setCredits',
'billing_firstname' => 'setBillingFirstname',
'billing_lastname' => 'setBillingLastname',
'billing_organisation' => 'setBillingOrganisation',
'billing_addr1' => 'setBillingAddr1',
'billing_addr2' => 'setBillingAddr2',
'billing_zipcode' => 'setBillingZipcode',
'billing_city' => 'setBillingCity',
'billing_country' => 'setBillingCountry',
'tva_intra' => 'setTvaIntra',
'google_api_key' => 'setGoogleApiKey',
'new_user_registration_enabled' => 'setNewUserRegistrationEnabled',
'new_site_creation_enabled' => 'setNewSiteCreationEnabled',
'brand_domains' => 'setBrandDomains',
'changelogify_app_id' => 'setChangelogifyAppId',
'hcaptcha' => 'setHcaptcha'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'created_at' => 'getCreatedAt',
'technical_domain' => 'getTechnicalDomain',
'active' => 'getActive',
'default_lang' => 'getDefaultLang',
'name' => 'getName',
'email' => 'getEmail',
'noreply_email' => 'getNoreplyEmail',
'country' => 'getCountry',
'directory_edito' => 'getDirectoryEdito',
'default_timezone' => 'getDefaultTimezone',
'type' => 'getType',
'protocol' => 'getProtocol',
'contact_name' => 'getContactName',
'contact_organisation' => 'getContactOrganisation',
'contact_address' => 'getContactAddress',
'login_intro' => 'getLoginIntro',
'credits' => 'getCredits',
'billing_firstname' => 'getBillingFirstname',
'billing_lastname' => 'getBillingLastname',
'billing_organisation' => 'getBillingOrganisation',
'billing_addr1' => 'getBillingAddr1',
'billing_addr2' => 'getBillingAddr2',
'billing_zipcode' => 'getBillingZipcode',
'billing_city' => 'getBillingCity',
'billing_country' => 'getBillingCountry',
'tva_intra' => 'getTvaIntra',
'google_api_key' => 'getGoogleApiKey',
'new_user_registration_enabled' => 'getNewUserRegistrationEnabled',
'new_site_creation_enabled' => 'getNewSiteCreationEnabled',
'brand_domains' => 'getBrandDomains',
'changelogify_app_id' => 'getChangelogifyAppId',
'hcaptcha' => 'getHcaptcha'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['technical_domain'] = isset($data['technical_domain']) ? $data['technical_domain'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['default_lang'] = isset($data['default_lang']) ? $data['default_lang'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['noreply_email'] = isset($data['noreply_email']) ? $data['noreply_email'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['directory_edito'] = isset($data['directory_edito']) ? $data['directory_edito'] : null;
        $this->container['default_timezone'] = isset($data['default_timezone']) ? $data['default_timezone'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_organisation'] = isset($data['contact_organisation']) ? $data['contact_organisation'] : null;
        $this->container['contact_address'] = isset($data['contact_address']) ? $data['contact_address'] : null;
        $this->container['login_intro'] = isset($data['login_intro']) ? $data['login_intro'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['billing_firstname'] = isset($data['billing_firstname']) ? $data['billing_firstname'] : null;
        $this->container['billing_lastname'] = isset($data['billing_lastname']) ? $data['billing_lastname'] : null;
        $this->container['billing_organisation'] = isset($data['billing_organisation']) ? $data['billing_organisation'] : null;
        $this->container['billing_addr1'] = isset($data['billing_addr1']) ? $data['billing_addr1'] : null;
        $this->container['billing_addr2'] = isset($data['billing_addr2']) ? $data['billing_addr2'] : null;
        $this->container['billing_zipcode'] = isset($data['billing_zipcode']) ? $data['billing_zipcode'] : null;
        $this->container['billing_city'] = isset($data['billing_city']) ? $data['billing_city'] : null;
        $this->container['billing_country'] = isset($data['billing_country']) ? $data['billing_country'] : null;
        $this->container['tva_intra'] = isset($data['tva_intra']) ? $data['tva_intra'] : null;
        $this->container['google_api_key'] = isset($data['google_api_key']) ? $data['google_api_key'] : null;
        $this->container['new_user_registration_enabled'] = isset($data['new_user_registration_enabled']) ? $data['new_user_registration_enabled'] : null;
        $this->container['new_site_creation_enabled'] = isset($data['new_site_creation_enabled']) ? $data['new_site_creation_enabled'] : null;
        $this->container['brand_domains'] = isset($data['brand_domains']) ? $data['brand_domains'] : null;
        $this->container['changelogify_app_id'] = isset($data['changelogify_app_id']) ? $data['changelogify_app_id'] : null;
        $this->container['hcaptcha'] = isset($data['hcaptcha']) ? $data['hcaptcha'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets technical_domain
     *
     * @return string
     */
    public function getTechnicalDomain()
    {
        return $this->container['technical_domain'];
    }

    /**
     * Sets technical_domain
     *
     * @param string $technical_domain technical_domain
     *
     * @return $this
     */
    public function setTechnicalDomain($technical_domain)
    {
        $this->container['technical_domain'] = $technical_domain;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets default_lang
     *
     * @return string
     */
    public function getDefaultLang()
    {
        return $this->container['default_lang'];
    }

    /**
     * Sets default_lang
     *
     * @param string $default_lang default_lang
     *
     * @return $this
     */
    public function setDefaultLang($default_lang)
    {
        $this->container['default_lang'] = $default_lang;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets noreply_email
     *
     * @return string
     */
    public function getNoreplyEmail()
    {
        return $this->container['noreply_email'];
    }

    /**
     * Sets noreply_email
     *
     * @param string $noreply_email noreply_email
     *
     * @return $this
     */
    public function setNoreplyEmail($noreply_email)
    {
        $this->container['noreply_email'] = $noreply_email;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets directory_edito
     *
     * @return string
     */
    public function getDirectoryEdito()
    {
        return $this->container['directory_edito'];
    }

    /**
     * Sets directory_edito
     *
     * @param string $directory_edito directory_edito
     *
     * @return $this
     */
    public function setDirectoryEdito($directory_edito)
    {
        $this->container['directory_edito'] = $directory_edito;

        return $this;
    }

    /**
     * Gets default_timezone
     *
     * @return string
     */
    public function getDefaultTimezone()
    {
        return $this->container['default_timezone'];
    }

    /**
     * Sets default_timezone
     *
     * @param string $default_timezone default_timezone
     *
     * @return $this
     */
    public function setDefaultTimezone($default_timezone)
    {
        $this->container['default_timezone'] = $default_timezone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name contact_name
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_organisation
     *
     * @return string
     */
    public function getContactOrganisation()
    {
        return $this->container['contact_organisation'];
    }

    /**
     * Sets contact_organisation
     *
     * @param string $contact_organisation contact_organisation
     *
     * @return $this
     */
    public function setContactOrganisation($contact_organisation)
    {
        $this->container['contact_organisation'] = $contact_organisation;

        return $this;
    }

    /**
     * Gets contact_address
     *
     * @return string
     */
    public function getContactAddress()
    {
        return $this->container['contact_address'];
    }

    /**
     * Sets contact_address
     *
     * @param string $contact_address contact_address
     *
     * @return $this
     */
    public function setContactAddress($contact_address)
    {
        $this->container['contact_address'] = $contact_address;

        return $this;
    }

    /**
     * Gets login_intro
     *
     * @return string
     */
    public function getLoginIntro()
    {
        return $this->container['login_intro'];
    }

    /**
     * Sets login_intro
     *
     * @param string $login_intro login_intro
     *
     * @return $this
     */
    public function setLoginIntro($login_intro)
    {
        $this->container['login_intro'] = $login_intro;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return float
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param float $credits credits
     *
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets billing_firstname
     *
     * @return string
     */
    public function getBillingFirstname()
    {
        return $this->container['billing_firstname'];
    }

    /**
     * Sets billing_firstname
     *
     * @param string $billing_firstname billing_firstname
     *
     * @return $this
     */
    public function setBillingFirstname($billing_firstname)
    {
        $this->container['billing_firstname'] = $billing_firstname;

        return $this;
    }

    /**
     * Gets billing_lastname
     *
     * @return string
     */
    public function getBillingLastname()
    {
        return $this->container['billing_lastname'];
    }

    /**
     * Sets billing_lastname
     *
     * @param string $billing_lastname billing_lastname
     *
     * @return $this
     */
    public function setBillingLastname($billing_lastname)
    {
        $this->container['billing_lastname'] = $billing_lastname;

        return $this;
    }

    /**
     * Gets billing_organisation
     *
     * @return string
     */
    public function getBillingOrganisation()
    {
        return $this->container['billing_organisation'];
    }

    /**
     * Sets billing_organisation
     *
     * @param string $billing_organisation billing_organisation
     *
     * @return $this
     */
    public function setBillingOrganisation($billing_organisation)
    {
        $this->container['billing_organisation'] = $billing_organisation;

        return $this;
    }

    /**
     * Gets billing_addr1
     *
     * @return string
     */
    public function getBillingAddr1()
    {
        return $this->container['billing_addr1'];
    }

    /**
     * Sets billing_addr1
     *
     * @param string $billing_addr1 billing_addr1
     *
     * @return $this
     */
    public function setBillingAddr1($billing_addr1)
    {
        $this->container['billing_addr1'] = $billing_addr1;

        return $this;
    }

    /**
     * Gets billing_addr2
     *
     * @return string
     */
    public function getBillingAddr2()
    {
        return $this->container['billing_addr2'];
    }

    /**
     * Sets billing_addr2
     *
     * @param string $billing_addr2 billing_addr2
     *
     * @return $this
     */
    public function setBillingAddr2($billing_addr2)
    {
        $this->container['billing_addr2'] = $billing_addr2;

        return $this;
    }

    /**
     * Gets billing_zipcode
     *
     * @return string
     */
    public function getBillingZipcode()
    {
        return $this->container['billing_zipcode'];
    }

    /**
     * Sets billing_zipcode
     *
     * @param string $billing_zipcode billing_zipcode
     *
     * @return $this
     */
    public function setBillingZipcode($billing_zipcode)
    {
        $this->container['billing_zipcode'] = $billing_zipcode;

        return $this;
    }

    /**
     * Gets billing_city
     *
     * @return string
     */
    public function getBillingCity()
    {
        return $this->container['billing_city'];
    }

    /**
     * Sets billing_city
     *
     * @param string $billing_city billing_city
     *
     * @return $this
     */
    public function setBillingCity($billing_city)
    {
        $this->container['billing_city'] = $billing_city;

        return $this;
    }

    /**
     * Gets billing_country
     *
     * @return string
     */
    public function getBillingCountry()
    {
        return $this->container['billing_country'];
    }

    /**
     * Sets billing_country
     *
     * @param string $billing_country billing_country
     *
     * @return $this
     */
    public function setBillingCountry($billing_country)
    {
        $this->container['billing_country'] = $billing_country;

        return $this;
    }

    /**
     * Gets tva_intra
     *
     * @return string
     */
    public function getTvaIntra()
    {
        return $this->container['tva_intra'];
    }

    /**
     * Sets tva_intra
     *
     * @param string $tva_intra tva_intra
     *
     * @return $this
     */
    public function setTvaIntra($tva_intra)
    {
        $this->container['tva_intra'] = $tva_intra;

        return $this;
    }

    /**
     * Gets google_api_key
     *
     * @return string
     */
    public function getGoogleApiKey()
    {
        return $this->container['google_api_key'];
    }

    /**
     * Sets google_api_key
     *
     * @param string $google_api_key google_api_key
     *
     * @return $this
     */
    public function setGoogleApiKey($google_api_key)
    {
        $this->container['google_api_key'] = $google_api_key;

        return $this;
    }

    /**
     * Gets new_user_registration_enabled
     *
     * @return bool
     */
    public function getNewUserRegistrationEnabled()
    {
        return $this->container['new_user_registration_enabled'];
    }

    /**
     * Sets new_user_registration_enabled
     *
     * @param bool $new_user_registration_enabled new_user_registration_enabled
     *
     * @return $this
     */
    public function setNewUserRegistrationEnabled($new_user_registration_enabled)
    {
        $this->container['new_user_registration_enabled'] = $new_user_registration_enabled;

        return $this;
    }

    /**
     * Gets new_site_creation_enabled
     *
     * @return bool
     */
    public function getNewSiteCreationEnabled()
    {
        return $this->container['new_site_creation_enabled'];
    }

    /**
     * Sets new_site_creation_enabled
     *
     * @param bool $new_site_creation_enabled new_site_creation_enabled
     *
     * @return $this
     */
    public function setNewSiteCreationEnabled($new_site_creation_enabled)
    {
        $this->container['new_site_creation_enabled'] = $new_site_creation_enabled;

        return $this;
    }

    /**
     * Gets brand_domains
     *
     * @return 
     */
    public function getBrandDomains()
    {
        return $this->container['brand_domains'];
    }

    /**
     * Sets brand_domains
     *
     * @param  $brand_domains brand_domains
     *
     * @return $this
     */
    public function setBrandDomains($brand_domains)
    {
        $this->container['brand_domains'] = $brand_domains;

        return $this;
    }

    /**
     * Gets changelogify_app_id
     *
     * @return string
     */
    public function getChangelogifyAppId()
    {
        return $this->container['changelogify_app_id'];
    }

    /**
     * Sets changelogify_app_id
     *
     * @param string $changelogify_app_id changelogify_app_id
     *
     * @return $this
     */
    public function setChangelogifyAppId($changelogify_app_id)
    {
        $this->container['changelogify_app_id'] = $changelogify_app_id;

        return $this;
    }

    /**
     * Gets hcaptcha
     *
     * @return bool
     */
    public function getHcaptcha()
    {
        return $this->container['hcaptcha'];
    }

    /**
     * Sets hcaptcha
     *
     * @param bool $hcaptcha hcaptcha
     *
     * @return $this
     */
    public function setHcaptcha($hcaptcha)
    {
        $this->container['hcaptcha'] = $hcaptcha;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
