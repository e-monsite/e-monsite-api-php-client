<?php
/**
 * User940d105763f3d1a848f991a4d326f00eJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * User940d105763f3d1a848f991a4d326f00eJsonld Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User940d105763f3d1a848f991a4d326f00eJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User:940d105763f3d1a848f991a4d326f00e:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'id' => 'string',
'brand' => '',
'created_at' => '\DateTime',
'add_user_ip' => 'string',
'username' => 'string',
'gender' => 'string',
'email' => 'string',
'shard_id' => 'string',
'name' => 'string',
'first_name' => 'string',
'last_name' => 'string',
'addr_line1' => 'string',
'addr_line2' => 'string',
'zip_code' => 'string',
'city' => 'string',
'country' => 'string',
'tel' => 'string',
'mobile' => 'string',
'group' => 'string',
'deleted' => 'bool',
'email_valid' => 'bool',
'chatbot_enabled' => 'bool',
'avatar_url' => 'string',
'site_users' => '',
'fcm_token' => 'string',
'sessions' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'id' => null,
'brand' => null,
'created_at' => 'date-time',
'add_user_ip' => null,
'username' => null,
'gender' => null,
'email' => null,
'shard_id' => null,
'name' => null,
'first_name' => null,
'last_name' => null,
'addr_line1' => null,
'addr_line2' => null,
'zip_code' => null,
'city' => null,
'country' => null,
'tel' => null,
'mobile' => null,
'group' => null,
'deleted' => null,
'email_valid' => null,
'chatbot_enabled' => null,
'avatar_url' => null,
'site_users' => null,
'fcm_token' => null,
'sessions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'id' => 'id',
'brand' => 'brand',
'created_at' => 'createdAt',
'add_user_ip' => 'addUserIp',
'username' => 'username',
'gender' => 'gender',
'email' => 'email',
'shard_id' => 'shardId',
'name' => 'name',
'first_name' => 'firstName',
'last_name' => 'lastName',
'addr_line1' => 'addrLine1',
'addr_line2' => 'addrLine2',
'zip_code' => 'zipCode',
'city' => 'city',
'country' => 'country',
'tel' => 'tel',
'mobile' => 'mobile',
'group' => 'group',
'deleted' => 'deleted',
'email_valid' => 'emailValid',
'chatbot_enabled' => 'chatbotEnabled',
'avatar_url' => 'avatarUrl',
'site_users' => 'siteUsers',
'fcm_token' => 'fcmToken',
'sessions' => 'sessions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'id' => 'setId',
'brand' => 'setBrand',
'created_at' => 'setCreatedAt',
'add_user_ip' => 'setAddUserIp',
'username' => 'setUsername',
'gender' => 'setGender',
'email' => 'setEmail',
'shard_id' => 'setShardId',
'name' => 'setName',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'addr_line1' => 'setAddrLine1',
'addr_line2' => 'setAddrLine2',
'zip_code' => 'setZipCode',
'city' => 'setCity',
'country' => 'setCountry',
'tel' => 'setTel',
'mobile' => 'setMobile',
'group' => 'setGroup',
'deleted' => 'setDeleted',
'email_valid' => 'setEmailValid',
'chatbot_enabled' => 'setChatbotEnabled',
'avatar_url' => 'setAvatarUrl',
'site_users' => 'setSiteUsers',
'fcm_token' => 'setFcmToken',
'sessions' => 'setSessions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'id' => 'getId',
'brand' => 'getBrand',
'created_at' => 'getCreatedAt',
'add_user_ip' => 'getAddUserIp',
'username' => 'getUsername',
'gender' => 'getGender',
'email' => 'getEmail',
'shard_id' => 'getShardId',
'name' => 'getName',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'addr_line1' => 'getAddrLine1',
'addr_line2' => 'getAddrLine2',
'zip_code' => 'getZipCode',
'city' => 'getCity',
'country' => 'getCountry',
'tel' => 'getTel',
'mobile' => 'getMobile',
'group' => 'getGroup',
'deleted' => 'getDeleted',
'email_valid' => 'getEmailValid',
'chatbot_enabled' => 'getChatbotEnabled',
'avatar_url' => 'getAvatarUrl',
'site_users' => 'getSiteUsers',
'fcm_token' => 'getFcmToken',
'sessions' => 'getSessions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['add_user_ip'] = isset($data['add_user_ip']) ? $data['add_user_ip'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['shard_id'] = isset($data['shard_id']) ? $data['shard_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['addr_line1'] = isset($data['addr_line1']) ? $data['addr_line1'] : null;
        $this->container['addr_line2'] = isset($data['addr_line2']) ? $data['addr_line2'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['tel'] = isset($data['tel']) ? $data['tel'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['email_valid'] = isset($data['email_valid']) ? $data['email_valid'] : null;
        $this->container['chatbot_enabled'] = isset($data['chatbot_enabled']) ? $data['chatbot_enabled'] : null;
        $this->container['avatar_url'] = isset($data['avatar_url']) ? $data['avatar_url'] : null;
        $this->container['site_users'] = isset($data['site_users']) ? $data['site_users'] : null;
        $this->container['fcm_token'] = isset($data['fcm_token']) ? $data['fcm_token'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return 
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param  $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets add_user_ip
     *
     * @return string
     */
    public function getAddUserIp()
    {
        return $this->container['add_user_ip'];
    }

    /**
     * Sets add_user_ip
     *
     * @param string $add_user_ip add_user_ip
     *
     * @return $this
     */
    public function setAddUserIp($add_user_ip)
    {
        $this->container['add_user_ip'] = $add_user_ip;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender male|female
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets shard_id
     *
     * @return string
     */
    public function getShardId()
    {
        return $this->container['shard_id'];
    }

    /**
     * Sets shard_id
     *
     * @param string $shard_id shard_id
     *
     * @return $this
     */
    public function setShardId($shard_id)
    {
        $this->container['shard_id'] = $shard_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets addr_line1
     *
     * @return string
     */
    public function getAddrLine1()
    {
        return $this->container['addr_line1'];
    }

    /**
     * Sets addr_line1
     *
     * @param string $addr_line1 addr_line1
     *
     * @return $this
     */
    public function setAddrLine1($addr_line1)
    {
        $this->container['addr_line1'] = $addr_line1;

        return $this;
    }

    /**
     * Gets addr_line2
     *
     * @return string
     */
    public function getAddrLine2()
    {
        return $this->container['addr_line2'];
    }

    /**
     * Sets addr_line2
     *
     * @param string $addr_line2 addr_line2
     *
     * @return $this
     */
    public function setAddrLine2($addr_line2)
    {
        $this->container['addr_line2'] = $addr_line2;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets tel
     *
     * @return string
     */
    public function getTel()
    {
        return $this->container['tel'];
    }

    /**
     * Sets tel
     *
     * @param string $tel tel
     *
     * @return $this
     */
    public function setTel($tel)
    {
        $this->container['tel'] = $tel;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets email_valid
     *
     * @return bool
     */
    public function getEmailValid()
    {
        return $this->container['email_valid'];
    }

    /**
     * Sets email_valid
     *
     * @param bool $email_valid email_valid
     *
     * @return $this
     */
    public function setEmailValid($email_valid)
    {
        $this->container['email_valid'] = $email_valid;

        return $this;
    }

    /**
     * Gets chatbot_enabled
     *
     * @return bool
     */
    public function getChatbotEnabled()
    {
        return $this->container['chatbot_enabled'];
    }

    /**
     * Sets chatbot_enabled
     *
     * @param bool $chatbot_enabled chatbot_enabled
     *
     * @return $this
     */
    public function setChatbotEnabled($chatbot_enabled)
    {
        $this->container['chatbot_enabled'] = $chatbot_enabled;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string $avatar_url avatar_url
     *
     * @return $this
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets site_users
     *
     * @return 
     */
    public function getSiteUsers()
    {
        return $this->container['site_users'];
    }

    /**
     * Sets site_users
     *
     * @param  $site_users site_users
     *
     * @return $this
     */
    public function setSiteUsers($site_users)
    {
        $this->container['site_users'] = $site_users;

        return $this;
    }

    /**
     * Gets fcm_token
     *
     * @return string
     */
    public function getFcmToken()
    {
        return $this->container['fcm_token'];
    }

    /**
     * Sets fcm_token
     *
     * @param string $fcm_token fcm_token
     *
     * @return $this
     */
    public function setFcmToken($fcm_token)
    {
        $this->container['fcm_token'] = $fcm_token;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return 
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param  $sessions sessions
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
