<?php
/**
 * SiteVJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * SiteVJsonld Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SiteVJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SiteV:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'title' => 'string',
'description' => 'string',
'tagline' => 'string',
'tag_line' => 'string',
'zone_top' => 'string',
'splashscreen_content' => 'string',
'splashscreen_link_text' => 'string',
'not_found_page_title' => 'string',
'dateformat' => 'string',
'breadcrumb' => 'string',
'sitemap' => 'string',
'lang' => 'string',
'item' => '\EmonsiteApi\Models\SiteJsonld',
'active' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'title' => null,
'description' => null,
'tagline' => null,
'tag_line' => null,
'zone_top' => null,
'splashscreen_content' => null,
'splashscreen_link_text' => null,
'not_found_page_title' => null,
'dateformat' => null,
'breadcrumb' => null,
'sitemap' => null,
'lang' => null,
'item' => null,
'active' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'title' => 'title',
'description' => 'description',
'tagline' => 'tagline',
'tag_line' => 'tagLine',
'zone_top' => 'zoneTop',
'splashscreen_content' => 'splashscreenContent',
'splashscreen_link_text' => 'splashscreenLinkText',
'not_found_page_title' => 'notFoundPageTitle',
'dateformat' => 'dateformat',
'breadcrumb' => 'breadcrumb',
'sitemap' => 'sitemap',
'lang' => 'lang',
'item' => 'item',
'active' => 'active'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'title' => 'setTitle',
'description' => 'setDescription',
'tagline' => 'setTagline',
'tag_line' => 'setTagLine',
'zone_top' => 'setZoneTop',
'splashscreen_content' => 'setSplashscreenContent',
'splashscreen_link_text' => 'setSplashscreenLinkText',
'not_found_page_title' => 'setNotFoundPageTitle',
'dateformat' => 'setDateformat',
'breadcrumb' => 'setBreadcrumb',
'sitemap' => 'setSitemap',
'lang' => 'setLang',
'item' => 'setItem',
'active' => 'setActive'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'title' => 'getTitle',
'description' => 'getDescription',
'tagline' => 'getTagline',
'tag_line' => 'getTagLine',
'zone_top' => 'getZoneTop',
'splashscreen_content' => 'getSplashscreenContent',
'splashscreen_link_text' => 'getSplashscreenLinkText',
'not_found_page_title' => 'getNotFoundPageTitle',
'dateformat' => 'getDateformat',
'breadcrumb' => 'getBreadcrumb',
'sitemap' => 'getSitemap',
'lang' => 'getLang',
'item' => 'getItem',
'active' => 'getActive'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tagline'] = isset($data['tagline']) ? $data['tagline'] : null;
        $this->container['tag_line'] = isset($data['tag_line']) ? $data['tag_line'] : null;
        $this->container['zone_top'] = isset($data['zone_top']) ? $data['zone_top'] : null;
        $this->container['splashscreen_content'] = isset($data['splashscreen_content']) ? $data['splashscreen_content'] : null;
        $this->container['splashscreen_link_text'] = isset($data['splashscreen_link_text']) ? $data['splashscreen_link_text'] : null;
        $this->container['not_found_page_title'] = isset($data['not_found_page_title']) ? $data['not_found_page_title'] : null;
        $this->container['dateformat'] = isset($data['dateformat']) ? $data['dateformat'] : null;
        $this->container['breadcrumb'] = isset($data['breadcrumb']) ? $data['breadcrumb'] : null;
        $this->container['sitemap'] = isset($data['sitemap']) ? $data['sitemap'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string
     */
    public function getTagline()
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string $tagline tagline
     *
     * @return $this
     */
    public function setTagline($tagline)
    {
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets tag_line
     *
     * @return string
     */
    public function getTagLine()
    {
        return $this->container['tag_line'];
    }

    /**
     * Sets tag_line
     *
     * @param string $tag_line tag_line
     *
     * @return $this
     */
    public function setTagLine($tag_line)
    {
        $this->container['tag_line'] = $tag_line;

        return $this;
    }

    /**
     * Gets zone_top
     *
     * @return string
     */
    public function getZoneTop()
    {
        return $this->container['zone_top'];
    }

    /**
     * Sets zone_top
     *
     * @param string $zone_top zone_top
     *
     * @return $this
     */
    public function setZoneTop($zone_top)
    {
        $this->container['zone_top'] = $zone_top;

        return $this;
    }

    /**
     * Gets splashscreen_content
     *
     * @return string
     */
    public function getSplashscreenContent()
    {
        return $this->container['splashscreen_content'];
    }

    /**
     * Sets splashscreen_content
     *
     * @param string $splashscreen_content splashscreen_content
     *
     * @return $this
     */
    public function setSplashscreenContent($splashscreen_content)
    {
        $this->container['splashscreen_content'] = $splashscreen_content;

        return $this;
    }

    /**
     * Gets splashscreen_link_text
     *
     * @return string
     */
    public function getSplashscreenLinkText()
    {
        return $this->container['splashscreen_link_text'];
    }

    /**
     * Sets splashscreen_link_text
     *
     * @param string $splashscreen_link_text splashscreen_link_text
     *
     * @return $this
     */
    public function setSplashscreenLinkText($splashscreen_link_text)
    {
        $this->container['splashscreen_link_text'] = $splashscreen_link_text;

        return $this;
    }

    /**
     * Gets not_found_page_title
     *
     * @return string
     */
    public function getNotFoundPageTitle()
    {
        return $this->container['not_found_page_title'];
    }

    /**
     * Sets not_found_page_title
     *
     * @param string $not_found_page_title not_found_page_title
     *
     * @return $this
     */
    public function setNotFoundPageTitle($not_found_page_title)
    {
        $this->container['not_found_page_title'] = $not_found_page_title;

        return $this;
    }

    /**
     * Gets dateformat
     *
     * @return string
     */
    public function getDateformat()
    {
        return $this->container['dateformat'];
    }

    /**
     * Sets dateformat
     *
     * @param string $dateformat dateformat
     *
     * @return $this
     */
    public function setDateformat($dateformat)
    {
        $this->container['dateformat'] = $dateformat;

        return $this;
    }

    /**
     * Gets breadcrumb
     *
     * @return string
     */
    public function getBreadcrumb()
    {
        return $this->container['breadcrumb'];
    }

    /**
     * Sets breadcrumb
     *
     * @param string $breadcrumb breadcrumb
     *
     * @return $this
     */
    public function setBreadcrumb($breadcrumb)
    {
        $this->container['breadcrumb'] = $breadcrumb;

        return $this;
    }

    /**
     * Gets sitemap
     *
     * @return string
     */
    public function getSitemap()
    {
        return $this->container['sitemap'];
    }

    /**
     * Sets sitemap
     *
     * @param string $sitemap sitemap
     *
     * @return $this
     */
    public function setSitemap($sitemap)
    {
        $this->container['sitemap'] = $sitemap;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang lang
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \EmonsiteApi\Models\SiteJsonld
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \EmonsiteApi\Models\SiteJsonld $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
