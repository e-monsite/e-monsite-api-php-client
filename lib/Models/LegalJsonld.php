<?php
/**
 * LegalJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * LegalJsonld Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegalJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Legal:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'legal_mention_active' => 'bool',
'legalform' => 'string',
'headquarter' => 'string',
'capital' => 'string',
'legalname' => 'string',
'boss_legalname' => 'string',
'firstname' => 'string',
'lastname' => 'string',
'address' => 'string',
'country' => 'string',
'phone' => 'string',
'rcs' => 'string',
'cgu_active' => 'bool',
'retraction_active' => 'bool',
'cookie_active' => 'bool',
'privacy_policy_active' => 'bool',
'cookies' => '\EmonsiteApi\Models\LegalCookieJsonld[]',
'custom_cookies' => '\EmonsiteApi\Models\LegalCookieJsonld[]',
'cookie' => '\EmonsiteApi\Models\LegalCookieJsonld[]',
'cgu_page' => 'AnyOfLegalJsonldCguPage',
'cgv_page' => 'AnyOfLegalJsonldCgvPage',
'id' => 'string',
'site' => '\EmonsiteApi\Models\SiteJsonld',
'add_dt' => 'int',
'upd_dt' => 'int',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'add_user_id' => 'string',
'upd_user_id' => 'string',
'versions' => '\EmonsiteApi\Models\LegalVJsonld[]',
'version' => '\EmonsiteApi\Models\VersionInterfaceJsonld[]',
'default_lang' => 'string',
'version_by_lang' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'legal_mention_active' => null,
'legalform' => null,
'headquarter' => null,
'capital' => null,
'legalname' => null,
'boss_legalname' => null,
'firstname' => null,
'lastname' => null,
'address' => null,
'country' => null,
'phone' => null,
'rcs' => null,
'cgu_active' => null,
'retraction_active' => null,
'cookie_active' => null,
'privacy_policy_active' => null,
'cookies' => null,
'custom_cookies' => null,
'cookie' => null,
'cgu_page' => null,
'cgv_page' => null,
'id' => null,
'site' => null,
'add_dt' => null,
'upd_dt' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'add_user_id' => null,
'upd_user_id' => null,
'versions' => null,
'version' => null,
'default_lang' => null,
'version_by_lang' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'legal_mention_active' => 'legalMentionActive',
'legalform' => 'legalform',
'headquarter' => 'headquarter',
'capital' => 'capital',
'legalname' => 'legalname',
'boss_legalname' => 'bossLegalname',
'firstname' => 'firstname',
'lastname' => 'lastname',
'address' => 'address',
'country' => 'country',
'phone' => 'phone',
'rcs' => 'rcs',
'cgu_active' => 'cguActive',
'retraction_active' => 'retractionActive',
'cookie_active' => 'cookieActive',
'privacy_policy_active' => 'privacyPolicyActive',
'cookies' => 'cookies',
'custom_cookies' => 'customCookies',
'cookie' => 'cookie',
'cgu_page' => 'cguPage',
'cgv_page' => 'cgvPage',
'id' => 'id',
'site' => 'site',
'add_dt' => 'addDt',
'upd_dt' => 'updDt',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'add_user_id' => 'addUserId',
'upd_user_id' => 'updUserId',
'versions' => 'versions',
'version' => 'version',
'default_lang' => 'defaultLang',
'version_by_lang' => 'versionByLang'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'legal_mention_active' => 'setLegalMentionActive',
'legalform' => 'setLegalform',
'headquarter' => 'setHeadquarter',
'capital' => 'setCapital',
'legalname' => 'setLegalname',
'boss_legalname' => 'setBossLegalname',
'firstname' => 'setFirstname',
'lastname' => 'setLastname',
'address' => 'setAddress',
'country' => 'setCountry',
'phone' => 'setPhone',
'rcs' => 'setRcs',
'cgu_active' => 'setCguActive',
'retraction_active' => 'setRetractionActive',
'cookie_active' => 'setCookieActive',
'privacy_policy_active' => 'setPrivacyPolicyActive',
'cookies' => 'setCookies',
'custom_cookies' => 'setCustomCookies',
'cookie' => 'setCookie',
'cgu_page' => 'setCguPage',
'cgv_page' => 'setCgvPage',
'id' => 'setId',
'site' => 'setSite',
'add_dt' => 'setAddDt',
'upd_dt' => 'setUpdDt',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'add_user_id' => 'setAddUserId',
'upd_user_id' => 'setUpdUserId',
'versions' => 'setVersions',
'version' => 'setVersion',
'default_lang' => 'setDefaultLang',
'version_by_lang' => 'setVersionByLang'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'legal_mention_active' => 'getLegalMentionActive',
'legalform' => 'getLegalform',
'headquarter' => 'getHeadquarter',
'capital' => 'getCapital',
'legalname' => 'getLegalname',
'boss_legalname' => 'getBossLegalname',
'firstname' => 'getFirstname',
'lastname' => 'getLastname',
'address' => 'getAddress',
'country' => 'getCountry',
'phone' => 'getPhone',
'rcs' => 'getRcs',
'cgu_active' => 'getCguActive',
'retraction_active' => 'getRetractionActive',
'cookie_active' => 'getCookieActive',
'privacy_policy_active' => 'getPrivacyPolicyActive',
'cookies' => 'getCookies',
'custom_cookies' => 'getCustomCookies',
'cookie' => 'getCookie',
'cgu_page' => 'getCguPage',
'cgv_page' => 'getCgvPage',
'id' => 'getId',
'site' => 'getSite',
'add_dt' => 'getAddDt',
'upd_dt' => 'getUpdDt',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'add_user_id' => 'getAddUserId',
'upd_user_id' => 'getUpdUserId',
'versions' => 'getVersions',
'version' => 'getVersion',
'default_lang' => 'getDefaultLang',
'version_by_lang' => 'getVersionByLang'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['legal_mention_active'] = isset($data['legal_mention_active']) ? $data['legal_mention_active'] : null;
        $this->container['legalform'] = isset($data['legalform']) ? $data['legalform'] : null;
        $this->container['headquarter'] = isset($data['headquarter']) ? $data['headquarter'] : null;
        $this->container['capital'] = isset($data['capital']) ? $data['capital'] : null;
        $this->container['legalname'] = isset($data['legalname']) ? $data['legalname'] : null;
        $this->container['boss_legalname'] = isset($data['boss_legalname']) ? $data['boss_legalname'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['rcs'] = isset($data['rcs']) ? $data['rcs'] : null;
        $this->container['cgu_active'] = isset($data['cgu_active']) ? $data['cgu_active'] : null;
        $this->container['retraction_active'] = isset($data['retraction_active']) ? $data['retraction_active'] : null;
        $this->container['cookie_active'] = isset($data['cookie_active']) ? $data['cookie_active'] : null;
        $this->container['privacy_policy_active'] = isset($data['privacy_policy_active']) ? $data['privacy_policy_active'] : null;
        $this->container['cookies'] = isset($data['cookies']) ? $data['cookies'] : null;
        $this->container['custom_cookies'] = isset($data['custom_cookies']) ? $data['custom_cookies'] : null;
        $this->container['cookie'] = isset($data['cookie']) ? $data['cookie'] : null;
        $this->container['cgu_page'] = isset($data['cgu_page']) ? $data['cgu_page'] : null;
        $this->container['cgv_page'] = isset($data['cgv_page']) ? $data['cgv_page'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['add_dt'] = isset($data['add_dt']) ? $data['add_dt'] : null;
        $this->container['upd_dt'] = isset($data['upd_dt']) ? $data['upd_dt'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['add_user_id'] = isset($data['add_user_id']) ? $data['add_user_id'] : null;
        $this->container['upd_user_id'] = isset($data['upd_user_id']) ? $data['upd_user_id'] : null;
        $this->container['versions'] = isset($data['versions']) ? $data['versions'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['default_lang'] = isset($data['default_lang']) ? $data['default_lang'] : null;
        $this->container['version_by_lang'] = isset($data['version_by_lang']) ? $data['version_by_lang'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets legal_mention_active
     *
     * @return bool
     */
    public function getLegalMentionActive()
    {
        return $this->container['legal_mention_active'];
    }

    /**
     * Sets legal_mention_active
     *
     * @param bool $legal_mention_active legal_mention_active
     *
     * @return $this
     */
    public function setLegalMentionActive($legal_mention_active)
    {
        $this->container['legal_mention_active'] = $legal_mention_active;

        return $this;
    }

    /**
     * Gets legalform
     *
     * @return string
     */
    public function getLegalform()
    {
        return $this->container['legalform'];
    }

    /**
     * Sets legalform
     *
     * @param string $legalform TODO enum
     *
     * @return $this
     */
    public function setLegalform($legalform)
    {
        $this->container['legalform'] = $legalform;

        return $this;
    }

    /**
     * Gets headquarter
     *
     * @return string
     */
    public function getHeadquarter()
    {
        return $this->container['headquarter'];
    }

    /**
     * Sets headquarter
     *
     * @param string $headquarter headquarter
     *
     * @return $this
     */
    public function setHeadquarter($headquarter)
    {
        $this->container['headquarter'] = $headquarter;

        return $this;
    }

    /**
     * Gets capital
     *
     * @return string
     */
    public function getCapital()
    {
        return $this->container['capital'];
    }

    /**
     * Sets capital
     *
     * @param string $capital capital
     *
     * @return $this
     */
    public function setCapital($capital)
    {
        $this->container['capital'] = $capital;

        return $this;
    }

    /**
     * Gets legalname
     *
     * @return string
     */
    public function getLegalname()
    {
        return $this->container['legalname'];
    }

    /**
     * Sets legalname
     *
     * @param string $legalname legalname
     *
     * @return $this
     */
    public function setLegalname($legalname)
    {
        $this->container['legalname'] = $legalname;

        return $this;
    }

    /**
     * Gets boss_legalname
     *
     * @return string
     */
    public function getBossLegalname()
    {
        return $this->container['boss_legalname'];
    }

    /**
     * Sets boss_legalname
     *
     * @param string $boss_legalname boss_legalname
     *
     * @return $this
     */
    public function setBossLegalname($boss_legalname)
    {
        $this->container['boss_legalname'] = $boss_legalname;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets rcs
     *
     * @return string
     */
    public function getRcs()
    {
        return $this->container['rcs'];
    }

    /**
     * Sets rcs
     *
     * @param string $rcs rcs
     *
     * @return $this
     */
    public function setRcs($rcs)
    {
        $this->container['rcs'] = $rcs;

        return $this;
    }

    /**
     * Gets cgu_active
     *
     * @return bool
     */
    public function getCguActive()
    {
        return $this->container['cgu_active'];
    }

    /**
     * Sets cgu_active
     *
     * @param bool $cgu_active cgu_active
     *
     * @return $this
     */
    public function setCguActive($cgu_active)
    {
        $this->container['cgu_active'] = $cgu_active;

        return $this;
    }

    /**
     * Gets retraction_active
     *
     * @return bool
     */
    public function getRetractionActive()
    {
        return $this->container['retraction_active'];
    }

    /**
     * Sets retraction_active
     *
     * @param bool $retraction_active retraction_active
     *
     * @return $this
     */
    public function setRetractionActive($retraction_active)
    {
        $this->container['retraction_active'] = $retraction_active;

        return $this;
    }

    /**
     * Gets cookie_active
     *
     * @return bool
     */
    public function getCookieActive()
    {
        return $this->container['cookie_active'];
    }

    /**
     * Sets cookie_active
     *
     * @param bool $cookie_active cookie_active
     *
     * @return $this
     */
    public function setCookieActive($cookie_active)
    {
        $this->container['cookie_active'] = $cookie_active;

        return $this;
    }

    /**
     * Gets privacy_policy_active
     *
     * @return bool
     */
    public function getPrivacyPolicyActive()
    {
        return $this->container['privacy_policy_active'];
    }

    /**
     * Sets privacy_policy_active
     *
     * @param bool $privacy_policy_active privacy_policy_active
     *
     * @return $this
     */
    public function setPrivacyPolicyActive($privacy_policy_active)
    {
        $this->container['privacy_policy_active'] = $privacy_policy_active;

        return $this;
    }

    /**
     * Gets cookies
     *
     * @return \EmonsiteApi\Models\LegalCookieJsonld[]
     */
    public function getCookies()
    {
        return $this->container['cookies'];
    }

    /**
     * Sets cookies
     *
     * @param \EmonsiteApi\Models\LegalCookieJsonld[] $cookies cookies
     *
     * @return $this
     */
    public function setCookies($cookies)
    {
        $this->container['cookies'] = $cookies;

        return $this;
    }

    /**
     * Gets custom_cookies
     *
     * @return \EmonsiteApi\Models\LegalCookieJsonld[]
     */
    public function getCustomCookies()
    {
        return $this->container['custom_cookies'];
    }

    /**
     * Sets custom_cookies
     *
     * @param \EmonsiteApi\Models\LegalCookieJsonld[] $custom_cookies custom_cookies
     *
     * @return $this
     */
    public function setCustomCookies($custom_cookies)
    {
        $this->container['custom_cookies'] = $custom_cookies;

        return $this;
    }

    /**
     * Gets cookie
     *
     * @return \EmonsiteApi\Models\LegalCookieJsonld[]
     */
    public function getCookie()
    {
        return $this->container['cookie'];
    }

    /**
     * Sets cookie
     *
     * @param \EmonsiteApi\Models\LegalCookieJsonld[] $cookie cookie
     *
     * @return $this
     */
    public function setCookie($cookie)
    {
        $this->container['cookie'] = $cookie;

        return $this;
    }

    /**
     * Gets cgu_page
     *
     * @return AnyOfLegalJsonldCguPage
     */
    public function getCguPage()
    {
        return $this->container['cgu_page'];
    }

    /**
     * Sets cgu_page
     *
     * @param AnyOfLegalJsonldCguPage $cgu_page cgu_page
     *
     * @return $this
     */
    public function setCguPage($cgu_page)
    {
        $this->container['cgu_page'] = $cgu_page;

        return $this;
    }

    /**
     * Gets cgv_page
     *
     * @return AnyOfLegalJsonldCgvPage
     */
    public function getCgvPage()
    {
        return $this->container['cgv_page'];
    }

    /**
     * Sets cgv_page
     *
     * @param AnyOfLegalJsonldCgvPage $cgv_page cgv_page
     *
     * @return $this
     */
    public function setCgvPage($cgv_page)
    {
        $this->container['cgv_page'] = $cgv_page;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \EmonsiteApi\Models\SiteJsonld
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \EmonsiteApi\Models\SiteJsonld $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets add_dt
     *
     * @return int
     */
    public function getAddDt()
    {
        return $this->container['add_dt'];
    }

    /**
     * Sets add_dt
     *
     * @param int $add_dt add_dt
     *
     * @return $this
     */
    public function setAddDt($add_dt)
    {
        $this->container['add_dt'] = $add_dt;

        return $this;
    }

    /**
     * Gets upd_dt
     *
     * @return int
     */
    public function getUpdDt()
    {
        return $this->container['upd_dt'];
    }

    /**
     * Sets upd_dt
     *
     * @param int $upd_dt upd_dt
     *
     * @return $this
     */
    public function setUpdDt($upd_dt)
    {
        $this->container['upd_dt'] = $upd_dt;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets add_user_id
     *
     * @return string
     */
    public function getAddUserId()
    {
        return $this->container['add_user_id'];
    }

    /**
     * Sets add_user_id
     *
     * @param string $add_user_id add_user_id
     *
     * @return $this
     */
    public function setAddUserId($add_user_id)
    {
        $this->container['add_user_id'] = $add_user_id;

        return $this;
    }

    /**
     * Gets upd_user_id
     *
     * @return string
     */
    public function getUpdUserId()
    {
        return $this->container['upd_user_id'];
    }

    /**
     * Sets upd_user_id
     *
     * @param string $upd_user_id upd_user_id
     *
     * @return $this
     */
    public function setUpdUserId($upd_user_id)
    {
        $this->container['upd_user_id'] = $upd_user_id;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \EmonsiteApi\Models\LegalVJsonld[]
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \EmonsiteApi\Models\LegalVJsonld[] $versions IMPLEMENTEZ le mapping dans l'entity TODO trouver comment le faire dynamiquement avec un listener doctrine
     *
     * @return $this
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \EmonsiteApi\Models\VersionInterfaceJsonld[]
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \EmonsiteApi\Models\VersionInterfaceJsonld[] $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets default_lang
     *
     * @return string
     */
    public function getDefaultLang()
    {
        return $this->container['default_lang'];
    }

    /**
     * Sets default_lang
     *
     * @param string $default_lang default_lang
     *
     * @return $this
     */
    public function setDefaultLang($default_lang)
    {
        $this->container['default_lang'] = $default_lang;

        return $this;
    }

    /**
     * Gets version_by_lang
     *
     * @return string[]
     */
    public function getVersionByLang()
    {
        return $this->container['version_by_lang'];
    }

    /**
     * Sets version_by_lang
     *
     * @param string[] $version_by_lang version_by_lang
     *
     * @return $this
     */
    public function setVersionByLang($version_by_lang)
    {
        $this->container['version_by_lang'] = $version_by_lang;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
