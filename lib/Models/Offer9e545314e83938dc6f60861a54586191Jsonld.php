<?php
/**
 * Offer9e545314e83938dc6f60861a54586191Jsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * Offer9e545314e83938dc6f60861a54586191Jsonld Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offer9e545314e83938dc6f60861a54586191Jsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer:9e545314e83938dc6f60861a54586191:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'type' => 'string',
'context' => 'string',
'name' => 'string',
'base_purchasing_price' => 'float',
'base_renewal_price' => 'float',
'eur_purchasing_price' => 'float',
'eur_renewal_price' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'type' => null,
'context' => null,
'name' => null,
'base_purchasing_price' => null,
'base_renewal_price' => null,
'eur_purchasing_price' => null,
'eur_renewal_price' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => '@id',
'type' => '@type',
'context' => '@context',
'name' => 'name',
'base_purchasing_price' => 'basePurchasingPrice',
'base_renewal_price' => 'baseRenewalPrice',
'eur_purchasing_price' => 'EURPurchasingPrice',
'eur_renewal_price' => 'EURRenewalPrice'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'type' => 'setType',
'context' => 'setContext',
'name' => 'setName',
'base_purchasing_price' => 'setBasePurchasingPrice',
'base_renewal_price' => 'setBaseRenewalPrice',
'eur_purchasing_price' => 'setEurPurchasingPrice',
'eur_renewal_price' => 'setEurRenewalPrice'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'type' => 'getType',
'context' => 'getContext',
'name' => 'getName',
'base_purchasing_price' => 'getBasePurchasingPrice',
'base_renewal_price' => 'getBaseRenewalPrice',
'eur_purchasing_price' => 'getEurPurchasingPrice',
'eur_renewal_price' => 'getEurRenewalPrice'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['base_purchasing_price'] = isset($data['base_purchasing_price']) ? $data['base_purchasing_price'] : null;
        $this->container['base_renewal_price'] = isset($data['base_renewal_price']) ? $data['base_renewal_price'] : null;
        $this->container['eur_purchasing_price'] = isset($data['eur_purchasing_price']) ? $data['eur_purchasing_price'] : null;
        $this->container['eur_renewal_price'] = isset($data['eur_renewal_price']) ? $data['eur_renewal_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets base_purchasing_price
     *
     * @return float
     */
    public function getBasePurchasingPrice()
    {
        return $this->container['base_purchasing_price'];
    }

    /**
     * Sets base_purchasing_price
     *
     * @param float $base_purchasing_price base_purchasing_price
     *
     * @return $this
     */
    public function setBasePurchasingPrice($base_purchasing_price)
    {
        $this->container['base_purchasing_price'] = $base_purchasing_price;

        return $this;
    }

    /**
     * Gets base_renewal_price
     *
     * @return float
     */
    public function getBaseRenewalPrice()
    {
        return $this->container['base_renewal_price'];
    }

    /**
     * Sets base_renewal_price
     *
     * @param float $base_renewal_price base_renewal_price
     *
     * @return $this
     */
    public function setBaseRenewalPrice($base_renewal_price)
    {
        $this->container['base_renewal_price'] = $base_renewal_price;

        return $this;
    }

    /**
     * Gets eur_purchasing_price
     *
     * @return float
     */
    public function getEurPurchasingPrice()
    {
        return $this->container['eur_purchasing_price'];
    }

    /**
     * Sets eur_purchasing_price
     *
     * @param float $eur_purchasing_price eur_purchasing_price
     *
     * @return $this
     */
    public function setEurPurchasingPrice($eur_purchasing_price)
    {
        $this->container['eur_purchasing_price'] = $eur_purchasing_price;

        return $this;
    }

    /**
     * Gets eur_renewal_price
     *
     * @return float
     */
    public function getEurRenewalPrice()
    {
        return $this->container['eur_renewal_price'];
    }

    /**
     * Sets eur_renewal_price
     *
     * @param float $eur_renewal_price eur_renewal_price
     *
     * @return $this
     */
    public function setEurRenewalPrice($eur_renewal_price)
    {
        $this->container['eur_renewal_price'] = $eur_renewal_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
