<?php
/**
 * BlogPostCfba0aa09261d831c83f1f9969814d18
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Models;

use \ArrayAccess;
use \Emonsite\ObjectSerializer;

/**
 * BlogPostCfba0aa09261d831c83f1f9969814d18 Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BlogPostCfba0aa09261d831c83f1f9969814d18 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BlogPost:cfba0aa09261d831c83f1f9969814d18';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'category' => 'string',
'published' => 'bool',
'publish_from' => '\DateTime',
'publish_to' => '\DateTime',
'is_pinned' => 'bool',
'title' => 'string',
'intro' => 'string',
'content' => 'string',
'site_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'category' => 'iri-reference',
'published' => null,
'publish_from' => 'date-time',
'publish_to' => 'date-time',
'is_pinned' => null,
'title' => null,
'intro' => null,
'content' => null,
'site_url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'category' => 'category',
'published' => 'published',
'publish_from' => 'publishFrom',
'publish_to' => 'publishTo',
'is_pinned' => 'isPinned',
'title' => 'title',
'intro' => 'intro',
'content' => 'content',
'site_url' => 'siteUrl'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'category' => 'setCategory',
'published' => 'setPublished',
'publish_from' => 'setPublishFrom',
'publish_to' => 'setPublishTo',
'is_pinned' => 'setIsPinned',
'title' => 'setTitle',
'intro' => 'setIntro',
'content' => 'setContent',
'site_url' => 'setSiteUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'category' => 'getCategory',
'published' => 'getPublished',
'publish_from' => 'getPublishFrom',
'publish_to' => 'getPublishTo',
'is_pinned' => 'getIsPinned',
'title' => 'getTitle',
'intro' => 'getIntro',
'content' => 'getContent',
'site_url' => 'getSiteUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['publish_from'] = isset($data['publish_from']) ? $data['publish_from'] : null;
        $this->container['publish_to'] = isset($data['publish_to']) ? $data['publish_to'] : null;
        $this->container['is_pinned'] = isset($data['is_pinned']) ? $data['is_pinned'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['intro'] = isset($data['intro']) ? $data['intro'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['site_url'] = isset($data['site_url']) ? $data['site_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published published
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets publish_from
     *
     * @return \DateTime
     */
    public function getPublishFrom()
    {
        return $this->container['publish_from'];
    }

    /**
     * Sets publish_from
     *
     * @param \DateTime $publish_from publish_from
     *
     * @return $this
     */
    public function setPublishFrom($publish_from)
    {
        $this->container['publish_from'] = $publish_from;

        return $this;
    }

    /**
     * Gets publish_to
     *
     * @return \DateTime
     */
    public function getPublishTo()
    {
        return $this->container['publish_to'];
    }

    /**
     * Sets publish_to
     *
     * @param \DateTime $publish_to publish_to
     *
     * @return $this
     */
    public function setPublishTo($publish_to)
    {
        $this->container['publish_to'] = $publish_to;

        return $this;
    }

    /**
     * Gets is_pinned
     *
     * @return bool
     */
    public function getIsPinned()
    {
        return $this->container['is_pinned'];
    }

    /**
     * Sets is_pinned
     *
     * @param bool $is_pinned is_pinned
     *
     * @return $this
     */
    public function setIsPinned($is_pinned)
    {
        $this->container['is_pinned'] = $is_pinned;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string $intro intro
     *
     * @return $this
     */
    public function setIntro($intro)
    {
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets site_url
     *
     * @return string
     */
    public function getSiteUrl()
    {
        return $this->container['site_url'];
    }

    /**
     * Sets site_url
     *
     * @param string $site_url site_url
     *
     * @return $this
     */
    public function setSiteUrl($site_url)
    {
        $this->container['site_url'] = $site_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
