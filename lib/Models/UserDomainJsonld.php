<?php
/**
 * UserDomainJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * UserDomainJsonld Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserDomainJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserDomain:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'mail_server_id' => 'string',
'domain' => 'string',
'auth_code' => 'string',
'registrar' => 'string',
'registration_date' => '\DateTime',
'expiration_date' => '\DateTime',
'service_subscription_date' => '\DateTime',
'service_renewal_date' => '\DateTime',
'service_expiration_date' => '\DateTime',
'registration_dt_b' => '\DateTime',
'expiration_dt_b' => '\DateTime',
'user' => 'string',
'brand' => 'string',
'active' => 'bool',
'status' => 'string',
'nichandle' => 'string',
'name' => 'string',
'firstname' => 'string',
'address' => 'string',
'zip' => 'string',
'city' => 'string',
'country' => 'string',
'phone' => 'string',
'fax' => 'string',
'email' => 'string',
'lang' => 'string',
'organisation' => 'string',
'legalname' => 'string',
'legalnumber' => 'string',
'birthdate' => '\DateTime',
'birthcountry' => 'string',
'birthcity' => 'string',
'legalform' => 'string',
'birthdepartement' => 'string',
'afnicident' => 'string',
'method' => 'string',
'onerror' => 'bool',
'support_comment' => 'string',
'awelty_admin' => 'bool',
'ping_dt' => 'int',
'business' => 'bool',
'autorenew' => 'bool',
'command_id' => 'string',
'zimbra_server' => 'string',
'companynationalidentificationnumber' => 'string',
'nationalidentificationnumber' => 'string',
'vat' => 'string',
'check_auto_renew_after' => '\DateTime',
'domain_errors' => '\EmonsiteApi\Models\UserDomainErrorJsonld[]',
'mail_aliases' => '\EmonsiteApi\Models\UserDomainMailAliasJsonld[]',
'mailboxes' => '\EmonsiteApi\Models\UserDomainMailboxJsonld[]',
'id' => 'string',
'add_dt' => 'int',
'upd_dt' => 'int',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'creator' => 'string',
'updator' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'mail_server_id' => null,
'domain' => null,
'auth_code' => null,
'registrar' => null,
'registration_date' => 'date-time',
'expiration_date' => 'date-time',
'service_subscription_date' => 'date-time',
'service_renewal_date' => 'date-time',
'service_expiration_date' => 'date-time',
'registration_dt_b' => 'date-time',
'expiration_dt_b' => 'date-time',
'user' => 'iri-reference',
'brand' => 'iri-reference',
'active' => null,
'status' => null,
'nichandle' => null,
'name' => null,
'firstname' => null,
'address' => null,
'zip' => null,
'city' => null,
'country' => null,
'phone' => null,
'fax' => null,
'email' => null,
'lang' => null,
'organisation' => null,
'legalname' => null,
'legalnumber' => null,
'birthdate' => 'date-time',
'birthcountry' => null,
'birthcity' => null,
'legalform' => null,
'birthdepartement' => null,
'afnicident' => null,
'method' => null,
'onerror' => null,
'support_comment' => null,
'awelty_admin' => null,
'ping_dt' => null,
'business' => null,
'autorenew' => null,
'command_id' => null,
'zimbra_server' => null,
'companynationalidentificationnumber' => null,
'nationalidentificationnumber' => null,
'vat' => null,
'check_auto_renew_after' => 'date-time',
'domain_errors' => null,
'mail_aliases' => null,
'mailboxes' => null,
'id' => null,
'add_dt' => null,
'upd_dt' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'creator' => 'iri-reference',
'updator' => 'iri-reference'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'mail_server_id' => 'mailServerId',
'domain' => 'domain',
'auth_code' => 'authCode',
'registrar' => 'registrar',
'registration_date' => 'registrationDate',
'expiration_date' => 'expirationDate',
'service_subscription_date' => 'serviceSubscriptionDate',
'service_renewal_date' => 'serviceRenewalDate',
'service_expiration_date' => 'serviceExpirationDate',
'registration_dt_b' => 'registrationDtB',
'expiration_dt_b' => 'expirationDtB',
'user' => 'user',
'brand' => 'brand',
'active' => 'active',
'status' => 'status',
'nichandle' => 'nichandle',
'name' => 'name',
'firstname' => 'firstname',
'address' => 'address',
'zip' => 'zip',
'city' => 'city',
'country' => 'country',
'phone' => 'phone',
'fax' => 'fax',
'email' => 'email',
'lang' => 'lang',
'organisation' => 'organisation',
'legalname' => 'legalname',
'legalnumber' => 'legalnumber',
'birthdate' => 'birthdate',
'birthcountry' => 'birthcountry',
'birthcity' => 'birthcity',
'legalform' => 'legalform',
'birthdepartement' => 'birthdepartement',
'afnicident' => 'afnicident',
'method' => 'method',
'onerror' => 'onerror',
'support_comment' => 'supportComment',
'awelty_admin' => 'aweltyAdmin',
'ping_dt' => 'pingDt',
'business' => 'business',
'autorenew' => 'autorenew',
'command_id' => 'commandId',
'zimbra_server' => 'zimbraServer',
'companynationalidentificationnumber' => 'companynationalidentificationnumber',
'nationalidentificationnumber' => 'nationalidentificationnumber',
'vat' => 'vat',
'check_auto_renew_after' => 'checkAutoRenewAfter',
'domain_errors' => 'domainErrors',
'mail_aliases' => 'mailAliases',
'mailboxes' => 'mailboxes',
'id' => 'id',
'add_dt' => 'addDt',
'upd_dt' => 'updDt',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'creator' => 'creator',
'updator' => 'updator'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'mail_server_id' => 'setMailServerId',
'domain' => 'setDomain',
'auth_code' => 'setAuthCode',
'registrar' => 'setRegistrar',
'registration_date' => 'setRegistrationDate',
'expiration_date' => 'setExpirationDate',
'service_subscription_date' => 'setServiceSubscriptionDate',
'service_renewal_date' => 'setServiceRenewalDate',
'service_expiration_date' => 'setServiceExpirationDate',
'registration_dt_b' => 'setRegistrationDtB',
'expiration_dt_b' => 'setExpirationDtB',
'user' => 'setUser',
'brand' => 'setBrand',
'active' => 'setActive',
'status' => 'setStatus',
'nichandle' => 'setNichandle',
'name' => 'setName',
'firstname' => 'setFirstname',
'address' => 'setAddress',
'zip' => 'setZip',
'city' => 'setCity',
'country' => 'setCountry',
'phone' => 'setPhone',
'fax' => 'setFax',
'email' => 'setEmail',
'lang' => 'setLang',
'organisation' => 'setOrganisation',
'legalname' => 'setLegalname',
'legalnumber' => 'setLegalnumber',
'birthdate' => 'setBirthdate',
'birthcountry' => 'setBirthcountry',
'birthcity' => 'setBirthcity',
'legalform' => 'setLegalform',
'birthdepartement' => 'setBirthdepartement',
'afnicident' => 'setAfnicident',
'method' => 'setMethod',
'onerror' => 'setOnerror',
'support_comment' => 'setSupportComment',
'awelty_admin' => 'setAweltyAdmin',
'ping_dt' => 'setPingDt',
'business' => 'setBusiness',
'autorenew' => 'setAutorenew',
'command_id' => 'setCommandId',
'zimbra_server' => 'setZimbraServer',
'companynationalidentificationnumber' => 'setCompanynationalidentificationnumber',
'nationalidentificationnumber' => 'setNationalidentificationnumber',
'vat' => 'setVat',
'check_auto_renew_after' => 'setCheckAutoRenewAfter',
'domain_errors' => 'setDomainErrors',
'mail_aliases' => 'setMailAliases',
'mailboxes' => 'setMailboxes',
'id' => 'setId',
'add_dt' => 'setAddDt',
'upd_dt' => 'setUpdDt',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'creator' => 'setCreator',
'updator' => 'setUpdator'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'mail_server_id' => 'getMailServerId',
'domain' => 'getDomain',
'auth_code' => 'getAuthCode',
'registrar' => 'getRegistrar',
'registration_date' => 'getRegistrationDate',
'expiration_date' => 'getExpirationDate',
'service_subscription_date' => 'getServiceSubscriptionDate',
'service_renewal_date' => 'getServiceRenewalDate',
'service_expiration_date' => 'getServiceExpirationDate',
'registration_dt_b' => 'getRegistrationDtB',
'expiration_dt_b' => 'getExpirationDtB',
'user' => 'getUser',
'brand' => 'getBrand',
'active' => 'getActive',
'status' => 'getStatus',
'nichandle' => 'getNichandle',
'name' => 'getName',
'firstname' => 'getFirstname',
'address' => 'getAddress',
'zip' => 'getZip',
'city' => 'getCity',
'country' => 'getCountry',
'phone' => 'getPhone',
'fax' => 'getFax',
'email' => 'getEmail',
'lang' => 'getLang',
'organisation' => 'getOrganisation',
'legalname' => 'getLegalname',
'legalnumber' => 'getLegalnumber',
'birthdate' => 'getBirthdate',
'birthcountry' => 'getBirthcountry',
'birthcity' => 'getBirthcity',
'legalform' => 'getLegalform',
'birthdepartement' => 'getBirthdepartement',
'afnicident' => 'getAfnicident',
'method' => 'getMethod',
'onerror' => 'getOnerror',
'support_comment' => 'getSupportComment',
'awelty_admin' => 'getAweltyAdmin',
'ping_dt' => 'getPingDt',
'business' => 'getBusiness',
'autorenew' => 'getAutorenew',
'command_id' => 'getCommandId',
'zimbra_server' => 'getZimbraServer',
'companynationalidentificationnumber' => 'getCompanynationalidentificationnumber',
'nationalidentificationnumber' => 'getNationalidentificationnumber',
'vat' => 'getVat',
'check_auto_renew_after' => 'getCheckAutoRenewAfter',
'domain_errors' => 'getDomainErrors',
'mail_aliases' => 'getMailAliases',
'mailboxes' => 'getMailboxes',
'id' => 'getId',
'add_dt' => 'getAddDt',
'upd_dt' => 'getUpdDt',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'creator' => 'getCreator',
'updator' => 'getUpdator'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['mail_server_id'] = isset($data['mail_server_id']) ? $data['mail_server_id'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['registrar'] = isset($data['registrar']) ? $data['registrar'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['service_subscription_date'] = isset($data['service_subscription_date']) ? $data['service_subscription_date'] : null;
        $this->container['service_renewal_date'] = isset($data['service_renewal_date']) ? $data['service_renewal_date'] : null;
        $this->container['service_expiration_date'] = isset($data['service_expiration_date']) ? $data['service_expiration_date'] : null;
        $this->container['registration_dt_b'] = isset($data['registration_dt_b']) ? $data['registration_dt_b'] : null;
        $this->container['expiration_dt_b'] = isset($data['expiration_dt_b']) ? $data['expiration_dt_b'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['nichandle'] = isset($data['nichandle']) ? $data['nichandle'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['organisation'] = isset($data['organisation']) ? $data['organisation'] : null;
        $this->container['legalname'] = isset($data['legalname']) ? $data['legalname'] : null;
        $this->container['legalnumber'] = isset($data['legalnumber']) ? $data['legalnumber'] : null;
        $this->container['birthdate'] = isset($data['birthdate']) ? $data['birthdate'] : null;
        $this->container['birthcountry'] = isset($data['birthcountry']) ? $data['birthcountry'] : null;
        $this->container['birthcity'] = isset($data['birthcity']) ? $data['birthcity'] : null;
        $this->container['legalform'] = isset($data['legalform']) ? $data['legalform'] : null;
        $this->container['birthdepartement'] = isset($data['birthdepartement']) ? $data['birthdepartement'] : null;
        $this->container['afnicident'] = isset($data['afnicident']) ? $data['afnicident'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['onerror'] = isset($data['onerror']) ? $data['onerror'] : null;
        $this->container['support_comment'] = isset($data['support_comment']) ? $data['support_comment'] : null;
        $this->container['awelty_admin'] = isset($data['awelty_admin']) ? $data['awelty_admin'] : null;
        $this->container['ping_dt'] = isset($data['ping_dt']) ? $data['ping_dt'] : null;
        $this->container['business'] = isset($data['business']) ? $data['business'] : null;
        $this->container['autorenew'] = isset($data['autorenew']) ? $data['autorenew'] : null;
        $this->container['command_id'] = isset($data['command_id']) ? $data['command_id'] : null;
        $this->container['zimbra_server'] = isset($data['zimbra_server']) ? $data['zimbra_server'] : null;
        $this->container['companynationalidentificationnumber'] = isset($data['companynationalidentificationnumber']) ? $data['companynationalidentificationnumber'] : null;
        $this->container['nationalidentificationnumber'] = isset($data['nationalidentificationnumber']) ? $data['nationalidentificationnumber'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['check_auto_renew_after'] = isset($data['check_auto_renew_after']) ? $data['check_auto_renew_after'] : null;
        $this->container['domain_errors'] = isset($data['domain_errors']) ? $data['domain_errors'] : null;
        $this->container['mail_aliases'] = isset($data['mail_aliases']) ? $data['mail_aliases'] : null;
        $this->container['mailboxes'] = isset($data['mailboxes']) ? $data['mailboxes'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['add_dt'] = isset($data['add_dt']) ? $data['add_dt'] : null;
        $this->container['upd_dt'] = isset($data['upd_dt']) ? $data['upd_dt'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['updator'] = isset($data['updator']) ? $data['updator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets mail_server_id
     *
     * @return string
     */
    public function getMailServerId()
    {
        return $this->container['mail_server_id'];
    }

    /**
     * Sets mail_server_id
     *
     * @param string $mail_server_id Can be NULL, \"mailcow_0\" (NULL mean default Zimbra server)
     *
     * @return $this
     */
    public function setMailServerId($mail_server_id)
    {
        $this->container['mail_server_id'] = $mail_server_id;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code auth_code
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets registrar
     *
     * @return string
     */
    public function getRegistrar()
    {
        return $this->container['registrar'];
    }

    /**
     * Sets registrar
     *
     * @param string $registrar registrar
     *
     * @return $this
     */
    public function setRegistrar($registrar)
    {
        $this->container['registrar'] = $registrar;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return \DateTime
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param \DateTime $registration_date registration_date
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets service_subscription_date
     *
     * @return \DateTime
     */
    public function getServiceSubscriptionDate()
    {
        return $this->container['service_subscription_date'];
    }

    /**
     * Sets service_subscription_date
     *
     * @param \DateTime $service_subscription_date service_subscription_date
     *
     * @return $this
     */
    public function setServiceSubscriptionDate($service_subscription_date)
    {
        $this->container['service_subscription_date'] = $service_subscription_date;

        return $this;
    }

    /**
     * Gets service_renewal_date
     *
     * @return \DateTime
     */
    public function getServiceRenewalDate()
    {
        return $this->container['service_renewal_date'];
    }

    /**
     * Sets service_renewal_date
     *
     * @param \DateTime $service_renewal_date service_renewal_date
     *
     * @return $this
     */
    public function setServiceRenewalDate($service_renewal_date)
    {
        $this->container['service_renewal_date'] = $service_renewal_date;

        return $this;
    }

    /**
     * Gets service_expiration_date
     *
     * @return \DateTime
     */
    public function getServiceExpirationDate()
    {
        return $this->container['service_expiration_date'];
    }

    /**
     * Sets service_expiration_date
     *
     * @param \DateTime $service_expiration_date service_expiration_date
     *
     * @return $this
     */
    public function setServiceExpirationDate($service_expiration_date)
    {
        $this->container['service_expiration_date'] = $service_expiration_date;

        return $this;
    }

    /**
     * Gets registration_dt_b
     *
     * @return \DateTime
     */
    public function getRegistrationDtB()
    {
        return $this->container['registration_dt_b'];
    }

    /**
     * Sets registration_dt_b
     *
     * @param \DateTime $registration_dt_b registration_dt_b
     *
     * @return $this
     */
    public function setRegistrationDtB($registration_dt_b)
    {
        $this->container['registration_dt_b'] = $registration_dt_b;

        return $this;
    }

    /**
     * Gets expiration_dt_b
     *
     * @return \DateTime
     */
    public function getExpirationDtB()
    {
        return $this->container['expiration_dt_b'];
    }

    /**
     * Sets expiration_dt_b
     *
     * @param \DateTime $expiration_dt_b expiration_dt_b
     *
     * @return $this
     */
    public function setExpirationDtB($expiration_dt_b)
    {
        $this->container['expiration_dt_b'] = $expiration_dt_b;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets nichandle
     *
     * @return string
     */
    public function getNichandle()
    {
        return $this->container['nichandle'];
    }

    /**
     * Sets nichandle
     *
     * @param string $nichandle nichandle
     *
     * @return $this
     */
    public function setNichandle($nichandle)
    {
        $this->container['nichandle'] = $nichandle;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip zip
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang lang
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return string
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param string $organisation organisation
     *
     * @return $this
     */
    public function setOrganisation($organisation)
    {
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets legalname
     *
     * @return string
     */
    public function getLegalname()
    {
        return $this->container['legalname'];
    }

    /**
     * Sets legalname
     *
     * @param string $legalname legalname
     *
     * @return $this
     */
    public function setLegalname($legalname)
    {
        $this->container['legalname'] = $legalname;

        return $this;
    }

    /**
     * Gets legalnumber
     *
     * @return string
     */
    public function getLegalnumber()
    {
        return $this->container['legalnumber'];
    }

    /**
     * Sets legalnumber
     *
     * @param string $legalnumber legalnumber
     *
     * @return $this
     */
    public function setLegalnumber($legalnumber)
    {
        $this->container['legalnumber'] = $legalnumber;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \DateTime
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \DateTime $birthdate birthdate
     *
     * @return $this
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets birthcountry
     *
     * @return string
     */
    public function getBirthcountry()
    {
        return $this->container['birthcountry'];
    }

    /**
     * Sets birthcountry
     *
     * @param string $birthcountry birthcountry
     *
     * @return $this
     */
    public function setBirthcountry($birthcountry)
    {
        $this->container['birthcountry'] = $birthcountry;

        return $this;
    }

    /**
     * Gets birthcity
     *
     * @return string
     */
    public function getBirthcity()
    {
        return $this->container['birthcity'];
    }

    /**
     * Sets birthcity
     *
     * @param string $birthcity birthcity
     *
     * @return $this
     */
    public function setBirthcity($birthcity)
    {
        $this->container['birthcity'] = $birthcity;

        return $this;
    }

    /**
     * Gets legalform
     *
     * @return string
     */
    public function getLegalform()
    {
        return $this->container['legalform'];
    }

    /**
     * Sets legalform
     *
     * @param string $legalform legalform
     *
     * @return $this
     */
    public function setLegalform($legalform)
    {
        $this->container['legalform'] = $legalform;

        return $this;
    }

    /**
     * Gets birthdepartement
     *
     * @return string
     */
    public function getBirthdepartement()
    {
        return $this->container['birthdepartement'];
    }

    /**
     * Sets birthdepartement
     *
     * @param string $birthdepartement birthdepartement
     *
     * @return $this
     */
    public function setBirthdepartement($birthdepartement)
    {
        $this->container['birthdepartement'] = $birthdepartement;

        return $this;
    }

    /**
     * Gets afnicident
     *
     * @return string
     */
    public function getAfnicident()
    {
        return $this->container['afnicident'];
    }

    /**
     * Sets afnicident
     *
     * @param string $afnicident afnicident
     *
     * @return $this
     */
    public function setAfnicident($afnicident)
    {
        $this->container['afnicident'] = $afnicident;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets onerror
     *
     * @return bool
     */
    public function getOnerror()
    {
        return $this->container['onerror'];
    }

    /**
     * Sets onerror
     *
     * @param bool $onerror onerror
     *
     * @return $this
     */
    public function setOnerror($onerror)
    {
        $this->container['onerror'] = $onerror;

        return $this;
    }

    /**
     * Gets support_comment
     *
     * @return string
     */
    public function getSupportComment()
    {
        return $this->container['support_comment'];
    }

    /**
     * Sets support_comment
     *
     * @param string $support_comment support_comment
     *
     * @return $this
     */
    public function setSupportComment($support_comment)
    {
        $this->container['support_comment'] = $support_comment;

        return $this;
    }

    /**
     * Gets awelty_admin
     *
     * @return bool
     */
    public function getAweltyAdmin()
    {
        return $this->container['awelty_admin'];
    }

    /**
     * Sets awelty_admin
     *
     * @param bool $awelty_admin awelty_admin
     *
     * @return $this
     */
    public function setAweltyAdmin($awelty_admin)
    {
        $this->container['awelty_admin'] = $awelty_admin;

        return $this;
    }

    /**
     * Gets ping_dt
     *
     * @return int
     */
    public function getPingDt()
    {
        return $this->container['ping_dt'];
    }

    /**
     * Sets ping_dt
     *
     * @param int $ping_dt ping_dt
     *
     * @return $this
     */
    public function setPingDt($ping_dt)
    {
        $this->container['ping_dt'] = $ping_dt;

        return $this;
    }

    /**
     * Gets business
     *
     * @return bool
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param bool $business business
     *
     * @return $this
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets autorenew
     *
     * @return bool
     */
    public function getAutorenew()
    {
        return $this->container['autorenew'];
    }

    /**
     * Sets autorenew
     *
     * @param bool $autorenew autorenew
     *
     * @return $this
     */
    public function setAutorenew($autorenew)
    {
        $this->container['autorenew'] = $autorenew;

        return $this;
    }

    /**
     * Gets command_id
     *
     * @return string
     */
    public function getCommandId()
    {
        return $this->container['command_id'];
    }

    /**
     * Sets command_id
     *
     * @param string $command_id command_id
     *
     * @return $this
     */
    public function setCommandId($command_id)
    {
        $this->container['command_id'] = $command_id;

        return $this;
    }

    /**
     * Gets zimbra_server
     *
     * @return string
     */
    public function getZimbraServer()
    {
        return $this->container['zimbra_server'];
    }

    /**
     * Sets zimbra_server
     *
     * @param string $zimbra_server zimbra_server
     *
     * @return $this
     */
    public function setZimbraServer($zimbra_server)
    {
        $this->container['zimbra_server'] = $zimbra_server;

        return $this;
    }

    /**
     * Gets companynationalidentificationnumber
     *
     * @return string
     */
    public function getCompanynationalidentificationnumber()
    {
        return $this->container['companynationalidentificationnumber'];
    }

    /**
     * Sets companynationalidentificationnumber
     *
     * @param string $companynationalidentificationnumber companynationalidentificationnumber
     *
     * @return $this
     */
    public function setCompanynationalidentificationnumber($companynationalidentificationnumber)
    {
        $this->container['companynationalidentificationnumber'] = $companynationalidentificationnumber;

        return $this;
    }

    /**
     * Gets nationalidentificationnumber
     *
     * @return string
     */
    public function getNationalidentificationnumber()
    {
        return $this->container['nationalidentificationnumber'];
    }

    /**
     * Sets nationalidentificationnumber
     *
     * @param string $nationalidentificationnumber nationalidentificationnumber
     *
     * @return $this
     */
    public function setNationalidentificationnumber($nationalidentificationnumber)
    {
        $this->container['nationalidentificationnumber'] = $nationalidentificationnumber;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets check_auto_renew_after
     *
     * @return \DateTime
     */
    public function getCheckAutoRenewAfter()
    {
        return $this->container['check_auto_renew_after'];
    }

    /**
     * Sets check_auto_renew_after
     *
     * @param \DateTime $check_auto_renew_after check_auto_renew_after
     *
     * @return $this
     */
    public function setCheckAutoRenewAfter($check_auto_renew_after)
    {
        $this->container['check_auto_renew_after'] = $check_auto_renew_after;

        return $this;
    }

    /**
     * Gets domain_errors
     *
     * @return \EmonsiteApi\Models\UserDomainErrorJsonld[]
     */
    public function getDomainErrors()
    {
        return $this->container['domain_errors'];
    }

    /**
     * Sets domain_errors
     *
     * @param \EmonsiteApi\Models\UserDomainErrorJsonld[] $domain_errors domain_errors
     *
     * @return $this
     */
    public function setDomainErrors($domain_errors)
    {
        $this->container['domain_errors'] = $domain_errors;

        return $this;
    }

    /**
     * Gets mail_aliases
     *
     * @return \EmonsiteApi\Models\UserDomainMailAliasJsonld[]
     */
    public function getMailAliases()
    {
        return $this->container['mail_aliases'];
    }

    /**
     * Sets mail_aliases
     *
     * @param \EmonsiteApi\Models\UserDomainMailAliasJsonld[] $mail_aliases mail_aliases
     *
     * @return $this
     */
    public function setMailAliases($mail_aliases)
    {
        $this->container['mail_aliases'] = $mail_aliases;

        return $this;
    }

    /**
     * Gets mailboxes
     *
     * @return \EmonsiteApi\Models\UserDomainMailboxJsonld[]
     */
    public function getMailboxes()
    {
        return $this->container['mailboxes'];
    }

    /**
     * Sets mailboxes
     *
     * @param \EmonsiteApi\Models\UserDomainMailboxJsonld[] $mailboxes mailboxes
     *
     * @return $this
     */
    public function setMailboxes($mailboxes)
    {
        $this->container['mailboxes'] = $mailboxes;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets add_dt
     *
     * @return int
     */
    public function getAddDt()
    {
        return $this->container['add_dt'];
    }

    /**
     * Sets add_dt
     *
     * @param int $add_dt add_dt
     *
     * @return $this
     */
    public function setAddDt($add_dt)
    {
        $this->container['add_dt'] = $add_dt;

        return $this;
    }

    /**
     * Gets upd_dt
     *
     * @return int
     */
    public function getUpdDt()
    {
        return $this->container['upd_dt'];
    }

    /**
     * Sets upd_dt
     *
     * @param int $upd_dt upd_dt
     *
     * @return $this
     */
    public function setUpdDt($upd_dt)
    {
        $this->container['upd_dt'] = $upd_dt;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets updator
     *
     * @return string
     */
    public function getUpdator()
    {
        return $this->container['updator'];
    }

    /**
     * Sets updator
     *
     * @param string $updator updator
     *
     * @return $this
     */
    public function setUpdator($updator)
    {
        $this->container['updator'] = $updator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
