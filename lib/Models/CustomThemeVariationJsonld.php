<?php
/**
 * CustomThemeVariationJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Models;

use \ArrayAccess;
use \Emonsite\ObjectSerializer;

/**
 * CustomThemeVariationJsonld Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomThemeVariationJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomThemeVariation:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'site' => '\Emonsite\Models\SiteJsonld',
'theme_id' => 'string',
'variation_id' => 'string',
'active' => 'bool',
'title' => 'string',
'params' => 'string[]',
'css' => 'string',
'cssoverride' => 'string',
'avatar_format' => 'string',
'thumbnail_format' => 'string',
'medium_format' => 'string',
'maxi_format' => 'string',
'id' => 'string',
'add_dt' => 'int',
'upd_dt' => 'int',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'add_user_id' => 'string',
'upd_user_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'site' => null,
'theme_id' => null,
'variation_id' => null,
'active' => null,
'title' => null,
'params' => null,
'css' => null,
'cssoverride' => null,
'avatar_format' => null,
'thumbnail_format' => null,
'medium_format' => null,
'maxi_format' => null,
'id' => null,
'add_dt' => null,
'upd_dt' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'add_user_id' => null,
'upd_user_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'site' => 'site',
'theme_id' => 'themeId',
'variation_id' => 'variationId',
'active' => 'active',
'title' => 'title',
'params' => 'params',
'css' => 'css',
'cssoverride' => 'cssoverride',
'avatar_format' => 'avatarFormat',
'thumbnail_format' => 'thumbnailFormat',
'medium_format' => 'mediumFormat',
'maxi_format' => 'maxiFormat',
'id' => 'id',
'add_dt' => 'addDt',
'upd_dt' => 'updDt',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'add_user_id' => 'addUserId',
'upd_user_id' => 'updUserId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'site' => 'setSite',
'theme_id' => 'setThemeId',
'variation_id' => 'setVariationId',
'active' => 'setActive',
'title' => 'setTitle',
'params' => 'setParams',
'css' => 'setCss',
'cssoverride' => 'setCssoverride',
'avatar_format' => 'setAvatarFormat',
'thumbnail_format' => 'setThumbnailFormat',
'medium_format' => 'setMediumFormat',
'maxi_format' => 'setMaxiFormat',
'id' => 'setId',
'add_dt' => 'setAddDt',
'upd_dt' => 'setUpdDt',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'add_user_id' => 'setAddUserId',
'upd_user_id' => 'setUpdUserId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'site' => 'getSite',
'theme_id' => 'getThemeId',
'variation_id' => 'getVariationId',
'active' => 'getActive',
'title' => 'getTitle',
'params' => 'getParams',
'css' => 'getCss',
'cssoverride' => 'getCssoverride',
'avatar_format' => 'getAvatarFormat',
'thumbnail_format' => 'getThumbnailFormat',
'medium_format' => 'getMediumFormat',
'maxi_format' => 'getMaxiFormat',
'id' => 'getId',
'add_dt' => 'getAddDt',
'upd_dt' => 'getUpdDt',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'add_user_id' => 'getAddUserId',
'upd_user_id' => 'getUpdUserId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['theme_id'] = isset($data['theme_id']) ? $data['theme_id'] : null;
        $this->container['variation_id'] = isset($data['variation_id']) ? $data['variation_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['css'] = isset($data['css']) ? $data['css'] : null;
        $this->container['cssoverride'] = isset($data['cssoverride']) ? $data['cssoverride'] : null;
        $this->container['avatar_format'] = isset($data['avatar_format']) ? $data['avatar_format'] : null;
        $this->container['thumbnail_format'] = isset($data['thumbnail_format']) ? $data['thumbnail_format'] : null;
        $this->container['medium_format'] = isset($data['medium_format']) ? $data['medium_format'] : null;
        $this->container['maxi_format'] = isset($data['maxi_format']) ? $data['maxi_format'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['add_dt'] = isset($data['add_dt']) ? $data['add_dt'] : null;
        $this->container['upd_dt'] = isset($data['upd_dt']) ? $data['upd_dt'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['add_user_id'] = isset($data['add_user_id']) ? $data['add_user_id'] : null;
        $this->container['upd_user_id'] = isset($data['upd_user_id']) ? $data['upd_user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Emonsite\Models\SiteJsonld
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Emonsite\Models\SiteJsonld $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets theme_id
     *
     * @return string
     */
    public function getThemeId()
    {
        return $this->container['theme_id'];
    }

    /**
     * Sets theme_id
     *
     * @param string $theme_id theme_id
     *
     * @return $this
     */
    public function setThemeId($theme_id)
    {
        $this->container['theme_id'] = $theme_id;

        return $this;
    }

    /**
     * Gets variation_id
     *
     * @return string
     */
    public function getVariationId()
    {
        return $this->container['variation_id'];
    }

    /**
     * Sets variation_id
     *
     * @param string $variation_id variation_id
     *
     * @return $this
     */
    public function setVariationId($variation_id)
    {
        $this->container['variation_id'] = $variation_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets params
     *
     * @return string[]
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param string[] $params params
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets css
     *
     * @return string
     */
    public function getCss()
    {
        return $this->container['css'];
    }

    /**
     * Sets css
     *
     * @param string $css css
     *
     * @return $this
     */
    public function setCss($css)
    {
        $this->container['css'] = $css;

        return $this;
    }

    /**
     * Gets cssoverride
     *
     * @return string
     */
    public function getCssoverride()
    {
        return $this->container['cssoverride'];
    }

    /**
     * Sets cssoverride
     *
     * @param string $cssoverride cssoverride
     *
     * @return $this
     */
    public function setCssoverride($cssoverride)
    {
        $this->container['cssoverride'] = $cssoverride;

        return $this;
    }

    /**
     * Gets avatar_format
     *
     * @return string
     */
    public function getAvatarFormat()
    {
        return $this->container['avatar_format'];
    }

    /**
     * Sets avatar_format
     *
     * @param string $avatar_format avatar_format
     *
     * @return $this
     */
    public function setAvatarFormat($avatar_format)
    {
        $this->container['avatar_format'] = $avatar_format;

        return $this;
    }

    /**
     * Gets thumbnail_format
     *
     * @return string
     */
    public function getThumbnailFormat()
    {
        return $this->container['thumbnail_format'];
    }

    /**
     * Sets thumbnail_format
     *
     * @param string $thumbnail_format thumbnail_format
     *
     * @return $this
     */
    public function setThumbnailFormat($thumbnail_format)
    {
        $this->container['thumbnail_format'] = $thumbnail_format;

        return $this;
    }

    /**
     * Gets medium_format
     *
     * @return string
     */
    public function getMediumFormat()
    {
        return $this->container['medium_format'];
    }

    /**
     * Sets medium_format
     *
     * @param string $medium_format medium_format
     *
     * @return $this
     */
    public function setMediumFormat($medium_format)
    {
        $this->container['medium_format'] = $medium_format;

        return $this;
    }

    /**
     * Gets maxi_format
     *
     * @return string
     */
    public function getMaxiFormat()
    {
        return $this->container['maxi_format'];
    }

    /**
     * Sets maxi_format
     *
     * @param string $maxi_format maxi_format
     *
     * @return $this
     */
    public function setMaxiFormat($maxi_format)
    {
        $this->container['maxi_format'] = $maxi_format;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets add_dt
     *
     * @return int
     */
    public function getAddDt()
    {
        return $this->container['add_dt'];
    }

    /**
     * Sets add_dt
     *
     * @param int $add_dt add_dt
     *
     * @return $this
     */
    public function setAddDt($add_dt)
    {
        $this->container['add_dt'] = $add_dt;

        return $this;
    }

    /**
     * Gets upd_dt
     *
     * @return int
     */
    public function getUpdDt()
    {
        return $this->container['upd_dt'];
    }

    /**
     * Sets upd_dt
     *
     * @param int $upd_dt upd_dt
     *
     * @return $this
     */
    public function setUpdDt($upd_dt)
    {
        $this->container['upd_dt'] = $upd_dt;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets add_user_id
     *
     * @return string
     */
    public function getAddUserId()
    {
        return $this->container['add_user_id'];
    }

    /**
     * Sets add_user_id
     *
     * @param string $add_user_id add_user_id
     *
     * @return $this
     */
    public function setAddUserId($add_user_id)
    {
        $this->container['add_user_id'] = $add_user_id;

        return $this;
    }

    /**
     * Gets upd_user_id
     *
     * @return string
     */
    public function getUpdUserId()
    {
        return $this->container['upd_user_id'];
    }

    /**
     * Sets upd_user_id
     *
     * @param string $upd_user_id upd_user_id
     *
     * @return $this
     */
    public function setUpdUserId($upd_user_id)
    {
        $this->container['upd_user_id'] = $upd_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
