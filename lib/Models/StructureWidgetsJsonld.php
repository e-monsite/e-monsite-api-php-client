<?php
/**
 * StructureWidgetsJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Models;

use \ArrayAccess;
use \Emonsite\ObjectSerializer;

/**
 * StructureWidgetsJsonld Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StructureWidgetsJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StructureWidgets:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'structure' => 'AnyOfStructureWidgetsJsonldStructure',
'add_dt' => 'int',
'add_user_id' => 'string',
'widget_id' => 'string',
'widget_variant' => 'string',
'zone_number' => 'int',
'zone_codename' => 'string',
'zone_type' => 'string',
'ordering' => 'int',
'active' => 'bool',
'css_class' => 'string',
'css_id' => 'string',
'menu_id' => 'string',
'id' => 'string',
'site' => '\Emonsite\Models\SiteJsonld',
'versions' => '\Emonsite\Models\StructureWidgetsVJsonld[]',
'version' => '\Emonsite\Models\VersionInterfaceJsonld[]',
'default_lang' => 'string',
'version_by_lang' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'structure' => null,
'add_dt' => null,
'add_user_id' => null,
'widget_id' => null,
'widget_variant' => null,
'zone_number' => null,
'zone_codename' => null,
'zone_type' => null,
'ordering' => null,
'active' => null,
'css_class' => null,
'css_id' => null,
'menu_id' => null,
'id' => null,
'site' => null,
'versions' => null,
'version' => null,
'default_lang' => null,
'version_by_lang' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'structure' => 'structure',
'add_dt' => 'addDt',
'add_user_id' => 'addUserId',
'widget_id' => 'widgetId',
'widget_variant' => 'widgetVariant',
'zone_number' => 'zoneNumber',
'zone_codename' => 'zoneCodename',
'zone_type' => 'zoneType',
'ordering' => 'ordering',
'active' => 'active',
'css_class' => 'cssClass',
'css_id' => 'cssId',
'menu_id' => 'menuId',
'id' => 'id',
'site' => 'site',
'versions' => 'versions',
'version' => 'version',
'default_lang' => 'defaultLang',
'version_by_lang' => 'versionByLang'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'structure' => 'setStructure',
'add_dt' => 'setAddDt',
'add_user_id' => 'setAddUserId',
'widget_id' => 'setWidgetId',
'widget_variant' => 'setWidgetVariant',
'zone_number' => 'setZoneNumber',
'zone_codename' => 'setZoneCodename',
'zone_type' => 'setZoneType',
'ordering' => 'setOrdering',
'active' => 'setActive',
'css_class' => 'setCssClass',
'css_id' => 'setCssId',
'menu_id' => 'setMenuId',
'id' => 'setId',
'site' => 'setSite',
'versions' => 'setVersions',
'version' => 'setVersion',
'default_lang' => 'setDefaultLang',
'version_by_lang' => 'setVersionByLang'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'structure' => 'getStructure',
'add_dt' => 'getAddDt',
'add_user_id' => 'getAddUserId',
'widget_id' => 'getWidgetId',
'widget_variant' => 'getWidgetVariant',
'zone_number' => 'getZoneNumber',
'zone_codename' => 'getZoneCodename',
'zone_type' => 'getZoneType',
'ordering' => 'getOrdering',
'active' => 'getActive',
'css_class' => 'getCssClass',
'css_id' => 'getCssId',
'menu_id' => 'getMenuId',
'id' => 'getId',
'site' => 'getSite',
'versions' => 'getVersions',
'version' => 'getVersion',
'default_lang' => 'getDefaultLang',
'version_by_lang' => 'getVersionByLang'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['structure'] = isset($data['structure']) ? $data['structure'] : null;
        $this->container['add_dt'] = isset($data['add_dt']) ? $data['add_dt'] : null;
        $this->container['add_user_id'] = isset($data['add_user_id']) ? $data['add_user_id'] : null;
        $this->container['widget_id'] = isset($data['widget_id']) ? $data['widget_id'] : null;
        $this->container['widget_variant'] = isset($data['widget_variant']) ? $data['widget_variant'] : null;
        $this->container['zone_number'] = isset($data['zone_number']) ? $data['zone_number'] : null;
        $this->container['zone_codename'] = isset($data['zone_codename']) ? $data['zone_codename'] : null;
        $this->container['zone_type'] = isset($data['zone_type']) ? $data['zone_type'] : null;
        $this->container['ordering'] = isset($data['ordering']) ? $data['ordering'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['css_class'] = isset($data['css_class']) ? $data['css_class'] : null;
        $this->container['css_id'] = isset($data['css_id']) ? $data['css_id'] : null;
        $this->container['menu_id'] = isset($data['menu_id']) ? $data['menu_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['versions'] = isset($data['versions']) ? $data['versions'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['default_lang'] = isset($data['default_lang']) ? $data['default_lang'] : null;
        $this->container['version_by_lang'] = isset($data['version_by_lang']) ? $data['version_by_lang'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets structure
     *
     * @return AnyOfStructureWidgetsJsonldStructure
     */
    public function getStructure()
    {
        return $this->container['structure'];
    }

    /**
     * Sets structure
     *
     * @param AnyOfStructureWidgetsJsonldStructure $structure structure
     *
     * @return $this
     */
    public function setStructure($structure)
    {
        $this->container['structure'] = $structure;

        return $this;
    }

    /**
     * Gets add_dt
     *
     * @return int
     */
    public function getAddDt()
    {
        return $this->container['add_dt'];
    }

    /**
     * Sets add_dt
     *
     * @param int $add_dt add_dt
     *
     * @return $this
     */
    public function setAddDt($add_dt)
    {
        $this->container['add_dt'] = $add_dt;

        return $this;
    }

    /**
     * Gets add_user_id
     *
     * @return string
     */
    public function getAddUserId()
    {
        return $this->container['add_user_id'];
    }

    /**
     * Sets add_user_id
     *
     * @param string $add_user_id add_user_id
     *
     * @return $this
     */
    public function setAddUserId($add_user_id)
    {
        $this->container['add_user_id'] = $add_user_id;

        return $this;
    }

    /**
     * Gets widget_id
     *
     * @return string
     */
    public function getWidgetId()
    {
        return $this->container['widget_id'];
    }

    /**
     * Sets widget_id
     *
     * @param string $widget_id widget_id
     *
     * @return $this
     */
    public function setWidgetId($widget_id)
    {
        $this->container['widget_id'] = $widget_id;

        return $this;
    }

    /**
     * Gets widget_variant
     *
     * @return string
     */
    public function getWidgetVariant()
    {
        return $this->container['widget_variant'];
    }

    /**
     * Sets widget_variant
     *
     * @param string $widget_variant widget_variant
     *
     * @return $this
     */
    public function setWidgetVariant($widget_variant)
    {
        $this->container['widget_variant'] = $widget_variant;

        return $this;
    }

    /**
     * Gets zone_number
     *
     * @return int
     */
    public function getZoneNumber()
    {
        return $this->container['zone_number'];
    }

    /**
     * Sets zone_number
     *
     * @param int $zone_number zone_number
     *
     * @return $this
     */
    public function setZoneNumber($zone_number)
    {
        $this->container['zone_number'] = $zone_number;

        return $this;
    }

    /**
     * Gets zone_codename
     *
     * @return string
     */
    public function getZoneCodename()
    {
        return $this->container['zone_codename'];
    }

    /**
     * Sets zone_codename
     *
     * @param string $zone_codename zone_codename
     *
     * @return $this
     */
    public function setZoneCodename($zone_codename)
    {
        $this->container['zone_codename'] = $zone_codename;

        return $this;
    }

    /**
     * Gets zone_type
     *
     * @return string
     */
    public function getZoneType()
    {
        return $this->container['zone_type'];
    }

    /**
     * Sets zone_type
     *
     * @param string $zone_type TODO enum
     *
     * @return $this
     */
    public function setZoneType($zone_type)
    {
        $this->container['zone_type'] = $zone_type;

        return $this;
    }

    /**
     * Gets ordering
     *
     * @return int
     */
    public function getOrdering()
    {
        return $this->container['ordering'];
    }

    /**
     * Sets ordering
     *
     * @param int $ordering ordering
     *
     * @return $this
     */
    public function setOrdering($ordering)
    {
        $this->container['ordering'] = $ordering;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets css_class
     *
     * @return string
     */
    public function getCssClass()
    {
        return $this->container['css_class'];
    }

    /**
     * Sets css_class
     *
     * @param string $css_class css_class
     *
     * @return $this
     */
    public function setCssClass($css_class)
    {
        $this->container['css_class'] = $css_class;

        return $this;
    }

    /**
     * Gets css_id
     *
     * @return string
     */
    public function getCssId()
    {
        return $this->container['css_id'];
    }

    /**
     * Sets css_id
     *
     * @param string $css_id css_id
     *
     * @return $this
     */
    public function setCssId($css_id)
    {
        $this->container['css_id'] = $css_id;

        return $this;
    }

    /**
     * Gets menu_id
     *
     * @return string
     */
    public function getMenuId()
    {
        return $this->container['menu_id'];
    }

    /**
     * Sets menu_id
     *
     * @param string $menu_id menu_id
     *
     * @return $this
     */
    public function setMenuId($menu_id)
    {
        $this->container['menu_id'] = $menu_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Emonsite\Models\SiteJsonld
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Emonsite\Models\SiteJsonld $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return \Emonsite\Models\StructureWidgetsVJsonld[]
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param \Emonsite\Models\StructureWidgetsVJsonld[] $versions IMPLEMENTEZ le mapping dans l'entity TODO trouver comment le faire dynamiquement avec un listener doctrine
     *
     * @return $this
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \Emonsite\Models\VersionInterfaceJsonld[]
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \Emonsite\Models\VersionInterfaceJsonld[] $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets default_lang
     *
     * @return string
     */
    public function getDefaultLang()
    {
        return $this->container['default_lang'];
    }

    /**
     * Sets default_lang
     *
     * @param string $default_lang default_lang
     *
     * @return $this
     */
    public function setDefaultLang($default_lang)
    {
        $this->container['default_lang'] = $default_lang;

        return $this;
    }

    /**
     * Gets version_by_lang
     *
     * @return string[]
     */
    public function getVersionByLang()
    {
        return $this->container['version_by_lang'];
    }

    /**
     * Sets version_by_lang
     *
     * @param string[] $version_by_lang version_by_lang
     *
     * @return $this
     */
    public function setVersionByLang($version_by_lang)
    {
        $this->container['version_by_lang'] = $version_by_lang;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
