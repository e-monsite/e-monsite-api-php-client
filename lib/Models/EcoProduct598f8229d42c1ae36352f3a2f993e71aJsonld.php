<?php
/**
 * EcoProduct598f8229d42c1ae36352f3a2f993e71aJsonld
 *
 * PHP version 5
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EmonsiteApi\Models;

use \ArrayAccess;
use \EmonsiteApi\ObjectSerializer;

/**
 * EcoProduct598f8229d42c1ae36352f3a2f993e71aJsonld Class Doc Comment
 *
 * @category Class
 * @package  EmonsiteApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcoProduct598f8229d42c1ae36352f3a2f993e71aJsonld implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EcoProduct:598f8229d42c1ae36352f3a2f993e71a:jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'id' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'name' => 'string',
'trashed' => 'bool',
'category' => 'string',
'published' => 'bool',
'publish_from' => '\DateTime',
'supplier' => 'string',
'manufacturer' => 'string',
'tax' => 'string',
'reference' => 'string',
'supplier_reference' => 'string',
'ean13' => 'string',
'quantity' => 'int',
'num_sales' => 'int',
'out_of_stock' => 'string',
'wholesale_price' => 'float',
'price' => 'float',
'ecotax' => 'float',
'has_reduction' => 'bool',
'weight' => 'float',
'price_per_kilo' => 'float',
'price_per_liter' => 'float',
'price_per_unit' => 'float',
'condition' => 'string',
'dl_product' => 'bool',
'dl_filepath' => 'string',
'default_picture' => 'string',
'pictures' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'id' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'name' => null,
'trashed' => null,
'category' => 'iri-reference',
'published' => null,
'publish_from' => 'date-time',
'supplier' => 'iri-reference',
'manufacturer' => 'iri-reference',
'tax' => 'iri-reference',
'reference' => null,
'supplier_reference' => null,
'ean13' => null,
'quantity' => null,
'num_sales' => null,
'out_of_stock' => null,
'wholesale_price' => null,
'price' => null,
'ecotax' => null,
'has_reduction' => null,
'weight' => null,
'price_per_kilo' => null,
'price_per_liter' => null,
'price_per_unit' => null,
'condition' => null,
'dl_product' => null,
'dl_filepath' => null,
'default_picture' => 'iri-reference',
'pictures' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'id' => 'id',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'name' => 'name',
'trashed' => 'trashed',
'category' => 'category',
'published' => 'published',
'publish_from' => 'publishFrom',
'supplier' => 'supplier',
'manufacturer' => 'manufacturer',
'tax' => 'tax',
'reference' => 'reference',
'supplier_reference' => 'supplierReference',
'ean13' => 'ean13',
'quantity' => 'quantity',
'num_sales' => 'numSales',
'out_of_stock' => 'outOfStock',
'wholesale_price' => 'wholesalePrice',
'price' => 'price',
'ecotax' => 'ecotax',
'has_reduction' => 'hasReduction',
'weight' => 'weight',
'price_per_kilo' => 'pricePerKilo',
'price_per_liter' => 'pricePerLiter',
'price_per_unit' => 'pricePerUnit',
'condition' => 'condition',
'dl_product' => 'dlProduct',
'dl_filepath' => 'dlFilepath',
'default_picture' => 'defaultPicture',
'pictures' => 'pictures'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'id' => 'setId',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'name' => 'setName',
'trashed' => 'setTrashed',
'category' => 'setCategory',
'published' => 'setPublished',
'publish_from' => 'setPublishFrom',
'supplier' => 'setSupplier',
'manufacturer' => 'setManufacturer',
'tax' => 'setTax',
'reference' => 'setReference',
'supplier_reference' => 'setSupplierReference',
'ean13' => 'setEan13',
'quantity' => 'setQuantity',
'num_sales' => 'setNumSales',
'out_of_stock' => 'setOutOfStock',
'wholesale_price' => 'setWholesalePrice',
'price' => 'setPrice',
'ecotax' => 'setEcotax',
'has_reduction' => 'setHasReduction',
'weight' => 'setWeight',
'price_per_kilo' => 'setPricePerKilo',
'price_per_liter' => 'setPricePerLiter',
'price_per_unit' => 'setPricePerUnit',
'condition' => 'setCondition',
'dl_product' => 'setDlProduct',
'dl_filepath' => 'setDlFilepath',
'default_picture' => 'setDefaultPicture',
'pictures' => 'setPictures'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'id' => 'getId',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'name' => 'getName',
'trashed' => 'getTrashed',
'category' => 'getCategory',
'published' => 'getPublished',
'publish_from' => 'getPublishFrom',
'supplier' => 'getSupplier',
'manufacturer' => 'getManufacturer',
'tax' => 'getTax',
'reference' => 'getReference',
'supplier_reference' => 'getSupplierReference',
'ean13' => 'getEan13',
'quantity' => 'getQuantity',
'num_sales' => 'getNumSales',
'out_of_stock' => 'getOutOfStock',
'wholesale_price' => 'getWholesalePrice',
'price' => 'getPrice',
'ecotax' => 'getEcotax',
'has_reduction' => 'getHasReduction',
'weight' => 'getWeight',
'price_per_kilo' => 'getPricePerKilo',
'price_per_liter' => 'getPricePerLiter',
'price_per_unit' => 'getPricePerUnit',
'condition' => 'getCondition',
'dl_product' => 'getDlProduct',
'dl_filepath' => 'getDlFilepath',
'default_picture' => 'getDefaultPicture',
'pictures' => 'getPictures'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['trashed'] = isset($data['trashed']) ? $data['trashed'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['publish_from'] = isset($data['publish_from']) ? $data['publish_from'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['supplier_reference'] = isset($data['supplier_reference']) ? $data['supplier_reference'] : null;
        $this->container['ean13'] = isset($data['ean13']) ? $data['ean13'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['num_sales'] = isset($data['num_sales']) ? $data['num_sales'] : null;
        $this->container['out_of_stock'] = isset($data['out_of_stock']) ? $data['out_of_stock'] : null;
        $this->container['wholesale_price'] = isset($data['wholesale_price']) ? $data['wholesale_price'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['ecotax'] = isset($data['ecotax']) ? $data['ecotax'] : null;
        $this->container['has_reduction'] = isset($data['has_reduction']) ? $data['has_reduction'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['price_per_kilo'] = isset($data['price_per_kilo']) ? $data['price_per_kilo'] : null;
        $this->container['price_per_liter'] = isset($data['price_per_liter']) ? $data['price_per_liter'] : null;
        $this->container['price_per_unit'] = isset($data['price_per_unit']) ? $data['price_per_unit'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['dl_product'] = isset($data['dl_product']) ? $data['dl_product'] : null;
        $this->container['dl_filepath'] = isset($data['dl_filepath']) ? $data['dl_filepath'] : null;
        $this->container['default_picture'] = isset($data['default_picture']) ? $data['default_picture'] : null;
        $this->container['pictures'] = isset($data['pictures']) ? $data['pictures'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trashed
     *
     * @return bool
     */
    public function getTrashed()
    {
        return $this->container['trashed'];
    }

    /**
     * Sets trashed
     *
     * @param bool $trashed trashed
     *
     * @return $this
     */
    public function setTrashed($trashed)
    {
        $this->container['trashed'] = $trashed;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published published
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets publish_from
     *
     * @return \DateTime
     */
    public function getPublishFrom()
    {
        return $this->container['publish_from'];
    }

    /**
     * Sets publish_from
     *
     * @param \DateTime $publish_from publish_from
     *
     * @return $this
     */
    public function setPublishFrom($publish_from)
    {
        $this->container['publish_from'] = $publish_from;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string $supplier supplier
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets supplier_reference
     *
     * @return string
     */
    public function getSupplierReference()
    {
        return $this->container['supplier_reference'];
    }

    /**
     * Sets supplier_reference
     *
     * @param string $supplier_reference supplier_reference
     *
     * @return $this
     */
    public function setSupplierReference($supplier_reference)
    {
        $this->container['supplier_reference'] = $supplier_reference;

        return $this;
    }

    /**
     * Gets ean13
     *
     * @return string
     */
    public function getEan13()
    {
        return $this->container['ean13'];
    }

    /**
     * Sets ean13
     *
     * @param string $ean13 ean13
     *
     * @return $this
     */
    public function setEan13($ean13)
    {
        $this->container['ean13'] = $ean13;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets num_sales
     *
     * @return int
     */
    public function getNumSales()
    {
        return $this->container['num_sales'];
    }

    /**
     * Sets num_sales
     *
     * @param int $num_sales num_sales
     *
     * @return $this
     */
    public function setNumSales($num_sales)
    {
        $this->container['num_sales'] = $num_sales;

        return $this;
    }

    /**
     * Gets out_of_stock
     *
     * @return string
     */
    public function getOutOfStock()
    {
        return $this->container['out_of_stock'];
    }

    /**
     * Sets out_of_stock
     *
     * @param string $out_of_stock out_of_stock
     *
     * @return $this
     */
    public function setOutOfStock($out_of_stock)
    {
        $this->container['out_of_stock'] = $out_of_stock;

        return $this;
    }

    /**
     * Gets wholesale_price
     *
     * @return float
     */
    public function getWholesalePrice()
    {
        return $this->container['wholesale_price'];
    }

    /**
     * Sets wholesale_price
     *
     * @param float $wholesale_price wholesale_price
     *
     * @return $this
     */
    public function setWholesalePrice($wholesale_price)
    {
        $this->container['wholesale_price'] = $wholesale_price;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets ecotax
     *
     * @return float
     */
    public function getEcotax()
    {
        return $this->container['ecotax'];
    }

    /**
     * Sets ecotax
     *
     * @param float $ecotax ecotax
     *
     * @return $this
     */
    public function setEcotax($ecotax)
    {
        $this->container['ecotax'] = $ecotax;

        return $this;
    }

    /**
     * Gets has_reduction
     *
     * @return bool
     */
    public function getHasReduction()
    {
        return $this->container['has_reduction'];
    }

    /**
     * Sets has_reduction
     *
     * @param bool $has_reduction has_reduction
     *
     * @return $this
     */
    public function setHasReduction($has_reduction)
    {
        $this->container['has_reduction'] = $has_reduction;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets price_per_kilo
     *
     * @return float
     */
    public function getPricePerKilo()
    {
        return $this->container['price_per_kilo'];
    }

    /**
     * Sets price_per_kilo
     *
     * @param float $price_per_kilo price_per_kilo
     *
     * @return $this
     */
    public function setPricePerKilo($price_per_kilo)
    {
        $this->container['price_per_kilo'] = $price_per_kilo;

        return $this;
    }

    /**
     * Gets price_per_liter
     *
     * @return float
     */
    public function getPricePerLiter()
    {
        return $this->container['price_per_liter'];
    }

    /**
     * Sets price_per_liter
     *
     * @param float $price_per_liter price_per_liter
     *
     * @return $this
     */
    public function setPricePerLiter($price_per_liter)
    {
        $this->container['price_per_liter'] = $price_per_liter;

        return $this;
    }

    /**
     * Gets price_per_unit
     *
     * @return float
     */
    public function getPricePerUnit()
    {
        return $this->container['price_per_unit'];
    }

    /**
     * Sets price_per_unit
     *
     * @param float $price_per_unit price_per_unit
     *
     * @return $this
     */
    public function setPricePerUnit($price_per_unit)
    {
        $this->container['price_per_unit'] = $price_per_unit;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets dl_product
     *
     * @return bool
     */
    public function getDlProduct()
    {
        return $this->container['dl_product'];
    }

    /**
     * Sets dl_product
     *
     * @param bool $dl_product dl_product
     *
     * @return $this
     */
    public function setDlProduct($dl_product)
    {
        $this->container['dl_product'] = $dl_product;

        return $this;
    }

    /**
     * Gets dl_filepath
     *
     * @return string
     */
    public function getDlFilepath()
    {
        return $this->container['dl_filepath'];
    }

    /**
     * Sets dl_filepath
     *
     * @param string $dl_filepath dl_filepath
     *
     * @return $this
     */
    public function setDlFilepath($dl_filepath)
    {
        $this->container['dl_filepath'] = $dl_filepath;

        return $this;
    }

    /**
     * Gets default_picture
     *
     * @return string
     */
    public function getDefaultPicture()
    {
        return $this->container['default_picture'];
    }

    /**
     * Sets default_picture
     *
     * @param string $default_picture default_picture
     *
     * @return $this
     */
    public function setDefaultPicture($default_picture)
    {
        $this->container['default_picture'] = $default_picture;

        return $this;
    }

    /**
     * Gets pictures
     *
     * @return string[]
     */
    public function getPictures()
    {
        return $this->container['pictures'];
    }

    /**
     * Sets pictures
     *
     * @param string[] $pictures pictures
     *
     * @return $this
     */
    public function setPictures($pictures)
    {
        $this->container['pictures'] = $pictures;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
