<?php
/**
 * CommandApi
 * PHP version 5
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API E-monsite
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: alpha
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emonsite\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Emonsite\ApiException;
use Emonsite\Configuration;
use Emonsite\HeaderSelector;
use Emonsite\ObjectSerializer;

/**
 * CommandApi Class Doc Comment
 *
 * @category Class
 * @package  Emonsite
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommandApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activateCommandItem
     *
     * Activate a command (payment received)
     *
     * @param  string $id id (required)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld
     */
    public function activateCommandItem($id)
    {
        list($response) = $this->activateCommandItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation activateCommandItemWithHttpInfo
     *
     * Activate a command (payment received)
     *
     * @param  string $id (required)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateCommandItemWithHttpInfo($id)
    {
        $returnType = '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld';
        $request = $this->activateCommandItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation activateCommandItemAsync
     *
     * Activate a command (payment received)
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateCommandItemAsync($id)
    {
        return $this->activateCommandItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateCommandItemAsyncWithHttpInfo
     *
     * Activate a command (payment received)
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateCommandItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld';
        $request = $this->activateCommandItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateCommandItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function activateCommandItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling activateCommandItem'
            );
        }

        $resourcePath = '/commands/{id}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommandCollection
     *
     * Retrieves the collection of CommandOutputDto resources.
     *
     * @param  string $reference reference (optional)
     * @param  string[] $reference reference (optional)
     * @param  string $brand brand (optional)
     * @param  string[] $brand brand (optional)
     * @param  string $products_offer_id - perso : Individual - pro : PRO - business : Business - eco : E-commerce - maindomain : Domain namePRO - secondarydomain : Secondary Domain namePRO - ssl_standard : SSL certificate - ndd_ssl : Domain Name + SSL - ndd_vpro_ssl : Version PRO + Domain Name + SSL certificate (optional)
     * @param  string $user_username user_username (optional)
     * @param  string $email email (optional)
     * @param  string $products_site_id products_site_id (optional)
     * @param  string[] $products_site_id products_site_id (optional)
     * @param  string $paymean - cb : CB - check : Chèque - transfer : Virement - paypal : Paypal - credits : Crédits - stripe : Stripe - cash : Espèce (optional)
     * @param  string[] $paymean paymean (optional)
     * @param  string $status - cart : Pending - locked : Awaiting payment - paid : Paid - canceled : Canceled (optional)
     * @param  string[] $status status (optional)
     * @param  string $total total (optional)
     * @param  string[] $total total (optional)
     * @param  string $add_dt_before add_dt_before (optional)
     * @param  string $add_dt_strictly_before add_dt_strictly_before (optional)
     * @param  string $add_dt_after add_dt_after (optional)
     * @param  string $add_dt_strictly_after add_dt_strictly_after (optional)
     * @param  string $payment_dt_before payment_dt_before (optional)
     * @param  string $payment_dt_strictly_before payment_dt_strictly_before (optional)
     * @param  string $payment_dt_after payment_dt_after (optional)
     * @param  string $payment_dt_strictly_after payment_dt_strictly_after (optional)
     * @param  string $order_add_dt order_add_dt (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emonsite\Models\InlineResponse2009
     */
    public function getCommandCollection($reference = null, $reference = null, $brand = null, $brand = null, $products_offer_id = null, $user_username = null, $email = null, $products_site_id = null, $products_site_id = null, $paymean = null, $paymean = null, $status = null, $status = null, $total = null, $total = null, $add_dt_before = null, $add_dt_strictly_before = null, $add_dt_after = null, $add_dt_strictly_after = null, $payment_dt_before = null, $payment_dt_strictly_before = null, $payment_dt_after = null, $payment_dt_strictly_after = null, $order_add_dt = null, $page = '1', $items_per_page = '30')
    {
        list($response) = $this->getCommandCollectionWithHttpInfo($reference, $reference, $brand, $brand, $products_offer_id, $user_username, $email, $products_site_id, $products_site_id, $paymean, $paymean, $status, $status, $total, $total, $add_dt_before, $add_dt_strictly_before, $add_dt_after, $add_dt_strictly_after, $payment_dt_before, $payment_dt_strictly_before, $payment_dt_after, $payment_dt_strictly_after, $order_add_dt, $page, $items_per_page);
        return $response;
    }

    /**
     * Operation getCommandCollectionWithHttpInfo
     *
     * Retrieves the collection of CommandOutputDto resources.
     *
     * @param  string $reference (optional)
     * @param  string[] $reference (optional)
     * @param  string $brand (optional)
     * @param  string[] $brand (optional)
     * @param  string $products_offer_id - perso : Individual - pro : PRO - business : Business - eco : E-commerce - maindomain : Domain namePRO - secondarydomain : Secondary Domain namePRO - ssl_standard : SSL certificate - ndd_ssl : Domain Name + SSL - ndd_vpro_ssl : Version PRO + Domain Name + SSL certificate (optional)
     * @param  string $user_username (optional)
     * @param  string $email (optional)
     * @param  string $products_site_id (optional)
     * @param  string[] $products_site_id (optional)
     * @param  string $paymean - cb : CB - check : Chèque - transfer : Virement - paypal : Paypal - credits : Crédits - stripe : Stripe - cash : Espèce (optional)
     * @param  string[] $paymean (optional)
     * @param  string $status - cart : Pending - locked : Awaiting payment - paid : Paid - canceled : Canceled (optional)
     * @param  string[] $status (optional)
     * @param  string $total (optional)
     * @param  string[] $total (optional)
     * @param  string $add_dt_before (optional)
     * @param  string $add_dt_strictly_before (optional)
     * @param  string $add_dt_after (optional)
     * @param  string $add_dt_strictly_after (optional)
     * @param  string $payment_dt_before (optional)
     * @param  string $payment_dt_strictly_before (optional)
     * @param  string $payment_dt_after (optional)
     * @param  string $payment_dt_strictly_after (optional)
     * @param  string $order_add_dt (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emonsite\Models\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommandCollectionWithHttpInfo($reference = null, $reference = null, $brand = null, $brand = null, $products_offer_id = null, $user_username = null, $email = null, $products_site_id = null, $products_site_id = null, $paymean = null, $paymean = null, $status = null, $status = null, $total = null, $total = null, $add_dt_before = null, $add_dt_strictly_before = null, $add_dt_after = null, $add_dt_strictly_after = null, $payment_dt_before = null, $payment_dt_strictly_before = null, $payment_dt_after = null, $payment_dt_strictly_after = null, $order_add_dt = null, $page = '1', $items_per_page = '30')
    {
        $returnType = '\Emonsite\Models\InlineResponse2009';
        $request = $this->getCommandCollectionRequest($reference, $reference, $brand, $brand, $products_offer_id, $user_username, $email, $products_site_id, $products_site_id, $paymean, $paymean, $status, $status, $total, $total, $add_dt_before, $add_dt_strictly_before, $add_dt_after, $add_dt_strictly_after, $payment_dt_before, $payment_dt_strictly_before, $payment_dt_after, $payment_dt_strictly_after, $order_add_dt, $page, $items_per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emonsite\Models\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommandCollectionAsync
     *
     * Retrieves the collection of CommandOutputDto resources.
     *
     * @param  string $reference (optional)
     * @param  string[] $reference (optional)
     * @param  string $brand (optional)
     * @param  string[] $brand (optional)
     * @param  string $products_offer_id - perso : Individual - pro : PRO - business : Business - eco : E-commerce - maindomain : Domain namePRO - secondarydomain : Secondary Domain namePRO - ssl_standard : SSL certificate - ndd_ssl : Domain Name + SSL - ndd_vpro_ssl : Version PRO + Domain Name + SSL certificate (optional)
     * @param  string $user_username (optional)
     * @param  string $email (optional)
     * @param  string $products_site_id (optional)
     * @param  string[] $products_site_id (optional)
     * @param  string $paymean - cb : CB - check : Chèque - transfer : Virement - paypal : Paypal - credits : Crédits - stripe : Stripe - cash : Espèce (optional)
     * @param  string[] $paymean (optional)
     * @param  string $status - cart : Pending - locked : Awaiting payment - paid : Paid - canceled : Canceled (optional)
     * @param  string[] $status (optional)
     * @param  string $total (optional)
     * @param  string[] $total (optional)
     * @param  string $add_dt_before (optional)
     * @param  string $add_dt_strictly_before (optional)
     * @param  string $add_dt_after (optional)
     * @param  string $add_dt_strictly_after (optional)
     * @param  string $payment_dt_before (optional)
     * @param  string $payment_dt_strictly_before (optional)
     * @param  string $payment_dt_after (optional)
     * @param  string $payment_dt_strictly_after (optional)
     * @param  string $order_add_dt (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommandCollectionAsync($reference = null, $reference = null, $brand = null, $brand = null, $products_offer_id = null, $user_username = null, $email = null, $products_site_id = null, $products_site_id = null, $paymean = null, $paymean = null, $status = null, $status = null, $total = null, $total = null, $add_dt_before = null, $add_dt_strictly_before = null, $add_dt_after = null, $add_dt_strictly_after = null, $payment_dt_before = null, $payment_dt_strictly_before = null, $payment_dt_after = null, $payment_dt_strictly_after = null, $order_add_dt = null, $page = '1', $items_per_page = '30')
    {
        return $this->getCommandCollectionAsyncWithHttpInfo($reference, $reference, $brand, $brand, $products_offer_id, $user_username, $email, $products_site_id, $products_site_id, $paymean, $paymean, $status, $status, $total, $total, $add_dt_before, $add_dt_strictly_before, $add_dt_after, $add_dt_strictly_after, $payment_dt_before, $payment_dt_strictly_before, $payment_dt_after, $payment_dt_strictly_after, $order_add_dt, $page, $items_per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommandCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of CommandOutputDto resources.
     *
     * @param  string $reference (optional)
     * @param  string[] $reference (optional)
     * @param  string $brand (optional)
     * @param  string[] $brand (optional)
     * @param  string $products_offer_id - perso : Individual - pro : PRO - business : Business - eco : E-commerce - maindomain : Domain namePRO - secondarydomain : Secondary Domain namePRO - ssl_standard : SSL certificate - ndd_ssl : Domain Name + SSL - ndd_vpro_ssl : Version PRO + Domain Name + SSL certificate (optional)
     * @param  string $user_username (optional)
     * @param  string $email (optional)
     * @param  string $products_site_id (optional)
     * @param  string[] $products_site_id (optional)
     * @param  string $paymean - cb : CB - check : Chèque - transfer : Virement - paypal : Paypal - credits : Crédits - stripe : Stripe - cash : Espèce (optional)
     * @param  string[] $paymean (optional)
     * @param  string $status - cart : Pending - locked : Awaiting payment - paid : Paid - canceled : Canceled (optional)
     * @param  string[] $status (optional)
     * @param  string $total (optional)
     * @param  string[] $total (optional)
     * @param  string $add_dt_before (optional)
     * @param  string $add_dt_strictly_before (optional)
     * @param  string $add_dt_after (optional)
     * @param  string $add_dt_strictly_after (optional)
     * @param  string $payment_dt_before (optional)
     * @param  string $payment_dt_strictly_before (optional)
     * @param  string $payment_dt_after (optional)
     * @param  string $payment_dt_strictly_after (optional)
     * @param  string $order_add_dt (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommandCollectionAsyncWithHttpInfo($reference = null, $reference = null, $brand = null, $brand = null, $products_offer_id = null, $user_username = null, $email = null, $products_site_id = null, $products_site_id = null, $paymean = null, $paymean = null, $status = null, $status = null, $total = null, $total = null, $add_dt_before = null, $add_dt_strictly_before = null, $add_dt_after = null, $add_dt_strictly_after = null, $payment_dt_before = null, $payment_dt_strictly_before = null, $payment_dt_after = null, $payment_dt_strictly_after = null, $order_add_dt = null, $page = '1', $items_per_page = '30')
    {
        $returnType = '\Emonsite\Models\InlineResponse2009';
        $request = $this->getCommandCollectionRequest($reference, $reference, $brand, $brand, $products_offer_id, $user_username, $email, $products_site_id, $products_site_id, $paymean, $paymean, $status, $status, $total, $total, $add_dt_before, $add_dt_strictly_before, $add_dt_after, $add_dt_strictly_after, $payment_dt_before, $payment_dt_strictly_before, $payment_dt_after, $payment_dt_strictly_after, $order_add_dt, $page, $items_per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommandCollection'
     *
     * @param  string $reference (optional)
     * @param  string[] $reference (optional)
     * @param  string $brand (optional)
     * @param  string[] $brand (optional)
     * @param  string $products_offer_id - perso : Individual - pro : PRO - business : Business - eco : E-commerce - maindomain : Domain namePRO - secondarydomain : Secondary Domain namePRO - ssl_standard : SSL certificate - ndd_ssl : Domain Name + SSL - ndd_vpro_ssl : Version PRO + Domain Name + SSL certificate (optional)
     * @param  string $user_username (optional)
     * @param  string $email (optional)
     * @param  string $products_site_id (optional)
     * @param  string[] $products_site_id (optional)
     * @param  string $paymean - cb : CB - check : Chèque - transfer : Virement - paypal : Paypal - credits : Crédits - stripe : Stripe - cash : Espèce (optional)
     * @param  string[] $paymean (optional)
     * @param  string $status - cart : Pending - locked : Awaiting payment - paid : Paid - canceled : Canceled (optional)
     * @param  string[] $status (optional)
     * @param  string $total (optional)
     * @param  string[] $total (optional)
     * @param  string $add_dt_before (optional)
     * @param  string $add_dt_strictly_before (optional)
     * @param  string $add_dt_after (optional)
     * @param  string $add_dt_strictly_after (optional)
     * @param  string $payment_dt_before (optional)
     * @param  string $payment_dt_strictly_before (optional)
     * @param  string $payment_dt_after (optional)
     * @param  string $payment_dt_strictly_after (optional)
     * @param  string $order_add_dt (optional)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCommandCollectionRequest($reference = null, $reference = null, $brand = null, $brand = null, $products_offer_id = null, $user_username = null, $email = null, $products_site_id = null, $products_site_id = null, $paymean = null, $paymean = null, $status = null, $status = null, $total = null, $total = null, $add_dt_before = null, $add_dt_strictly_before = null, $add_dt_after = null, $add_dt_strictly_after = null, $payment_dt_before = null, $payment_dt_strictly_before = null, $payment_dt_after = null, $payment_dt_strictly_after = null, $order_add_dt = null, $page = '1', $items_per_page = '30')
    {

        $resourcePath = '/commands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($reference !== null) {
            $queryParams['reference'] = ObjectSerializer::toQueryValue($reference, null);
        }
        // query params
        if (is_array($reference)) {
            $reference = ObjectSerializer::serializeCollection($reference, 'multi', true);
        }
        if ($reference !== null) {
            $queryParams['reference[]'] = ObjectSerializer::toQueryValue($reference, null);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand, null);
        }
        // query params
        if (is_array($brand)) {
            $brand = ObjectSerializer::serializeCollection($brand, 'multi', true);
        }
        if ($brand !== null) {
            $queryParams['brand[]'] = ObjectSerializer::toQueryValue($brand, null);
        }
        // query params
        if ($products_offer_id !== null) {
            $queryParams['products.offer.id'] = ObjectSerializer::toQueryValue($products_offer_id, null);
        }
        // query params
        if ($user_username !== null) {
            $queryParams['user.username'] = ObjectSerializer::toQueryValue($user_username, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($products_site_id !== null) {
            $queryParams['products.site.id'] = ObjectSerializer::toQueryValue($products_site_id, null);
        }
        // query params
        if (is_array($products_site_id)) {
            $products_site_id = ObjectSerializer::serializeCollection($products_site_id, 'multi', true);
        }
        if ($products_site_id !== null) {
            $queryParams['products.site.id[]'] = ObjectSerializer::toQueryValue($products_site_id, null);
        }
        // query params
        if ($paymean !== null) {
            $queryParams['paymean'] = ObjectSerializer::toQueryValue($paymean, null);
        }
        // query params
        if (is_array($paymean)) {
            $paymean = ObjectSerializer::serializeCollection($paymean, 'multi', true);
        }
        if ($paymean !== null) {
            $queryParams['paymean[]'] = ObjectSerializer::toQueryValue($paymean, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status[]'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($total !== null) {
            $queryParams['total'] = ObjectSerializer::toQueryValue($total, null);
        }
        // query params
        if (is_array($total)) {
            $total = ObjectSerializer::serializeCollection($total, 'multi', true);
        }
        if ($total !== null) {
            $queryParams['total[]'] = ObjectSerializer::toQueryValue($total, null);
        }
        // query params
        if ($add_dt_before !== null) {
            $queryParams['addDt[before]'] = ObjectSerializer::toQueryValue($add_dt_before, null);
        }
        // query params
        if ($add_dt_strictly_before !== null) {
            $queryParams['addDt[strictly_before]'] = ObjectSerializer::toQueryValue($add_dt_strictly_before, null);
        }
        // query params
        if ($add_dt_after !== null) {
            $queryParams['addDt[after]'] = ObjectSerializer::toQueryValue($add_dt_after, null);
        }
        // query params
        if ($add_dt_strictly_after !== null) {
            $queryParams['addDt[strictly_after]'] = ObjectSerializer::toQueryValue($add_dt_strictly_after, null);
        }
        // query params
        if ($payment_dt_before !== null) {
            $queryParams['paymentDt[before]'] = ObjectSerializer::toQueryValue($payment_dt_before, null);
        }
        // query params
        if ($payment_dt_strictly_before !== null) {
            $queryParams['paymentDt[strictly_before]'] = ObjectSerializer::toQueryValue($payment_dt_strictly_before, null);
        }
        // query params
        if ($payment_dt_after !== null) {
            $queryParams['paymentDt[after]'] = ObjectSerializer::toQueryValue($payment_dt_after, null);
        }
        // query params
        if ($payment_dt_strictly_after !== null) {
            $queryParams['paymentDt[strictly_after]'] = ObjectSerializer::toQueryValue($payment_dt_strictly_after, null);
        }
        // query params
        if ($order_add_dt !== null) {
            $queryParams['order[addDt]'] = ObjectSerializer::toQueryValue($order_add_dt, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommandItem
     *
     * Retrieves a CommandOutputDto resource.
     *
     * @param  string $id id (required)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld
     */
    public function getCommandItem($id)
    {
        list($response) = $this->getCommandItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCommandItemWithHttpInfo
     *
     * Retrieves a CommandOutputDto resource.
     *
     * @param  string $id (required)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommandItemWithHttpInfo($id)
    {
        $returnType = '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld';
        $request = $this->getCommandItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommandItemAsync
     *
     * Retrieves a CommandOutputDto resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommandItemAsync($id)
    {
        return $this->getCommandItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommandItemAsyncWithHttpInfo
     *
     * Retrieves a CommandOutputDto resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommandItemAsyncWithHttpInfo($id)
    {
        $returnType = '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld';
        $request = $this->getCommandItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommandItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCommandItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCommandItem'
            );
        }

        $resourcePath = '/commands/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchCommandItem
     *
     * Updates the Command resource.
     *
     * @param  string $id id (required)
     * @param  \Emonsite\Models\Command13659cedec6eacf2649cf892ab7577d0 $body The updated Command resource (optional)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld
     */
    public function patchCommandItem($id, $body = null)
    {
        list($response) = $this->patchCommandItemWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation patchCommandItemWithHttpInfo
     *
     * Updates the Command resource.
     *
     * @param  string $id (required)
     * @param  \Emonsite\Models\Command13659cedec6eacf2649cf892ab7577d0 $body The updated Command resource (optional)
     *
     * @throws \Emonsite\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCommandItemWithHttpInfo($id, $body = null)
    {
        $returnType = '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld';
        $request = $this->patchCommandItemRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchCommandItemAsync
     *
     * Updates the Command resource.
     *
     * @param  string $id (required)
     * @param  \Emonsite\Models\Command13659cedec6eacf2649cf892ab7577d0 $body The updated Command resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCommandItemAsync($id, $body = null)
    {
        return $this->patchCommandItemAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchCommandItemAsyncWithHttpInfo
     *
     * Updates the Command resource.
     *
     * @param  string $id (required)
     * @param  \Emonsite\Models\Command13659cedec6eacf2649cf892ab7577d0 $body The updated Command resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCommandItemAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Emonsite\Models\CommandEe5f35022d477654f1cddfdb02f77421Jsonld';
        $request = $this->patchCommandItemRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchCommandItem'
     *
     * @param  string $id (required)
     * @param  \Emonsite\Models\Command13659cedec6eacf2649cf892ab7577d0 $body The updated Command resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchCommandItemRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchCommandItem'
            );
        }

        $resourcePath = '/commands/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/merge-patch+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
